{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Opencast Moodle Plugins Guide Welcome to the documentation of the Opencast Moodle plugins. Plugins Currently, there are six Opencast Moodle plugins. These are: Tool : This is the base plugin, that is needed by all other plugins, to connect to the Opencast external API. Block : This plugin provides a block, that can be used, to upload videos and manage these from within a Moodle course. Activity : This activity provides a player for Opencast videos. Chunk Upload : This plugin provides the possibility of using a chunked upload in the block. Repository : This plugin provides a repository for accessing uploaded videos. Filter : This plugin provides a filter, that replaces links to Opencast with a player.","title":"Home"},{"location":"#opencast-moodle-plugins-guide","text":"Welcome to the documentation of the Opencast Moodle plugins.","title":"Opencast Moodle Plugins Guide"},{"location":"#plugins","text":"Currently, there are six Opencast Moodle plugins. These are: Tool : This is the base plugin, that is needed by all other plugins, to connect to the Opencast external API. Block : This plugin provides a block, that can be used, to upload videos and manage these from within a Moodle course. Activity : This activity provides a player for Opencast videos. Chunk Upload : This plugin provides the possibility of using a chunked upload in the block. Repository : This plugin provides a repository for accessing uploaded videos. Filter : This plugin provides a filter, that replaces links to Opencast with a player.","title":"Plugins"},{"location":"block/about/","text":"Opencast block plugin This block can be used, to link Moodle courses to Opencast series. Users with respective privileges (in the following called instructors) can use this block, to upload videos via Moodle to Opencast. These videos are transmitted to the Opencast system by a cronjob and create an event in the respective series there. Other plugins, like the Opencast activity plugin , can be used afterwards, to provide a complete series or a bulk of videos within a course. The block can be used, to automatically set the access privileges of Moodle users enrolled in the course. All events belonging to the series are displayed in the block. This way, the instructors get an overview of all recorded lectures as well as planned ones. Further, if set up correctly, the instructors are able to restrict the visibility to Moodle groups or prevent access by students at all. Installation The Opencast block plugin is available from GitHub as well as from the Moodle plugins directory . Requirements Installed and configured Opencast API tool Features Upload videos to Opencast Record videos using Opencast studio Overview of recorded and planned videos in the course Overview of all series and videos that a use has access to (independent of a course) ( Global overview ) Attaching transcription files to videos Send process notifications about videos Live status updates of the uploading status and workflow processing states of videos Download processed videos from Opencast Edit the video in the Opencast editor Edit metadata and delete videos Restrict the visibility of videos to Moodle groups or prevent access by students at all Allow teachers, to start Opencast workflows for videos Linking an existing Opencast series to the course Import videos from other Moodle courses via course reuse, series import or manual video bulk import Report problems to a support team with automatically including technical information In integration with the activity Opencast Video Provider : Provide the series or single videos as activity for students to watch directly in Moodle Restrict the visibility using the extensive Moodle activity access settings Configuration The block has many settings, that allow the administrator, to further specify the features or to turn them off. The configuration of the block is split up into six sections: Shared settings General settings Appearance Additional features LTI module features Import videos features Capabilities There are additional capabilities, with which you can control the access to the features of the block. Those capabilities are given in an alphabetical order by the following table: Capability Role in default configuration Description block/opencast:addactivity editingteacher, manager Add Opencast Video Provider activity for a series to course block/opencast:addactivityepisode editingteacher, manager Add Opencast Video Provider activity for an episode to course block/opencast:addinstance editingteacher, manager Add a block instance to a course. block/opencast:addlti editingteacher, manager Add Opencast LTI series module to course block/opencast:addltiepisode editingteacher, manager Add Opencast LTI episode module to course block/opencast:addvideo editingteacher, manager Add a video via Moodle to opencast block/opencast:autocompleteteacherroles editingteacher, teacher One's fullname is used for fullname suggestions in a course for different forms block/opencast:canchangeownerforallvideos manager Can change the owner of videos without being the owner itself block/opencast:createseriesforcourse manager Create a new series if block/course is not yet associated with one block/opencast:defineseriesforcourse manager Change the series ID which is associated with the block instance or rather course block/opencast:deleteevent editingteacher, manager Allows to delete a video as specified above block/opencast:directaccessvideolink student, teacher, editingteacher, manager This capability is mainly for those, who received a shared direct access link from a Lecturer and would like to access that video. block/opencast:downloadvideo editingteacher, manager Download processed videos block/opencast:importseriesintocourse manager Can import a series into a course block/opencast:manageseriesforcourse manager Can set the default series of a course and delete series from a course block/opencast:manualimporttarget editingteacher, manager Manually import videos from other courses block/opencast:manualimportsource editingteacher, manager Manually import videos from a course block/opencast:myaddinstance user Add a block instance to the dashboard. block/opencast:sharedirectaccessvideolink editingteacher, manager This is the capability, to give to Lecturers mainly, who would like to share the direct access link to an event with students or anyone else. The feature of sharing a direct access link must be activated in the admin settings and then, Lecturers who have this capability, will have another item in the action menu of each event, which gives them a local Moodle url to share. block/opencast:startworkflow editingteacher, manager Start a preconfigured workflow for a video block/opencast:unassignevent - Allows to unassign a video from the series of the course as specified above. block/opencast:viewunpublishedvideos editingteacher, manager View the list of all videos of the course, which are available in opencast (even not published ones) block/opencast:viewusers manager View all Moodle users when trying to change the owner of a video on the global overview page Logging The execution of upload jobs are being logged, which can be viewed at Site administration -> Reports -> Logs . View the setting \"Site Errors\" instead of \"All activities\" you can view only those upload jobs, which failed. Placement This plugin is designed as block and, to be used, it will be initially added to a Moodle course by a teacher. The block shows a quick overview over the videos, which are uploaded in the block, but mainly links to a fullscreen overview page, where the full functionality of the plugin is provided. If you want to provide the plugin in every course by default without requiring, that the teachers adds it to the course, please have a look at Moodle core's $CFG->defaultblocks setting which is set in config.php only and which is described on https://github.com/moodle/moodle/blob/master/config-dist.php. As an alternative to placing the block by default, you might also want to add a link to the plugin's overview page to the Boost nav drawer. This plugin does not offer support for adding a Boost nav drawer item itself, but we would like to reference the https://moodle.org/plugins/local_boostnavigation plugin for this job. After installing local_boostnavigation to your Moodle instance, please add the following line to the local_boostnavigation | insertcustomcoursenodesusers setting: Opencast Videos|/blocks/opencast/index.php?courseid={courseid}|||editingteacher,manager|admin|OR|fa-film|opencast|grades Please take extra care, that the editingteacher,manager list of roles should match the list of roles, who are given the block/opencast:addvideo capability in your Moodle instance. After adding the Boost nav drawer item, you can also remove the block/opencast:addinstance capability from all roles, as adding the block is not really necessary anymore. Export and import settings If you want to export and import the administrator settings of the block, you can use the Admin presets block. The admin presets block can be added to the frontpage (https://yourmoodlesite.com/?redirect=0). After adding the block, you can select which settings to export or choose a file from which settings should be imported. In Moodle 4, this functionality is partly integrated into the core.","title":"About"},{"location":"block/about/#opencast-block-plugin","text":"This block can be used, to link Moodle courses to Opencast series. Users with respective privileges (in the following called instructors) can use this block, to upload videos via Moodle to Opencast. These videos are transmitted to the Opencast system by a cronjob and create an event in the respective series there. Other plugins, like the Opencast activity plugin , can be used afterwards, to provide a complete series or a bulk of videos within a course. The block can be used, to automatically set the access privileges of Moodle users enrolled in the course. All events belonging to the series are displayed in the block. This way, the instructors get an overview of all recorded lectures as well as planned ones. Further, if set up correctly, the instructors are able to restrict the visibility to Moodle groups or prevent access by students at all.","title":"Opencast block plugin"},{"location":"block/about/#installation","text":"The Opencast block plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"block/about/#requirements","text":"Installed and configured Opencast API tool","title":"Requirements"},{"location":"block/about/#features","text":"Upload videos to Opencast Record videos using Opencast studio Overview of recorded and planned videos in the course Overview of all series and videos that a use has access to (independent of a course) ( Global overview ) Attaching transcription files to videos Send process notifications about videos Live status updates of the uploading status and workflow processing states of videos Download processed videos from Opencast Edit the video in the Opencast editor Edit metadata and delete videos Restrict the visibility of videos to Moodle groups or prevent access by students at all Allow teachers, to start Opencast workflows for videos Linking an existing Opencast series to the course Import videos from other Moodle courses via course reuse, series import or manual video bulk import Report problems to a support team with automatically including technical information In integration with the activity Opencast Video Provider : Provide the series or single videos as activity for students to watch directly in Moodle Restrict the visibility using the extensive Moodle activity access settings","title":"Features"},{"location":"block/about/#configuration","text":"The block has many settings, that allow the administrator, to further specify the features or to turn them off. The configuration of the block is split up into six sections: Shared settings General settings Appearance Additional features LTI module features Import videos features","title":"Configuration"},{"location":"block/about/#capabilities","text":"There are additional capabilities, with which you can control the access to the features of the block. Those capabilities are given in an alphabetical order by the following table: Capability Role in default configuration Description block/opencast:addactivity editingteacher, manager Add Opencast Video Provider activity for a series to course block/opencast:addactivityepisode editingteacher, manager Add Opencast Video Provider activity for an episode to course block/opencast:addinstance editingteacher, manager Add a block instance to a course. block/opencast:addlti editingteacher, manager Add Opencast LTI series module to course block/opencast:addltiepisode editingteacher, manager Add Opencast LTI episode module to course block/opencast:addvideo editingteacher, manager Add a video via Moodle to opencast block/opencast:autocompleteteacherroles editingteacher, teacher One's fullname is used for fullname suggestions in a course for different forms block/opencast:canchangeownerforallvideos manager Can change the owner of videos without being the owner itself block/opencast:createseriesforcourse manager Create a new series if block/course is not yet associated with one block/opencast:defineseriesforcourse manager Change the series ID which is associated with the block instance or rather course block/opencast:deleteevent editingteacher, manager Allows to delete a video as specified above block/opencast:directaccessvideolink student, teacher, editingteacher, manager This capability is mainly for those, who received a shared direct access link from a Lecturer and would like to access that video. block/opencast:downloadvideo editingteacher, manager Download processed videos block/opencast:importseriesintocourse manager Can import a series into a course block/opencast:manageseriesforcourse manager Can set the default series of a course and delete series from a course block/opencast:manualimporttarget editingteacher, manager Manually import videos from other courses block/opencast:manualimportsource editingteacher, manager Manually import videos from a course block/opencast:myaddinstance user Add a block instance to the dashboard. block/opencast:sharedirectaccessvideolink editingteacher, manager This is the capability, to give to Lecturers mainly, who would like to share the direct access link to an event with students or anyone else. The feature of sharing a direct access link must be activated in the admin settings and then, Lecturers who have this capability, will have another item in the action menu of each event, which gives them a local Moodle url to share. block/opencast:startworkflow editingteacher, manager Start a preconfigured workflow for a video block/opencast:unassignevent - Allows to unassign a video from the series of the course as specified above. block/opencast:viewunpublishedvideos editingteacher, manager View the list of all videos of the course, which are available in opencast (even not published ones) block/opencast:viewusers manager View all Moodle users when trying to change the owner of a video on the global overview page","title":"Capabilities"},{"location":"block/about/#logging","text":"The execution of upload jobs are being logged, which can be viewed at Site administration -> Reports -> Logs . View the setting \"Site Errors\" instead of \"All activities\" you can view only those upload jobs, which failed.","title":"Logging"},{"location":"block/about/#placement","text":"This plugin is designed as block and, to be used, it will be initially added to a Moodle course by a teacher. The block shows a quick overview over the videos, which are uploaded in the block, but mainly links to a fullscreen overview page, where the full functionality of the plugin is provided. If you want to provide the plugin in every course by default without requiring, that the teachers adds it to the course, please have a look at Moodle core's $CFG->defaultblocks setting which is set in config.php only and which is described on https://github.com/moodle/moodle/blob/master/config-dist.php. As an alternative to placing the block by default, you might also want to add a link to the plugin's overview page to the Boost nav drawer. This plugin does not offer support for adding a Boost nav drawer item itself, but we would like to reference the https://moodle.org/plugins/local_boostnavigation plugin for this job. After installing local_boostnavigation to your Moodle instance, please add the following line to the local_boostnavigation | insertcustomcoursenodesusers setting: Opencast Videos|/blocks/opencast/index.php?courseid={courseid}|||editingteacher,manager|admin|OR|fa-film|opencast|grades Please take extra care, that the editingteacher,manager list of roles should match the list of roles, who are given the block/opencast:addvideo capability in your Moodle instance. After adding the Boost nav drawer item, you can also remove the block/opencast:addinstance capability from all roles, as adding the block is not really necessary anymore.","title":"Placement"},{"location":"block/about/#export-and-import-settings","text":"If you want to export and import the administrator settings of the block, you can use the Admin presets block. The admin presets block can be added to the frontpage (https://yourmoodlesite.com/?redirect=0). After adding the block, you can select which settings to export or choose a file from which settings should be imported. In Moodle 4, this functionality is partly integrated into the core.","title":"Export and import settings"},{"location":"block/additional_features/","text":"Additional Features In this section, you can configure the chunkuploader , the access to Opencast Studio, the access to Opencast Editor, the visibility of episodes, the activity module settings, the settings for transcriptions as well as some other features. Settings for the chunkuploader If you also have the chunkuploader installed, you configure it in this section. Enable Chunkupload: If enabled, it will be possible, to upload videos using the chunkupload plugin. Defaults to yes. Video size limit: Limits the file size of uploaded videos through the chunkupload . The default is 2.0 GB. Offer filepicker as alternative: If this option is enabled, a checkbox, labeled as 'Use Moodle default file picker to access all repositories' will be shown below the chunkupload widget. As soon as this checkbox is checked, the chunkupload widget is hidden and the Moodle default file picker is shown, giving access to all Moodle repositories. Defaults to yes. Opencast Studio integration In this section, you can enable the feature, to add Opencast Studio support to the block. The options are: Show the link to opencast studio: This option renders a button to Opencast Studio in the block content and the block overview. Defaults to no. Redirect to Studio in a new tab: If enabled, the Opencast Studio opens in a new tab. Defaults to yes. Opencast Studio Base URL: The base URL, to be used to call Opencast Studio. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Show a redirect back button in Studio: When enabled, Opencast Studio then renders an additional button \"Exit and go back\" after up- or downloading the recording. Defaults to no. Label for Studio's return button: This label works as a short description, where the return link leads to. This label will be appended to the Opencast Studio return button text. If empty, the Moodle site name will be passed as label. Defaults to empty. Custom Studio return endpoint URL: If empty, the return URL redirects back to the same Moodle Opencast block overview, where the request comes from. A custom endpoint URL will then be passed to Opencast Studio as return URL, if configured. In this case, an admin is able, to use two placeholders including [OCINSTANCEID] and [COURSEID]. Please NOTE: The URL must be relative to wwwroot . Defaults to /blocks/opencast/index.php?courseid=[COURSEID]&ocinstanceid=[OCINSTANCEID] . Custom Studio settings filename: This custom settings filename will be appended to the query, when redirecting to Opencast Studio. Afterwards Opencast Studio looks for that filename relative to its directory and reads its settings from that file. Note, that this feature requires Opencast 14.2 or later. Defaults to empty. If LTI is configured in the Opencast API plugin , the access to Opencast Studio is initiated with LTI, so that users are directly authenticated. Recommendation: It is possible, to configure Opencast Studio, to add certain ACLs to the recorded videos. It is recommended, to add the same ACLs to recorded videos as to uploaded videos via the block. Opencast Editor integration In this section, you can enable the feature, to add Opencast Editor support to the block. The options are: Show the link to opencast editor in the action menu: This option renders a button to Opencast Editor in the block content and the block overview. The other settings of this section and the LTI credentials have to be configured as well. Defaults to no. Opencast Editor Base URL: The base URL to be used, to call the Opencast Editor. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Opencast Editor Endpoint: The Opencast Editor endpoint, to access the editor. The mediapackage ID will be added at the end of that URL. Defaults to /editor-ui/index.html?mediaPackageId= . If LTI is configured in the Opencast API plugin , the access to the Opencast Editor is initiated with LTI, so that users are directly authenticated. Engage player integration If you use this configuration, the video titles in the block overview are displayed as links to the Engage player. If LTI is configured in the Opencast API plugin , the user will be authenticated with LTI before being redirected to the Engage player. URl of the Opencast Engage server : Absolute URL to the Engage server. If empty, the video titles in the overview are not linked to the Engage player. Defaults to empty. Notifications In this section, you can configure, whether teachers should receive notifications about the processing status of videos after upload. Allow event process status notification: This option allows the system, to send notifications about the status of uploaded videos from Opencast during the process to the users. This option only includes the uploader of the video in the user list. To notify all teachers of the course, the setting Notify all course teachers about the event process status should be enabled. This feature is realized through a scheduled task, that is recommended to run every minute. Defaults to no. Notify all course teachers about the event process status: With this option, apart from the uploader of the video, all the teachers of the course, where the video is uploaded from, get notified about the Opencast processing status (see the setting Allow event process status notification ). Defaults to no. Cleanup notification jobs after (Days): This setting sets a deadline in days for the jobs, that are not yet completed. After the deadline was reached, the job will be deleted despite its process state. This features helps, to remove the pending notification jobs from the list, and it is done through a scheduled task, that is recommended to run once a day. Defaults to 0. NOTE: (zero) \"0\" value disables the setting. Control episode visibility In this section, you can configure, whether the teacher is allowed, to control the visibility of an Opencast episode, after the episode has been processed. The options are: Enable visibility control: If enabled, teachers can control the visibility of an Opencast episode on upload. Defaults to yes. Allow episode visibility control after processing: If enabled, teachers can control the visibility of an Opencast episode after the episode has been processed in Opencast. Defaults to yes. Allow episode group restriction: If enabled, teachers can not only control the visibility of an Opencast episode for all course users, but can also restrict the visibility to particular course groups. Defaults to yes. Waiting time for scheduled visibility change (Minutes): It defines a minimum waiting time (in minutes), that a scheduled visibility change process should wait. This time span will be added to the current time for the scheduled video change date field in the add video form. It will also be used, to validate that field. Based on how fast the Opencast instance processes the videos, this waiting time could be configured. Defaults to 20. NOTE: When empty or (zero) \"0\", the default value is used. Opencast activity modules If you also have the Opencast Video Provider activity installed, you can configure it in this section. Enable Opencast activity: If enabled, teachers can add an activity for the series to the course. Defaults to no. Default activity title: Default title, that is used, when a new Opencast activity is added to a course. Defaults to Opencast videos . Add series module intro: If enabled, teachers can add a description to the Opencast activity series module, that is shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast activity series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Defaults to no. Enable Opencast activity for episodes: If enabled, teachers can add activities for episodes to the course. Defaults to no. Add episode module intro: If enabled, teachers can add a description to the Opencast activity episode module, that is shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, to which the Opencast activity episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast activity episode module is added to a course. Defaults to no. For the availability features, the Enable restricted access feature must be activated in the global settings. Settings for Transcription In this section, you can configure, whether transcription files can be attached to videos and different features as well as properties for those transcription files. Workflow for transcription (speech to text): This workflow is triggered, when transcription files are attached to the video. If not set, uploading and managing transcriptions is not provided. By setting this workflow, a new section to upload transcription files in the add video page as well as a new action menu item in the overview page are provided, to upload/handle the new/current transcriptions files. Defaults to empty. Workflow for delete transcription: This workflow is triggered, when a transcription is deleted. It is required, to provide the deletion feature in order for an event, to be processed correctly. NOTE: If empty, the feature will be disabled. Defaults to empty. Allow download transcriptions: If enabled, the transcription download button will be displayed in the manage transcriptions page, by which teachers are able, to download the transcriptions file. NOTE: In case you are using Opencast 13 or later, you need to make sure, that all prerequisites including LTI features and permissions to access /assets/ endpoint for LTI users, are set correctly, as it is mandatory, to perform LTI call. Defaults to yes. Transcription Service Types (Flavors): These service types (flavors) will be presented as select (dropdown) options, to select from, when uploading transcriptions. It is a key-value pair of information, by which the keys are consumed by Opencast and values are human-readable information, that describe the type of transcription service. (Multi-Language filters) In order for each value of the dropdown (select) to get translated using filters such as Multi-Language Content (v2) , each value should contain the placeholder, defined by that filter i.e. \"{mlang en}Amberscript German{mlang}{mlang de}Amberscript Deutsch{mlang}\" . Maximum number of sets to upload: Specifies, how many transcription boxes should be provided to teachers, to upload. In the case, that it is not correctly set, only one field set will be provided. Defaults to 3. Allowed transcription file extensions: Comma separated list of allowed transcription file extensions (extensions must exist in Moodle's File types list). If left blank, all extensions with the type 'HTML track files' are allowed (again see File types ). For the transcription features to work properly, the Opencast user should have the following roles: * ROLE_UI_EVENTS_DETAILS_ASSETS_EDIT * ROLE_UI_EVENTS_DETAILS_ASSETS_VIEW * ROLE_UI_EVENTS_DETAILS_MEDIA_VIEW * ROLE_GROUP_MH_DEFAULT_ORG_SYSTEM_ADMINS For the setting workflow for transcription and for the setting workflow for delete transcription the following sample Opencast workflow Republish metadata and captions may be used: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>republish-metadata-and-captions</id> <title>Republish metadata and captions</title> <tags> <tag>api</tag> </tags> <operations> <!-- Publish to engage player --> <operation id=\"publish-engage\" exception-handler-workflow=\"partial-error\" description=\"Update recording in Opencast Media Module\"> <configurations> <configuration key=\"download-source-flavors\">dublincore/*,security/*,captions/*</configuration> <configuration key=\"strategy\">merge</configuration> <configuration key=\"check-availability\">false</configuration> </configurations> </operation> <!-- Clean up work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"delete-external\">true</configuration> <configuration key=\"preserve-flavors\">security/*</configuration> </configurations> </operation> </operations> </definition> Live Status Update In this section, you can configure, whether uploading status and workflow processing states of videos will be watched and are visible. Enable live status update feature: If enabled, uploading status and workflow processing states will be watched, when they are in an ongoing process. This is done, by pulling the status information for those processes in a one-second interval. Defaults to yes. Page reload timeout (in seconds): The timeout in seconds, by which the page will be reloaded, when there is an updated status identified. If empty or less than 0, a default value of 3 seconds will be considered. NOTE: Before reloading the page, a teachers will be notified. The reload is important, so that every required backend process takes place. Defaults to 3. Workflows Privacy Notice In this section, you can configure the privacy notice for workflows in the start workflow dialog. Workflow Privacy Notice Info Text: This input is used, to provide information about privacy notice for workflows in the start workflow dialog. NOTE: If empty, no notice will be displayed. Defaults to empty. Workflows Definition List: A comma separated list of workflow definitions, by which the privacy notice is displayed. When empty, the privacy notice will be displayed for all workflows. Defaults to empty. Workflow Privacy Notice Title: A title, to be displayed in start workflow dialog. It is intended, to be configurable in order, to be adjusted by the users. When empty, default string is used. Defaults to empty. Additional features In this section, unrelated configurations are collected. Download channel: If not empty, teachers can download processed videos. The video files are served from the specified Opencast channel. Defaults to api . Direct access channel: Opencast publication channel, from which the videos are served, when accessing them directly. Leaving this option empty, will disable the feature. Defaults to empty. NOTE: It is recommended, to take further caution when using this feature, since it reveals the direct video data on the Opencast server upon accessing the link. Workflow tag: Comma separated list of tags for Opencast workflows, that can be configured by the admin and manually started by teachers. Defaults to empty. Support email: Email address, to which reports are sent, if users report problems with videos. Defaults to empty. Terms of use: If you enter some text, a checkbox with the terms of use will appear on the \"Video upload\" page. The users must accept the entered terms of use, before they can upload the video. Defaults to empty.","title":"Additional features"},{"location":"block/additional_features/#additional-features","text":"In this section, you can configure the chunkuploader , the access to Opencast Studio, the access to Opencast Editor, the visibility of episodes, the activity module settings, the settings for transcriptions as well as some other features.","title":"Additional Features"},{"location":"block/additional_features/#settings-for-the-chunkuploader","text":"If you also have the chunkuploader installed, you configure it in this section. Enable Chunkupload: If enabled, it will be possible, to upload videos using the chunkupload plugin. Defaults to yes. Video size limit: Limits the file size of uploaded videos through the chunkupload . The default is 2.0 GB. Offer filepicker as alternative: If this option is enabled, a checkbox, labeled as 'Use Moodle default file picker to access all repositories' will be shown below the chunkupload widget. As soon as this checkbox is checked, the chunkupload widget is hidden and the Moodle default file picker is shown, giving access to all Moodle repositories. Defaults to yes.","title":"Settings for the chunkuploader"},{"location":"block/additional_features/#opencast-studio-integration","text":"In this section, you can enable the feature, to add Opencast Studio support to the block. The options are: Show the link to opencast studio: This option renders a button to Opencast Studio in the block content and the block overview. Defaults to no. Redirect to Studio in a new tab: If enabled, the Opencast Studio opens in a new tab. Defaults to yes. Opencast Studio Base URL: The base URL, to be used to call Opencast Studio. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Show a redirect back button in Studio: When enabled, Opencast Studio then renders an additional button \"Exit and go back\" after up- or downloading the recording. Defaults to no. Label for Studio's return button: This label works as a short description, where the return link leads to. This label will be appended to the Opencast Studio return button text. If empty, the Moodle site name will be passed as label. Defaults to empty. Custom Studio return endpoint URL: If empty, the return URL redirects back to the same Moodle Opencast block overview, where the request comes from. A custom endpoint URL will then be passed to Opencast Studio as return URL, if configured. In this case, an admin is able, to use two placeholders including [OCINSTANCEID] and [COURSEID]. Please NOTE: The URL must be relative to wwwroot . Defaults to /blocks/opencast/index.php?courseid=[COURSEID]&ocinstanceid=[OCINSTANCEID] . Custom Studio settings filename: This custom settings filename will be appended to the query, when redirecting to Opencast Studio. Afterwards Opencast Studio looks for that filename relative to its directory and reads its settings from that file. Note, that this feature requires Opencast 14.2 or later. Defaults to empty. If LTI is configured in the Opencast API plugin , the access to Opencast Studio is initiated with LTI, so that users are directly authenticated. Recommendation: It is possible, to configure Opencast Studio, to add certain ACLs to the recorded videos. It is recommended, to add the same ACLs to recorded videos as to uploaded videos via the block.","title":"Opencast Studio integration"},{"location":"block/additional_features/#opencast-editor-integration","text":"In this section, you can enable the feature, to add Opencast Editor support to the block. The options are: Show the link to opencast editor in the action menu: This option renders a button to Opencast Editor in the block content and the block overview. The other settings of this section and the LTI credentials have to be configured as well. Defaults to no. Opencast Editor Base URL: The base URL to be used, to call the Opencast Editor. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Opencast Editor Endpoint: The Opencast Editor endpoint, to access the editor. The mediapackage ID will be added at the end of that URL. Defaults to /editor-ui/index.html?mediaPackageId= . If LTI is configured in the Opencast API plugin , the access to the Opencast Editor is initiated with LTI, so that users are directly authenticated.","title":"Opencast Editor integration"},{"location":"block/additional_features/#engage-player-integration","text":"If you use this configuration, the video titles in the block overview are displayed as links to the Engage player. If LTI is configured in the Opencast API plugin , the user will be authenticated with LTI before being redirected to the Engage player. URl of the Opencast Engage server : Absolute URL to the Engage server. If empty, the video titles in the overview are not linked to the Engage player. Defaults to empty.","title":"Engage player integration"},{"location":"block/additional_features/#notifications","text":"In this section, you can configure, whether teachers should receive notifications about the processing status of videos after upload. Allow event process status notification: This option allows the system, to send notifications about the status of uploaded videos from Opencast during the process to the users. This option only includes the uploader of the video in the user list. To notify all teachers of the course, the setting Notify all course teachers about the event process status should be enabled. This feature is realized through a scheduled task, that is recommended to run every minute. Defaults to no. Notify all course teachers about the event process status: With this option, apart from the uploader of the video, all the teachers of the course, where the video is uploaded from, get notified about the Opencast processing status (see the setting Allow event process status notification ). Defaults to no. Cleanup notification jobs after (Days): This setting sets a deadline in days for the jobs, that are not yet completed. After the deadline was reached, the job will be deleted despite its process state. This features helps, to remove the pending notification jobs from the list, and it is done through a scheduled task, that is recommended to run once a day. Defaults to 0. NOTE: (zero) \"0\" value disables the setting.","title":"Notifications"},{"location":"block/additional_features/#control-episode-visibility","text":"In this section, you can configure, whether the teacher is allowed, to control the visibility of an Opencast episode, after the episode has been processed. The options are: Enable visibility control: If enabled, teachers can control the visibility of an Opencast episode on upload. Defaults to yes. Allow episode visibility control after processing: If enabled, teachers can control the visibility of an Opencast episode after the episode has been processed in Opencast. Defaults to yes. Allow episode group restriction: If enabled, teachers can not only control the visibility of an Opencast episode for all course users, but can also restrict the visibility to particular course groups. Defaults to yes. Waiting time for scheduled visibility change (Minutes): It defines a minimum waiting time (in minutes), that a scheduled visibility change process should wait. This time span will be added to the current time for the scheduled video change date field in the add video form. It will also be used, to validate that field. Based on how fast the Opencast instance processes the videos, this waiting time could be configured. Defaults to 20. NOTE: When empty or (zero) \"0\", the default value is used.","title":"Control episode visibility"},{"location":"block/additional_features/#opencast-activity-modules","text":"If you also have the Opencast Video Provider activity installed, you can configure it in this section. Enable Opencast activity: If enabled, teachers can add an activity for the series to the course. Defaults to no. Default activity title: Default title, that is used, when a new Opencast activity is added to a course. Defaults to Opencast videos . Add series module intro: If enabled, teachers can add a description to the Opencast activity series module, that is shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast activity series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Defaults to no. Enable Opencast activity for episodes: If enabled, teachers can add activities for episodes to the course. Defaults to no. Add episode module intro: If enabled, teachers can add a description to the Opencast activity episode module, that is shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, to which the Opencast activity episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast activity episode module is added to a course. Defaults to no. For the availability features, the Enable restricted access feature must be activated in the global settings.","title":"Opencast activity modules"},{"location":"block/additional_features/#settings-for-transcription","text":"In this section, you can configure, whether transcription files can be attached to videos and different features as well as properties for those transcription files. Workflow for transcription (speech to text): This workflow is triggered, when transcription files are attached to the video. If not set, uploading and managing transcriptions is not provided. By setting this workflow, a new section to upload transcription files in the add video page as well as a new action menu item in the overview page are provided, to upload/handle the new/current transcriptions files. Defaults to empty. Workflow for delete transcription: This workflow is triggered, when a transcription is deleted. It is required, to provide the deletion feature in order for an event, to be processed correctly. NOTE: If empty, the feature will be disabled. Defaults to empty. Allow download transcriptions: If enabled, the transcription download button will be displayed in the manage transcriptions page, by which teachers are able, to download the transcriptions file. NOTE: In case you are using Opencast 13 or later, you need to make sure, that all prerequisites including LTI features and permissions to access /assets/ endpoint for LTI users, are set correctly, as it is mandatory, to perform LTI call. Defaults to yes. Transcription Service Types (Flavors): These service types (flavors) will be presented as select (dropdown) options, to select from, when uploading transcriptions. It is a key-value pair of information, by which the keys are consumed by Opencast and values are human-readable information, that describe the type of transcription service. (Multi-Language filters) In order for each value of the dropdown (select) to get translated using filters such as Multi-Language Content (v2) , each value should contain the placeholder, defined by that filter i.e. \"{mlang en}Amberscript German{mlang}{mlang de}Amberscript Deutsch{mlang}\" . Maximum number of sets to upload: Specifies, how many transcription boxes should be provided to teachers, to upload. In the case, that it is not correctly set, only one field set will be provided. Defaults to 3. Allowed transcription file extensions: Comma separated list of allowed transcription file extensions (extensions must exist in Moodle's File types list). If left blank, all extensions with the type 'HTML track files' are allowed (again see File types ). For the transcription features to work properly, the Opencast user should have the following roles: * ROLE_UI_EVENTS_DETAILS_ASSETS_EDIT * ROLE_UI_EVENTS_DETAILS_ASSETS_VIEW * ROLE_UI_EVENTS_DETAILS_MEDIA_VIEW * ROLE_GROUP_MH_DEFAULT_ORG_SYSTEM_ADMINS For the setting workflow for transcription and for the setting workflow for delete transcription the following sample Opencast workflow Republish metadata and captions may be used: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>republish-metadata-and-captions</id> <title>Republish metadata and captions</title> <tags> <tag>api</tag> </tags> <operations> <!-- Publish to engage player --> <operation id=\"publish-engage\" exception-handler-workflow=\"partial-error\" description=\"Update recording in Opencast Media Module\"> <configurations> <configuration key=\"download-source-flavors\">dublincore/*,security/*,captions/*</configuration> <configuration key=\"strategy\">merge</configuration> <configuration key=\"check-availability\">false</configuration> </configurations> </operation> <!-- Clean up work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"delete-external\">true</configuration> <configuration key=\"preserve-flavors\">security/*</configuration> </configurations> </operation> </operations> </definition>","title":"Settings for Transcription"},{"location":"block/additional_features/#live-status-update","text":"In this section, you can configure, whether uploading status and workflow processing states of videos will be watched and are visible. Enable live status update feature: If enabled, uploading status and workflow processing states will be watched, when they are in an ongoing process. This is done, by pulling the status information for those processes in a one-second interval. Defaults to yes. Page reload timeout (in seconds): The timeout in seconds, by which the page will be reloaded, when there is an updated status identified. If empty or less than 0, a default value of 3 seconds will be considered. NOTE: Before reloading the page, a teachers will be notified. The reload is important, so that every required backend process takes place. Defaults to 3.","title":"Live Status Update"},{"location":"block/additional_features/#workflows-privacy-notice","text":"In this section, you can configure the privacy notice for workflows in the start workflow dialog. Workflow Privacy Notice Info Text: This input is used, to provide information about privacy notice for workflows in the start workflow dialog. NOTE: If empty, no notice will be displayed. Defaults to empty. Workflows Definition List: A comma separated list of workflow definitions, by which the privacy notice is displayed. When empty, the privacy notice will be displayed for all workflows. Defaults to empty. Workflow Privacy Notice Title: A title, to be displayed in start workflow dialog. It is intended, to be configurable in order, to be adjusted by the users. When empty, default string is used. Defaults to empty.","title":"Workflows Privacy Notice"},{"location":"block/additional_features/#additional-features_1","text":"In this section, unrelated configurations are collected. Download channel: If not empty, teachers can download processed videos. The video files are served from the specified Opencast channel. Defaults to api . Direct access channel: Opencast publication channel, from which the videos are served, when accessing them directly. Leaving this option empty, will disable the feature. Defaults to empty. NOTE: It is recommended, to take further caution when using this feature, since it reveals the direct video data on the Opencast server upon accessing the link. Workflow tag: Comma separated list of tags for Opencast workflows, that can be configured by the admin and manually started by teachers. Defaults to empty. Support email: Email address, to which reports are sent, if users report problems with videos. Defaults to empty. Terms of use: If you enter some text, a checkbox with the terms of use will appear on the \"Video upload\" page. The users must accept the entered terms of use, before they can upload the video. Defaults to empty.","title":"Additional features"},{"location":"block/appearance/","text":"Appearance In this section, you can configure, whether particular columns on the overview page are shown or not. Show publication channels: If enabled, the table of available videos on the overview page will contain a column, which shows the publication channel of the Opencast episode. The same information will also be given on the Opencast episode deletion page. Defaults to yes. Show end date: If enabled, the table of available and scheduled videos on the overview page will contain a column, which shows the end date of the Opencast episode. Defaults to yes. Show location: If enabled, the table of available and scheduled videos on the overview page will contain a column, which shows the location of the Opencast episode. Defaults to yes.","title":"Appearance"},{"location":"block/appearance/#appearance","text":"In this section, you can configure, whether particular columns on the overview page are shown or not. Show publication channels: If enabled, the table of available videos on the overview page will contain a column, which shows the publication channel of the Opencast episode. The same information will also be given on the Opencast episode deletion page. Defaults to yes. Show end date: If enabled, the table of available and scheduled videos on the overview page will contain a column, which shows the end date of the Opencast episode. Defaults to yes. Show location: If enabled, the table of available and scheduled videos on the overview page will contain a column, which shows the location of the Opencast episode. Defaults to yes.","title":"Appearance"},{"location":"block/backup_restore_workflows/","text":"Configuration of the Duplicate Workflow To use the backup and restore functionality, you need to specify a duplication workflow within the Moodle settings. However, there is no out of the box workflow defined in Opencast, which allows, to duplicate a series. Own workflows If you want to create your own workflow, here are the descriptions of the general restore process: In the restore process, we first create a new opencast series for the new course. Afterwards, for each event UID of the backup a 'duplicate' workflow is started, while the new series UID is given as a configuration parameter to the start workflow call. The variable, used to store the series ID, is 'seriesId'. In our workflow definition example from above, the first workflow lms-automated-duplicate will duplicate the event and will start a new workflow for the new event. This second workflow lms-publish-duplicate then assigns the series of the new course to the new event. In order to be able to select your duplicate workflow within Moodle, you need to assign the 'api' tag to it, since the viable duplicate workflows are filtered by that. Important changes Prior to version v4.1-r1 of the plugin, the following workflows must use \"seriesID\" instead of \"seriesId\". It is highly recommended/necessary to update these variables from \"seriesID\" to \"seriesId\" in your workflows if you are planing to use this feature with the latest version of the plugin. Important Opencast database change In addition to the steps above, if the above mentioned issue is applied to your system, then you might encounter the issue of unsuccessful duplication for old videos when using the new workflows with \"seriesId\", for that to be fixed, you have to manually perform the following SQL database queries against your Opencast database: To make sure that \"oc_assets_properties\" table has any record of \"seriesID\": SELECT * FROM oc_assets_properties where property_name='seriesID'; If the above query indicates that \"seriesID\" exists, you have to perform the following SQL query to delete it from the table: DELETE FROM oc_assets_properties WHERE property_name='seriesID'; Workflow examples The workflow that is triggered by Moodle: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-automated-duplicate</id> <title>LMS Upload aus dem LMS duplizieren</title> <tags> <tag>api</tag> </tags> <operations> <!-- Create the new events --> <operation id=\"duplicate-event\" fail-on-error=\"true\" exception-handler-workflow=\"partial-error\" description=\"Duplicate Event\"> <configurations> <configuration key=\"source-flavors\">*/source,*/prepared,*/search+preview,dublincore/*,*/player+preview,*/feed+preview,*/timeline+preview,smil/*,security/xacml+series</configuration> <configuration key=\"number-of-events\">1</configuration> <configuration key=\"target-tags\">+copied</configuration> <configuration key=\"property-namespaces\">org.opencastproject.assetmanager.security, org.opencastproject.workflow.configuration</configuration> <configuration key=\"copy-number-prefix\">Kopie</configuration> </configurations> </operation> <!-- Start new workflow --> <operation id=\"start-workflow\" fail-on-error=\"true\" retry-strategy=\"hold\" max-attempts=\"5\" exception-handler-workflow=\"partial-error\" description=\"Start workflow on duplicate\"> <configurations> <configuration key=\"workflow-definition\">lms-publish-duplicate</configuration> <configuration key=\"media-package\">${duplicate_media_package_1_id}</configuration> <configuration key=\"seriesId\">${seriesId}</configuration> </configurations> </operation> <!-- Cleanup the working file repository --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition> The first workflow triggers this second workflow on the duplicated mediapackage . <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-publish-duplicate</id> <title>Publish a duplicate of an LMS upload</title> <operations> <!-- Apply the default workflow configuration --> <operation id=\"defaults\" description=\"Applying default configuration values\"> <configurations> <configuration key=\"straightToPublishing\">true</configuration> <configuration key=\"flagForCutting\">false</configuration> <configuration key=\"flagForReview\">false</configuration> <configuration key=\"flagQuality360p\">false</configuration> <configuration key=\"flagQuality480p\">false</configuration> <configuration key=\"flagQuality720p\">true</configuration> <configuration key=\"flagQuality1080p\">false</configuration> <configuration key=\"flagQuality2160p\">false</configuration> <configuration key=\"publishToEngage\">true</configuration> <configuration key=\"publishToApi\">true</configuration> <configuration key=\"publishToOaiPmh\">true</configuration> <configuration key=\"publishToYouTube\">false</configuration> <configuration key=\"publishToAws\">false</configuration> <configuration key=\"uploadedSearchPreview\">false</configuration> <configuration key=\"publishLive\">false</configuration> <configuration key=\"thumbnailType\">0</configuration> <configuration key=\"thumbnailPosition\">1</configuration> </configurations> </operation> <!-- Apply series --> <operation id=\"series\" exception-handler-workflow=\"partial-error\" description=\"Apply series metadata and acl\"> <configurations> <configuration key=\"series\">${seriesId}</configuration> <configuration key=\"attach\">*/*</configuration> <configuration key=\"apply-acl\">true</configuration> <configuration key=\"copy-metadata\">isPartOf</configuration> </configurations> </operation> <operation id=\"tag\" description=\"Tagging metadata catalogs for publication\"> <configurations> <configuration key=\"source-flavors\">dublincore/*,security/*</configuration> <configuration key=\"target-tags\">+engage-download,+archive</configuration> </configurations> </operation> <!-- Archive --> <operation id=\"snapshot\" description=\"Archive updated duplicate\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- Encode and publish --> <operation id=\"include\" description=\"Publish the recording\"> <configurations> <configuration key=\"workflow-id\">partial-publish</configuration> </configurations> </operation> <!-- Archive after publish --> <operation id=\"snapshot\" description=\"Archive publish information\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Cleanup --> <!-- --> <!-- Remove work artifacts. --> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Clean the system from work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition>","title":"Backup and restore workflows"},{"location":"block/backup_restore_workflows/#configuration-of-the-duplicate-workflow","text":"To use the backup and restore functionality, you need to specify a duplication workflow within the Moodle settings. However, there is no out of the box workflow defined in Opencast, which allows, to duplicate a series.","title":"Configuration of the Duplicate Workflow"},{"location":"block/backup_restore_workflows/#own-workflows","text":"If you want to create your own workflow, here are the descriptions of the general restore process: In the restore process, we first create a new opencast series for the new course. Afterwards, for each event UID of the backup a 'duplicate' workflow is started, while the new series UID is given as a configuration parameter to the start workflow call. The variable, used to store the series ID, is 'seriesId'. In our workflow definition example from above, the first workflow lms-automated-duplicate will duplicate the event and will start a new workflow for the new event. This second workflow lms-publish-duplicate then assigns the series of the new course to the new event. In order to be able to select your duplicate workflow within Moodle, you need to assign the 'api' tag to it, since the viable duplicate workflows are filtered by that.","title":"Own workflows"},{"location":"block/backup_restore_workflows/#important-changes","text":"Prior to version v4.1-r1 of the plugin, the following workflows must use \"seriesID\" instead of \"seriesId\". It is highly recommended/necessary to update these variables from \"seriesID\" to \"seriesId\" in your workflows if you are planing to use this feature with the latest version of the plugin.","title":"Important changes"},{"location":"block/backup_restore_workflows/#important-opencast-database-change","text":"In addition to the steps above, if the above mentioned issue is applied to your system, then you might encounter the issue of unsuccessful duplication for old videos when using the new workflows with \"seriesId\", for that to be fixed, you have to manually perform the following SQL database queries against your Opencast database: To make sure that \"oc_assets_properties\" table has any record of \"seriesID\": SELECT * FROM oc_assets_properties where property_name='seriesID'; If the above query indicates that \"seriesID\" exists, you have to perform the following SQL query to delete it from the table: DELETE FROM oc_assets_properties WHERE property_name='seriesID';","title":"Important Opencast database change"},{"location":"block/backup_restore_workflows/#workflow-examples","text":"The workflow that is triggered by Moodle: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-automated-duplicate</id> <title>LMS Upload aus dem LMS duplizieren</title> <tags> <tag>api</tag> </tags> <operations> <!-- Create the new events --> <operation id=\"duplicate-event\" fail-on-error=\"true\" exception-handler-workflow=\"partial-error\" description=\"Duplicate Event\"> <configurations> <configuration key=\"source-flavors\">*/source,*/prepared,*/search+preview,dublincore/*,*/player+preview,*/feed+preview,*/timeline+preview,smil/*,security/xacml+series</configuration> <configuration key=\"number-of-events\">1</configuration> <configuration key=\"target-tags\">+copied</configuration> <configuration key=\"property-namespaces\">org.opencastproject.assetmanager.security, org.opencastproject.workflow.configuration</configuration> <configuration key=\"copy-number-prefix\">Kopie</configuration> </configurations> </operation> <!-- Start new workflow --> <operation id=\"start-workflow\" fail-on-error=\"true\" retry-strategy=\"hold\" max-attempts=\"5\" exception-handler-workflow=\"partial-error\" description=\"Start workflow on duplicate\"> <configurations> <configuration key=\"workflow-definition\">lms-publish-duplicate</configuration> <configuration key=\"media-package\">${duplicate_media_package_1_id}</configuration> <configuration key=\"seriesId\">${seriesId}</configuration> </configurations> </operation> <!-- Cleanup the working file repository --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition> The first workflow triggers this second workflow on the duplicated mediapackage . <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-publish-duplicate</id> <title>Publish a duplicate of an LMS upload</title> <operations> <!-- Apply the default workflow configuration --> <operation id=\"defaults\" description=\"Applying default configuration values\"> <configurations> <configuration key=\"straightToPublishing\">true</configuration> <configuration key=\"flagForCutting\">false</configuration> <configuration key=\"flagForReview\">false</configuration> <configuration key=\"flagQuality360p\">false</configuration> <configuration key=\"flagQuality480p\">false</configuration> <configuration key=\"flagQuality720p\">true</configuration> <configuration key=\"flagQuality1080p\">false</configuration> <configuration key=\"flagQuality2160p\">false</configuration> <configuration key=\"publishToEngage\">true</configuration> <configuration key=\"publishToApi\">true</configuration> <configuration key=\"publishToOaiPmh\">true</configuration> <configuration key=\"publishToYouTube\">false</configuration> <configuration key=\"publishToAws\">false</configuration> <configuration key=\"uploadedSearchPreview\">false</configuration> <configuration key=\"publishLive\">false</configuration> <configuration key=\"thumbnailType\">0</configuration> <configuration key=\"thumbnailPosition\">1</configuration> </configurations> </operation> <!-- Apply series --> <operation id=\"series\" exception-handler-workflow=\"partial-error\" description=\"Apply series metadata and acl\"> <configurations> <configuration key=\"series\">${seriesId}</configuration> <configuration key=\"attach\">*/*</configuration> <configuration key=\"apply-acl\">true</configuration> <configuration key=\"copy-metadata\">isPartOf</configuration> </configurations> </operation> <operation id=\"tag\" description=\"Tagging metadata catalogs for publication\"> <configurations> <configuration key=\"source-flavors\">dublincore/*,security/*</configuration> <configuration key=\"target-tags\">+engage-download,+archive</configuration> </configurations> </operation> <!-- Archive --> <operation id=\"snapshot\" description=\"Archive updated duplicate\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- Encode and publish --> <operation id=\"include\" description=\"Publish the recording\"> <configurations> <configuration key=\"workflow-id\">partial-publish</configuration> </configurations> </operation> <!-- Archive after publish --> <operation id=\"snapshot\" description=\"Archive publish information\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Cleanup --> <!-- --> <!-- Remove work artifacts. --> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Clean the system from work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition>","title":"Workflow examples"},{"location":"block/general_settings/","text":"General Settings This section explains the general settings, that affect the core functionality of the block. The core functionality is to upload a video file to Moodle, which is then transferred to Opencast. This is done via a cronjob, which processes all Upload Jobs in a first in first out fashion. Please make sure, that the Maximum Time limit for cron execution in Site administration -> Server -> Performance is not restricted (value of 0 means no time limit). Then the cron job is not terminated early. Settings for upload jobs In this section you can define the following settings: Limit upload job by cron: How many videos are uploaded within one run of the cronjob. If it is set to 0, the number of videos is not limited. Workflow to start after upload: Set the unique shortname of the workflow that should be started after successfully uploading a video file to Opencast. When using the default workflows it is recommended to use the Studio Upload workflow. Publish to Engage: Select whether the videos should be published to the engage player. This results in the configuration field 'publishToEngage' to be set to true or false for the called workflow (only useful if the selected workflow supports this). When using the default workflows this checkbox needs to be ticked. Ingest upload: Use the Opencast ingest service for uploading videos. For this to work, you must have configured ingest nodes in your Opencast instance. Reuse existing uploads: Select if multiple videos with the same content hash are uploaded to opencast only once. This is a legacy feature: Not recommended to be used. With our further development we strive to create one series per course. Allow unassign from course others a 'delete' icon to the teacher, which will unassign the event from the series of the course. This is a legacy feature: Only useful if events should not actually be deleted! Workflow to start before event is be deleted: Setup the unique shortname of the workflow that should be started for deleting a video file in Opencast. If a workflow is selected, a 'delete' icon is offered to the teacher, which will actually delete the event in the Opencast system. When using the default workflows it is recommended to use the Delete workflow. We recommend to use only one of the two previous 'delete' options! With Opencast 10, this option is usually not required anymore since videos are automatically retracted before deletion. Delete videofile from Moodle: This setting causes the Moodle system to delete the file of the uploaded video as soon as possible. If set to false, the video file will remain in the Moodle system in the draft area until a cron job deletes it (usually some days later). Allowed file extensions: With 'Allowed file extensions' you can specify which file extensions users can upload as videos. The extensions must exist as file types in Moodle under Site administration -> Server -> File types. If left blank all of Moodle's file types in the type group 'video' are allowed. Maximum number of series: Specifies how many series can be assigned to a course. Teachers won't be able to add/import more series if the maximum number is reached. Settings for a block instance In this section the number of videos that is displayed can be configured. Number of videos: Maximum number of videos to display in the block. Group and series In this section it can be configured how groups and series created by Moodle are named in Opencast. In both cases the options [COURSEID] and [COURSENAME] are available which are placeholders for the numeric course ID and for the course name. The configuration options are: Create a group: If checked, a group is created during the upload. This is a legacy feature, which assigns each uploaded event to a Opencast group. Group name: Group to which the video is added. Important: The group name length is restricted to 128 Bytes. You can use the placeholders which are automatically replaced. Series name: Series to which the video is added. You can use the placeholders which are automatically replaced. Roles In this section you can define, which ACL roles are added to a video. You can add and delete roles and define the respective actions for those roles. That might be relevant only, if you want to control the access privileges for your Opencast videos via Moodle. In this case, it is recommended, that you set up the moodle-role-provider for your Opencast system (https://docs.opencast.org/develop/admin/configuration/security.user.moodle/). It is possible, to select, whether roles should be permanent or not. Non-permanent roles can be used, to manually change the access of certain user groups (e.g. students) for each video. Roles, which are not permanent, will be removed, if the video is hidden in the block overview, and added again, if the video is made visible. To use this feature, you need to define at least one non-permanent role-action combination and the name of Opencast workflow for republishing metadata. Use the setting Workflow for updating metadata , to specify that workflow. When using the default Opencast workflows that is Republish Metadata . In the video overview of the block, the instructors are able to change the visibility of each video. This process takes some time, since the Opencast workflow needs to finish. However, the icon to do so, is only present, if the two requirements mentioned above are met! In the ACL roles you can use placeholders . To give an example for roles, which also meets the LTI standard and which is used by the plugin by default, you can use the following setting: Role Actions Permanent ROLE_ADMIN write,read Yes ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS write,read Yes [COURSEID]_Instructor write,read Yes [COURSEGROUPID]_Learner read No You can also specify an owner role, that identifies the owner of a video/series, with the setting ACL owner role . The role must also be specified in the roles table. The role must be permanent and include a user-related placeholder, e.g. ROLE_OWNER_[USER_EMAIL] . It should not include any course-related placeholders. Event Metadata In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for uploading videos to Opencast. By default, instructors have to provide the title of a video. Series Metadata In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for creating Opencast series. By default, instructors have to provide the title, the rights holder and the license of a series. Placeholders For some settings, you can use placeholders, that are replaced, when dealing with names for Opencast (e.g. when creating a series). The following placeholders are available: [COURSEID] : Will be replaced by the id of the course. [COURSENAME] : Will be replaced by the name of the course. [COURSEGROUPID] : Should only be used in non-permanent roles. Depending on the visibility of the event, it is either replaced by the id of the course or (in case the visibility is restricted by groups) it is replaced by a 'G' followed by the id of the group. In case that multiple groups are selected in the visibility dialog, one ACL rule for every group is created. The basic role including the course id is removed in the case of group visibility. [USERNAME] :: Will be replaced by the name of the user who uploaded a video or created a series. Roles with this placeholder must be permanent. [USERNAME_LOW] : Username in lowercase. [USERNAME_UP] : Username in uppercase. [USER_EMAIL] : Email of the user. [USER_EXTERNAL_ID] : External ID of the user.","title":"General Settings"},{"location":"block/general_settings/#general-settings","text":"This section explains the general settings, that affect the core functionality of the block. The core functionality is to upload a video file to Moodle, which is then transferred to Opencast. This is done via a cronjob, which processes all Upload Jobs in a first in first out fashion. Please make sure, that the Maximum Time limit for cron execution in Site administration -> Server -> Performance is not restricted (value of 0 means no time limit). Then the cron job is not terminated early.","title":"General Settings"},{"location":"block/general_settings/#settings-for-upload-jobs","text":"In this section you can define the following settings: Limit upload job by cron: How many videos are uploaded within one run of the cronjob. If it is set to 0, the number of videos is not limited. Workflow to start after upload: Set the unique shortname of the workflow that should be started after successfully uploading a video file to Opencast. When using the default workflows it is recommended to use the Studio Upload workflow. Publish to Engage: Select whether the videos should be published to the engage player. This results in the configuration field 'publishToEngage' to be set to true or false for the called workflow (only useful if the selected workflow supports this). When using the default workflows this checkbox needs to be ticked. Ingest upload: Use the Opencast ingest service for uploading videos. For this to work, you must have configured ingest nodes in your Opencast instance. Reuse existing uploads: Select if multiple videos with the same content hash are uploaded to opencast only once. This is a legacy feature: Not recommended to be used. With our further development we strive to create one series per course. Allow unassign from course others a 'delete' icon to the teacher, which will unassign the event from the series of the course. This is a legacy feature: Only useful if events should not actually be deleted! Workflow to start before event is be deleted: Setup the unique shortname of the workflow that should be started for deleting a video file in Opencast. If a workflow is selected, a 'delete' icon is offered to the teacher, which will actually delete the event in the Opencast system. When using the default workflows it is recommended to use the Delete workflow. We recommend to use only one of the two previous 'delete' options! With Opencast 10, this option is usually not required anymore since videos are automatically retracted before deletion. Delete videofile from Moodle: This setting causes the Moodle system to delete the file of the uploaded video as soon as possible. If set to false, the video file will remain in the Moodle system in the draft area until a cron job deletes it (usually some days later). Allowed file extensions: With 'Allowed file extensions' you can specify which file extensions users can upload as videos. The extensions must exist as file types in Moodle under Site administration -> Server -> File types. If left blank all of Moodle's file types in the type group 'video' are allowed. Maximum number of series: Specifies how many series can be assigned to a course. Teachers won't be able to add/import more series if the maximum number is reached.","title":"Settings for upload jobs"},{"location":"block/general_settings/#settings-for-a-block-instance","text":"In this section the number of videos that is displayed can be configured. Number of videos: Maximum number of videos to display in the block.","title":"Settings for a block instance"},{"location":"block/general_settings/#group-and-series","text":"In this section it can be configured how groups and series created by Moodle are named in Opencast. In both cases the options [COURSEID] and [COURSENAME] are available which are placeholders for the numeric course ID and for the course name. The configuration options are: Create a group: If checked, a group is created during the upload. This is a legacy feature, which assigns each uploaded event to a Opencast group. Group name: Group to which the video is added. Important: The group name length is restricted to 128 Bytes. You can use the placeholders which are automatically replaced. Series name: Series to which the video is added. You can use the placeholders which are automatically replaced.","title":"Group and series"},{"location":"block/general_settings/#roles","text":"In this section you can define, which ACL roles are added to a video. You can add and delete roles and define the respective actions for those roles. That might be relevant only, if you want to control the access privileges for your Opencast videos via Moodle. In this case, it is recommended, that you set up the moodle-role-provider for your Opencast system (https://docs.opencast.org/develop/admin/configuration/security.user.moodle/). It is possible, to select, whether roles should be permanent or not. Non-permanent roles can be used, to manually change the access of certain user groups (e.g. students) for each video. Roles, which are not permanent, will be removed, if the video is hidden in the block overview, and added again, if the video is made visible. To use this feature, you need to define at least one non-permanent role-action combination and the name of Opencast workflow for republishing metadata. Use the setting Workflow for updating metadata , to specify that workflow. When using the default Opencast workflows that is Republish Metadata . In the video overview of the block, the instructors are able to change the visibility of each video. This process takes some time, since the Opencast workflow needs to finish. However, the icon to do so, is only present, if the two requirements mentioned above are met! In the ACL roles you can use placeholders . To give an example for roles, which also meets the LTI standard and which is used by the plugin by default, you can use the following setting: Role Actions Permanent ROLE_ADMIN write,read Yes ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS write,read Yes [COURSEID]_Instructor write,read Yes [COURSEGROUPID]_Learner read No You can also specify an owner role, that identifies the owner of a video/series, with the setting ACL owner role . The role must also be specified in the roles table. The role must be permanent and include a user-related placeholder, e.g. ROLE_OWNER_[USER_EMAIL] . It should not include any course-related placeholders.","title":"Roles"},{"location":"block/general_settings/#event-metadata","text":"In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for uploading videos to Opencast. By default, instructors have to provide the title of a video.","title":"Event Metadata"},{"location":"block/general_settings/#series-metadata","text":"In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for creating Opencast series. By default, instructors have to provide the title, the rights holder and the license of a series.","title":"Series Metadata"},{"location":"block/general_settings/#placeholders","text":"For some settings, you can use placeholders, that are replaced, when dealing with names for Opencast (e.g. when creating a series). The following placeholders are available: [COURSEID] : Will be replaced by the id of the course. [COURSENAME] : Will be replaced by the name of the course. [COURSEGROUPID] : Should only be used in non-permanent roles. Depending on the visibility of the event, it is either replaced by the id of the course or (in case the visibility is restricted by groups) it is replaced by a 'G' followed by the id of the group. In case that multiple groups are selected in the visibility dialog, one ACL rule for every group is created. The basic role including the course id is removed in the case of group visibility. [USERNAME] :: Will be replaced by the name of the user who uploaded a video or created a series. Roles with this placeholder must be permanent. [USERNAME_LOW] : Username in lowercase. [USERNAME_UP] : Username in uppercase. [USER_EMAIL] : Email of the user. [USER_EXTERNAL_ID] : External ID of the user.","title":"Placeholders"},{"location":"block/global_overview/","text":"Global overview The Opencast block allows teachers, to manage their series and videos in a single place. If the block is added to the Dashboard page of a user, the user can see a list of all series he has read access to. For each series, it is shown in which course it is used and which mod_opencast activities are associated with it. The user can also inspect, which videos are contained in a series and manage them. Furthermore, new videos can be added to a series. Owner concept If enabled, series and videos can be owned by user by setting user-specific ACLs. Owning a series/video allows the user, to always manage it in the global overview. The series/videos are even shown, if they are not used in any Moodle course. The ownership can be transferred to another user.","title":"Global overview"},{"location":"block/global_overview/#global-overview","text":"The Opencast block allows teachers, to manage their series and videos in a single place. If the block is added to the Dashboard page of a user, the user can see a list of all series he has read access to. For each series, it is shown in which course it is used and which mod_opencast activities are associated with it. The user can also inspect, which videos are contained in a series and manage them. Furthermore, new videos can be added to a series.","title":"Global overview"},{"location":"block/global_overview/#owner-concept","text":"If enabled, series and videos can be owned by user by setting user-specific ACLs. Owning a series/video allows the user, to always manage it in the global overview. The series/videos are even shown, if they are not used in any Moodle course. The ownership can be transferred to another user.","title":"Owner concept"},{"location":"block/import_videos_features/","text":"Import Videos Features In this section, the backup and restore workflow can be configured as well as the options for the import of videos into a course. Allow video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course. Defaults to yes. There are two modes for importing videos (see the setting Import mode ): * Duplicating Events: A new series is created during the import and all events are duplicated. By default, Opencast does not support this feature. Thus two additional workflows need to be configured. One workflow to duplicate an event in Opencast and another workflow to publish this duplicate. With the default Opencast workflows the example workflows can be used. * ACL Change: The existing series will be connected with the target course, so that all events are shared between the courses. This avoids duplicated series, but changes are always reflected in both courses. Workflow for duplicating events: This workflow is needed, for importing Opencast events from one course into another, when Duplicating Events for the setting Import mode is selected. If not set, it is not possible, to import Opencast events. If a valid duplication workflow is selected, the following configurations are available: * Allow video import within Moodle core course import wizard: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using the Moodle core course import wizard. Within the wizard, there is an additional option shown to import the videos which have been uploaded within the Opencast block in the other course. Using this feature, the teacher can import all videos from another course as bulk, but he cannot select individual videos. If Duplicating Events is selected as the Import mode , then the videos are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. In case of ACL Change selected as Import mode , the seriesid of the course being imported is used, but the ACL of the series and its videos will be changed, in order to grant access within the new course. Defaults to yes. * Default value for opencast import videos' checkbox: Defines the default value for the checkbox, to include Opencast videos in Moodle core import wizard, which at the end will be used, to include or not to include videos. This option is meant to help teachers, who prefer to use \"Jump to final step\" button and skip the Moodle core import wizard steps. Defaults to Unchecked . * Allow manual video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using a dedicated Opencast video import wizard. This feature is offered on the Opencast block overview page. In Duplicating Events import mode, the teacher can import all or a subset of videos from another course as bulk. In ACL Change import mode, the seriesid of the target course will be used in the new course. Additionally, the ACLs of the series itself and all of its videos will be changed, in order to grant access to them within the new course. Unlike in Duplicating Events mode, there is no manual selection of videos available within the provided wizard. Please note, that there are corresponding capabilities block/opencast:manualimporttarget and block/opencast:manualimportsource for this feature, which control, who can import which courses to which courses. By default, managers and editing teachers have this capability and can use the feature as soon as it is enabled here. The videos, which are selected within the import wizard, are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. Defaults to no. * Handle Opencast series modules during manual video import: If enabled, teachers can handle Opencast series modules, which were created with the \"Add LTI series module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to the course series of the old course. The series module is instantly handled after the import wizard is finished. Defaults to no. * Handle Opencast episode modules during manual video import: If enabled, teachers can handle Opencast episode modules, which were created with the \"Add LTI episode module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to videos in the old course. The episode modules are handled by an ad-hoc task in Moodle and will be fixed in the course with a short delay. Please note, that this mechanism relies on the fact, that the Opencast Duplication workflow sets a workflow instance configuration field 'duplicate_media_package_1_id' which contains the episode ID of the duplicated episode. If the workflow does not set this configuration field, this feature will always fail. Defaults to no.","title":"Import Videos Features"},{"location":"block/import_videos_features/#import-videos-features","text":"In this section, the backup and restore workflow can be configured as well as the options for the import of videos into a course. Allow video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course. Defaults to yes. There are two modes for importing videos (see the setting Import mode ): * Duplicating Events: A new series is created during the import and all events are duplicated. By default, Opencast does not support this feature. Thus two additional workflows need to be configured. One workflow to duplicate an event in Opencast and another workflow to publish this duplicate. With the default Opencast workflows the example workflows can be used. * ACL Change: The existing series will be connected with the target course, so that all events are shared between the courses. This avoids duplicated series, but changes are always reflected in both courses. Workflow for duplicating events: This workflow is needed, for importing Opencast events from one course into another, when Duplicating Events for the setting Import mode is selected. If not set, it is not possible, to import Opencast events. If a valid duplication workflow is selected, the following configurations are available: * Allow video import within Moodle core course import wizard: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using the Moodle core course import wizard. Within the wizard, there is an additional option shown to import the videos which have been uploaded within the Opencast block in the other course. Using this feature, the teacher can import all videos from another course as bulk, but he cannot select individual videos. If Duplicating Events is selected as the Import mode , then the videos are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. In case of ACL Change selected as Import mode , the seriesid of the course being imported is used, but the ACL of the series and its videos will be changed, in order to grant access within the new course. Defaults to yes. * Default value for opencast import videos' checkbox: Defines the default value for the checkbox, to include Opencast videos in Moodle core import wizard, which at the end will be used, to include or not to include videos. This option is meant to help teachers, who prefer to use \"Jump to final step\" button and skip the Moodle core import wizard steps. Defaults to Unchecked . * Allow manual video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using a dedicated Opencast video import wizard. This feature is offered on the Opencast block overview page. In Duplicating Events import mode, the teacher can import all or a subset of videos from another course as bulk. In ACL Change import mode, the seriesid of the target course will be used in the new course. Additionally, the ACLs of the series itself and all of its videos will be changed, in order to grant access to them within the new course. Unlike in Duplicating Events mode, there is no manual selection of videos available within the provided wizard. Please note, that there are corresponding capabilities block/opencast:manualimporttarget and block/opencast:manualimportsource for this feature, which control, who can import which courses to which courses. By default, managers and editing teachers have this capability and can use the feature as soon as it is enabled here. The videos, which are selected within the import wizard, are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. Defaults to no. * Handle Opencast series modules during manual video import: If enabled, teachers can handle Opencast series modules, which were created with the \"Add LTI series module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to the course series of the old course. The series module is instantly handled after the import wizard is finished. Defaults to no. * Handle Opencast episode modules during manual video import: If enabled, teachers can handle Opencast episode modules, which were created with the \"Add LTI episode module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to videos in the old course. The episode modules are handled by an ad-hoc task in Moodle and will be fixed in the course with a short delay. Please note, that this mechanism relies on the fact, that the Opencast Duplication workflow sets a workflow instance configuration field 'duplicate_media_package_1_id' which contains the episode ID of the duplicated episode. If the workflow does not set this configuration field, this feature will always fail. Defaults to no.","title":"Import Videos Features"},{"location":"block/lti_module_features/","text":"LTI Module Features In this section, you can enable a feature, to let teachers add an Opencast LTI module to the course. This requires, that LTI is configured in Opencast. Add Opencast LTI series modules to courses These settings are specific to the LTI module for Opencast series. This LTI series module will be pointing to the course's Opencast series. To be able to use this feature, you have to create a preconfigured LTI tool, for showing Opencast series first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Series Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=ltitools/series/index.html In the plugin the settings options are: Enable \u201dAdd LTI series module\": If enabled, teachers can add an Opencast LTI series module to a course. This LTI series module will be pointing to the course's Opencast series. Defaults to no. Default LTI series module title: The default title to be used, when a new Opencast LTI series module is added to a course. Default to Opencast videos . Preconfigured LTI tool for series modules: The preconfigured LTI tool to be used, when a new Opencast LTI series module is added to a course. Add series module intro: If enabled, teachers can add an intro to the Opencast LTI series module. This intro will be shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast LTI series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Please note: This feature is only available, if availability is globally enabled on the Advanced features admin setting page. Defaults to no. Add Opencast LTI episode modules to courses These settings are specific to the LTI module for Opencast episodes. These LTI episode modules will be pointing to an Opencast episode. To be able, to use this feature, you have to create a preconfigured LTI tool, for showing Opencast episodes first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Episodes Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=paella/ui/watch.html or tool=theodul/ui/core.html In the plugin the settings options are: Enable \u201dAdd LTI episode module\": If enabled, teachers can add an Opencast LTI episode module to a course. This LTI episode module will be pointing to an Opencast episode. Defaults to no. Preconfigured LTI tool for episode modules: The preconfigured LTI tool to be used when a new Opencast LTI episode module is added to a course. Add episode module intro: If enabled, teachers can add an intro to the Opencast LTI episode module. This intro will be shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, which the Opencast LTI episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI episode module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page. Defaults to no.","title":"LTI Module Features"},{"location":"block/lti_module_features/#lti-module-features","text":"In this section, you can enable a feature, to let teachers add an Opencast LTI module to the course. This requires, that LTI is configured in Opencast.","title":"LTI Module Features"},{"location":"block/lti_module_features/#add-opencast-lti-series-modules-to-courses","text":"These settings are specific to the LTI module for Opencast series. This LTI series module will be pointing to the course's Opencast series. To be able to use this feature, you have to create a preconfigured LTI tool, for showing Opencast series first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Series Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=ltitools/series/index.html In the plugin the settings options are: Enable \u201dAdd LTI series module\": If enabled, teachers can add an Opencast LTI series module to a course. This LTI series module will be pointing to the course's Opencast series. Defaults to no. Default LTI series module title: The default title to be used, when a new Opencast LTI series module is added to a course. Default to Opencast videos . Preconfigured LTI tool for series modules: The preconfigured LTI tool to be used, when a new Opencast LTI series module is added to a course. Add series module intro: If enabled, teachers can add an intro to the Opencast LTI series module. This intro will be shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast LTI series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Please note: This feature is only available, if availability is globally enabled on the Advanced features admin setting page. Defaults to no.","title":"Add Opencast LTI series modules to courses"},{"location":"block/lti_module_features/#add-opencast-lti-episode-modules-to-courses","text":"These settings are specific to the LTI module for Opencast episodes. These LTI episode modules will be pointing to an Opencast episode. To be able, to use this feature, you have to create a preconfigured LTI tool, for showing Opencast episodes first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Episodes Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=paella/ui/watch.html or tool=theodul/ui/core.html In the plugin the settings options are: Enable \u201dAdd LTI episode module\": If enabled, teachers can add an Opencast LTI episode module to a course. This LTI episode module will be pointing to an Opencast episode. Defaults to no. Preconfigured LTI tool for episode modules: The preconfigured LTI tool to be used when a new Opencast LTI episode module is added to a course. Add episode module intro: If enabled, teachers can add an intro to the Opencast LTI episode module. This intro will be shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, which the Opencast LTI episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI episode module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page. Defaults to no.","title":"Add Opencast LTI episode modules to courses"},{"location":"block/shared_settings/","text":"Shared Settings This section explains the shared settings. Cache valid time: Time in seconds, before the cache for the video data of each course is refreshed. The Opencast block plugin uses that cache, to provide the video data, that is shown by the embedded block overview in a course, faster. Note, that that cache is invalidated for a course, if the fullscreen overview page of the block is loaded for that course. Moodle to Opencast upload timeout: Configures the time in seconds, a single video upload may take during the background uploading task.","title":"Shared Settings"},{"location":"block/shared_settings/#shared-settings","text":"This section explains the shared settings. Cache valid time: Time in seconds, before the cache for the video data of each course is refreshed. The Opencast block plugin uses that cache, to provide the video data, that is shown by the embedded block overview in a course, faster. Note, that that cache is invalidated for a course, if the fullscreen overview page of the block is loaded for that course. Moodle to Opencast upload timeout: Configures the time in seconds, a single video upload may take during the background uploading task.","title":"Shared Settings"},{"location":"chunkupload/about/","text":"Opencast chunkupload plugin The chunkupload plugin provides the possibility of using a chunked upload. By using a chunked upload, users are able, to upload files, that are bigger then the size limit of the Moodle course. Installation The chunkupload plugin is available from GitHub as well as from the Moodle plugins directory . Requirements Min. Moodle Version: 3.7 Installed Opencast block. Configuration For the configuration see the additional features of the block.","title":"About"},{"location":"chunkupload/about/#opencast-chunkupload-plugin","text":"The chunkupload plugin provides the possibility of using a chunked upload. By using a chunked upload, users are able, to upload files, that are bigger then the size limit of the Moodle course.","title":"Opencast chunkupload plugin"},{"location":"chunkupload/about/#installation","text":"The chunkupload plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"chunkupload/about/#requirements","text":"Min. Moodle Version: 3.7 Installed Opencast block.","title":"Requirements"},{"location":"chunkupload/about/#configuration","text":"For the configuration see the additional features of the block.","title":"Configuration"},{"location":"filter/about/","text":"Opencast filter plugin The Opencast filter can be used, to embed Opencast videos. The filter takes the HTML pasted by the Opencast repository and replaces it by an iframe , which loads the Paella Player with the respective Opencast event. The filter itself has no influence on the embedded content, but simply takes the information created by the repository. Look into the documentation of Repository_opencast for details on that. Installation The Opencast filter plugin is available from GitHub as well as from the Moodle plugins directory . Requirements tool_opencast mod_opencast repository_opencast : The filter can be installed without the repository, but it is necessary, to allow teachers, to insert Opencast videos. Configuration The configuration of the Opencast filter is documented in the settings page.","title":"About"},{"location":"filter/about/#opencast-filter-plugin","text":"The Opencast filter can be used, to embed Opencast videos. The filter takes the HTML pasted by the Opencast repository and replaces it by an iframe , which loads the Paella Player with the respective Opencast event. The filter itself has no influence on the embedded content, but simply takes the information created by the repository. Look into the documentation of Repository_opencast for details on that.","title":"Opencast filter plugin"},{"location":"filter/about/#installation","text":"The Opencast filter plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"filter/about/#requirements","text":"tool_opencast mod_opencast repository_opencast : The filter can be installed without the repository, but it is necessary, to allow teachers, to insert Opencast videos.","title":"Requirements"},{"location":"filter/about/#configuration","text":"The configuration of the Opencast filter is documented in the settings page.","title":"Configuration"},{"location":"filter/settings/","text":"Settings There are only two settings for the Opencast filter. URL templates for filtering: URLs matching this template are replaced with the Opencast player. To define the correct URL, you should check which URL is inserted into a text by the repository. In general, you must define only one URL. In the URL, you must use the placeholder \\[EPISODEID] , to indicate, where the episode ID is contained in the URL, e.g. http://stable.opencast.de/play/[EPISODEID] . URL to Paella config.json: Defines an absolute or relative URL to the config.json , that is used by the Paella Player. This config can be adapted, if you want to modify the look or behavior of the Paella player. Once you configured the filter, you need to activate the filter.","title":"Settings"},{"location":"filter/settings/#settings","text":"There are only two settings for the Opencast filter. URL templates for filtering: URLs matching this template are replaced with the Opencast player. To define the correct URL, you should check which URL is inserted into a text by the repository. In general, you must define only one URL. In the URL, you must use the placeholder \\[EPISODEID] , to indicate, where the episode ID is contained in the URL, e.g. http://stable.opencast.de/play/[EPISODEID] . URL to Paella config.json: Defines an absolute or relative URL to the config.json , that is used by the Paella Player. This config can be adapted, if you want to modify the look or behavior of the Paella player. Once you configured the filter, you need to activate the filter.","title":"Settings"},{"location":"mod/about/","text":"Opencast activity plugin This activity can be used, to display and view Opencast episodes and series in Moodle. Users with respective privileges (in the following called teacher) can select an existing Opencast episode/series and add it to their course. An embedded player allows students, to watch the videos directly in Moodle. As with every activity, the teachers can restrict the access to the videos for students based on e.g. dates, grades or user profiles. The Paella player is used, to play the videos. The Opencast Videos block also offers the functionality, to add this activity, so that it can be created faster. Installation The Opencast activity plugin is available from GitHub as well as from the Moodle plugins directory . Requirements tool_opencast Recommended: block_opencast Usage scenarios In the following, the two usage scenarios, providing a series or an episode, are described. Use case 1 - Provide a series The teacher wants to provide a series for students. For example, this series contains all lecture recordings. 1. Add a new \"Video (Opencast)\" activity. 2. Choose the series or enter the Opencast id of the series manually, you want to display: 3. If you want, you can specify further configurations like access restrictions. 4. The videos in the series can be either displayed in a list view or in a preview view: Use case 2 - Provide an episode The teacher wants to provide a single episode for students. For example, this episode belongs to a specific lecture. 1. Add a new \"Video (Opencast)\" activity. 2. Choose the series or enter the Opencast id of the episode manually, you want to display, as in the previous use case. The activity automatically recognizes, that the entered id is an episode. 3. If you want, you can specify further configurations like access restrictions. 4. The activity directly displays a player, that shows the video: Configuration For the configuration of the Opencast activity plugin, see settings .","title":"About"},{"location":"mod/about/#opencast-activity-plugin","text":"This activity can be used, to display and view Opencast episodes and series in Moodle. Users with respective privileges (in the following called teacher) can select an existing Opencast episode/series and add it to their course. An embedded player allows students, to watch the videos directly in Moodle. As with every activity, the teachers can restrict the access to the videos for students based on e.g. dates, grades or user profiles. The Paella player is used, to play the videos. The Opencast Videos block also offers the functionality, to add this activity, so that it can be created faster.","title":"Opencast activity plugin"},{"location":"mod/about/#installation","text":"The Opencast activity plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"mod/about/#requirements","text":"tool_opencast Recommended: block_opencast","title":"Requirements"},{"location":"mod/about/#usage-scenarios","text":"In the following, the two usage scenarios, providing a series or an episode, are described.","title":"Usage scenarios"},{"location":"mod/about/#use-case-1-provide-a-series","text":"The teacher wants to provide a series for students. For example, this series contains all lecture recordings. 1. Add a new \"Video (Opencast)\" activity. 2. Choose the series or enter the Opencast id of the series manually, you want to display: 3. If you want, you can specify further configurations like access restrictions. 4. The videos in the series can be either displayed in a list view or in a preview view:","title":"Use case 1 - Provide a series"},{"location":"mod/about/#use-case-2-provide-an-episode","text":"The teacher wants to provide a single episode for students. For example, this episode belongs to a specific lecture. 1. Add a new \"Video (Opencast)\" activity. 2. Choose the series or enter the Opencast id of the episode manually, you want to display, as in the previous use case. The activity automatically recognizes, that the entered id is an episode. 3. If you want, you can specify further configurations like access restrictions. 4. The activity directly displays a player, that shows the video:","title":"Use case 2 - Provide an episode"},{"location":"mod/about/#configuration","text":"For the configuration of the Opencast activity plugin, see settings .","title":"Configuration"},{"location":"mod/settings/","text":"Settings General settings The activity has three mandatory settings, that can be modified by the administrator. The first configuration Opencast Channel specifies the Opencast channel, to which the videos are published. Only videos published in this channel can be displayed with this activity. The publication must include media files, e.g. .mp4 files, that can be served to the paella player. The second configuration URL to Paella config.json specifies the path to the Paella player config. This config can be adapted, if you want to modify the look or behavior of the Paella player. The third configuration URL to Paella theme.json specifies the path to the Paella player theme. This config can be adapted, if you want to modify the look of the Paella player. Download settings In the activity a dropdown menu can be provided, allowing students, to download videos. To activate this functionality, the setting Opencast Download Channel must be configured. It must contain a valid publication channel, that contains media files such as .mp4 files. The download functionality is implemented on activity level. By default, it is deactivated and teachers have to activate it explicitly. However, administrators can activate the setting Allow download by default , to create an \"Opt-out\" scenario. In this case, the download is generally enabled and teachers have to disable it explicitly. The last setting Force student download prevents teachers from configuring the download functionality. Students can always download videos.","title":"Settings"},{"location":"mod/settings/#settings","text":"","title":"Settings"},{"location":"mod/settings/#general-settings","text":"The activity has three mandatory settings, that can be modified by the administrator. The first configuration Opencast Channel specifies the Opencast channel, to which the videos are published. Only videos published in this channel can be displayed with this activity. The publication must include media files, e.g. .mp4 files, that can be served to the paella player. The second configuration URL to Paella config.json specifies the path to the Paella player config. This config can be adapted, if you want to modify the look or behavior of the Paella player. The third configuration URL to Paella theme.json specifies the path to the Paella player theme. This config can be adapted, if you want to modify the look of the Paella player.","title":"General settings"},{"location":"mod/settings/#download-settings","text":"In the activity a dropdown menu can be provided, allowing students, to download videos. To activate this functionality, the setting Opencast Download Channel must be configured. It must contain a valid publication channel, that contains media files such as .mp4 files. The download functionality is implemented on activity level. By default, it is deactivated and teachers have to activate it explicitly. However, administrators can activate the setting Allow download by default , to create an \"Opt-out\" scenario. In this case, the download is generally enabled and teachers have to disable it explicitly. The last setting Force student download prevents teachers from configuring the download functionality. Students can always download videos.","title":"Download settings"},{"location":"repository/about/","text":"Opencast repository plugin The plugin allows teachers, to embed Opencast videos into a course. The repository displays all videos, that belong to the Opencast series, that are connected to the course. The repository is only available within a text editor and will paste the URL to the resource into the content. This URL will later be replaced via a Moodle filter , to show an embedded player. The repository works best in combination with the Opencast filter plugin. The filter will replace the link with an iFrame , which displays the Paella player. Installation The Opencast repository plugin is available from GitHub as well as from the Moodle plugins directory . Requirements tool_opencast Recommended: block_opencast Optional: filter_opencast Configuration The configuration of the Opencast repository plugin is documented in the settings page.","title":"About"},{"location":"repository/about/#opencast-repository-plugin","text":"The plugin allows teachers, to embed Opencast videos into a course. The repository displays all videos, that belong to the Opencast series, that are connected to the course. The repository is only available within a text editor and will paste the URL to the resource into the content. This URL will later be replaced via a Moodle filter , to show an embedded player. The repository works best in combination with the Opencast filter plugin. The filter will replace the link with an iFrame , which displays the Paella player.","title":"Opencast repository plugin"},{"location":"repository/about/#installation","text":"The Opencast repository plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"repository/about/#requirements","text":"tool_opencast Recommended: block_opencast Optional: filter_opencast","title":"Requirements"},{"location":"repository/about/#configuration","text":"The configuration of the Opencast repository plugin is documented in the settings page.","title":"Configuration"},{"location":"repository/settings/","text":"Settings In the settings of the repository plugin the repository instances can be configured. The possible options per repository instance are: Name: Name of the repository instance. Opencast instance: The Opencast instance, from which the repository retrieves videos. Opencast default author: The default author, that is displayed for a video, if the creator is not given. Empty by default. Opencast channelid: : The channel id of the publication in Opencast. With a default Opencast installation you can use engage-player . Preferred flavor to get thumbnail: : The flavor for the thumbnail. Leave empty for the Opencast default. Fallback flavor to get thumbnail: Fallback flavor for the thumbnail, if there is no thumbnail for the preferred flavor. Embedd URL to player instead of media file: Whether the URL to the Opencast player should be embedded. If this box is not checked, a direct link to a video file will be embedded. Flavor to get video: The flavor of the video. Leave empty, to use the Opencast default. Publication channels Opencast publishes its events in so-called publication channels. One default publication channel is, e.g., the engage-player channel. Each publication has a publication URL, which points to the page under which the video is published (e.g. an HTTP page with the Opencast player). Additionally, publications can contain a set of media data with URLs to the media files themselves (e.g. an MP4 file). For the configuration of the publication channel, you can either use the default publication channel engage-player or use your own publication channel. To use your own publication channel, you will have to modify the publish workflow and add a publish-configure operation. For example: <operation id=\"publish-configure\" exception-handler-workflow=\"partial-error\" description=\"Publish to external api publication channel\"> <configurations> <configuration key=\"channel-id\">api</configuration> <configuration key=\"mimetype\">application/json</configuration> <configuration key=\"source-tags\">engage-download,engage-streaming</configuration> <configuration key=\"url-pattern\">https://HOSTNAME/paella/ui/watch.html?id=${event_id}</configuration> <configuration key=\"with-published-elements\">false</configuration> <configuration key=\"check-availability\">true</configuration> </configurations> </operation>","title":"Settings"},{"location":"repository/settings/#settings","text":"In the settings of the repository plugin the repository instances can be configured. The possible options per repository instance are: Name: Name of the repository instance. Opencast instance: The Opencast instance, from which the repository retrieves videos. Opencast default author: The default author, that is displayed for a video, if the creator is not given. Empty by default. Opencast channelid: : The channel id of the publication in Opencast. With a default Opencast installation you can use engage-player . Preferred flavor to get thumbnail: : The flavor for the thumbnail. Leave empty for the Opencast default. Fallback flavor to get thumbnail: Fallback flavor for the thumbnail, if there is no thumbnail for the preferred flavor. Embedd URL to player instead of media file: Whether the URL to the Opencast player should be embedded. If this box is not checked, a direct link to a video file will be embedded. Flavor to get video: The flavor of the video. Leave empty, to use the Opencast default.","title":"Settings"},{"location":"repository/settings/#publication-channels","text":"Opencast publishes its events in so-called publication channels. One default publication channel is, e.g., the engage-player channel. Each publication has a publication URL, which points to the page under which the video is published (e.g. an HTTP page with the Opencast player). Additionally, publications can contain a set of media data with URLs to the media files themselves (e.g. an MP4 file). For the configuration of the publication channel, you can either use the default publication channel engage-player or use your own publication channel. To use your own publication channel, you will have to modify the publish workflow and add a publish-configure operation. For example: <operation id=\"publish-configure\" exception-handler-workflow=\"partial-error\" description=\"Publish to external api publication channel\"> <configurations> <configuration key=\"channel-id\">api</configuration> <configuration key=\"mimetype\">application/json</configuration> <configuration key=\"source-tags\">engage-download,engage-streaming</configuration> <configuration key=\"url-pattern\">https://HOSTNAME/paella/ui/watch.html?id=${event_id}</configuration> <configuration key=\"with-published-elements\">false</configuration> <configuration key=\"check-availability\">true</configuration> </configurations> </operation>","title":"Publication channels"},{"location":"tool/about/","text":"Opencast API plugin The Opencast API plugin provides API functions as general settings for the other plugins. The tool stores the relation between courses and series UIDs and offers webservice endpoints for the opencast role provider . Installation The Opencast API plugin is available from GitHub as well as from the Moodle plugins directory . Configuration For the configuration see the settings page.","title":"About"},{"location":"tool/about/#opencast-api-plugin","text":"The Opencast API plugin provides API functions as general settings for the other plugins. The tool stores the relation between courses and series UIDs and offers webservice endpoints for the opencast role provider .","title":"Opencast API plugin"},{"location":"tool/about/#installation","text":"The Opencast API plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"tool/about/#configuration","text":"For the configuration see the settings page.","title":"Configuration"},{"location":"tool/settings/","text":"Settings The plugins allow you, to connect your Moodle instance to multiple Opencast instances. For each instance, you must configure the settings, described below. The configured instances are listed in the table under Opencast Instances . You can add new instances by clicking on the Add instance button. Next to an automatically set and constant ID, each instance has a name, which you can choose. The admin settings page of the plugin has an own configuration section for each instance, that is classified with the name of the corresponding instance. Note, that that section for a newly added instance will be visible only after saving changes. The same applies to the deletion of an instance. Furthermore, each instance has additional options, that can be configured with the table: * Is visible to teachers: If checked, the videos of the corresponding instance are visible in the overview of the block Opencast Videos in a course. Otherwise, the videos of the corresponding instance are hidden. * Default: There must be exactly one default instance. Such an instance has the following additional properties: * It is automatically selected in the configuration form of the Opencast activity plugin ; * It is automatically selected in the upload form for a video of the Opencast activity plugin ; * It specifies the allowed video file extensions for an upload of a video file via drag and drop in the activity sections of a course (with edit mode turned on); Before being able to configure the Opencast API tool, a user has to be created in Opencast. That user will be used, to connect to Opencast from within Moodle. It needs to have the following roles in Opencast: ROLE_API ROLE_API_* ROLE_SUDO Once such a user is created, you must add it to the group Opencast Project External Applications (role ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS ) , which is created by Opencast by default, or you must add the required external API roles to that user in a different way. Note, that the roles above are the minimal required roles and additional roles may be added, if required. The tool plugin has the following configuration options: Opencast API URL: This is the base URL of the Opencast system. If you have a multiple server setup, this should be the URL of the admin server. Provide the URL including http:// or https:// . For example: https://stable.opencast.org Username for API calls: Provide the username of the previously created Opencast user. Password for API user: Provide the password of the previously created Opencast user. Overall API request execution timeout: : Configure the time in milliseconds, each API request to Opencast might take until timeout. Connection timeout: Setup the time in milliseconds, while Moodle is trying to connect to Opencast until timeout. You can test, whether your API user configuration is correct, by clicking on the Connection Test Tool button. It shows, whether the tool is able, to reach the Opencast server, and whether it is able to successfully authenticate with the configured API user. If you want to use LTI, to authenticate users, e.g., for Opencast Studio, you must set the following settings: * Consumer key: LTI Consumer key as configured in Opencast * Consumer secret: LTI Consumer secret as configured in Opencast LTI must be configured in Opencast, see LTI . If you want LTI users to be allowed, to access Opencast studio, you must grant them the additional role ROLE_STUDIO in the Opencast LTI configuration.","title":"Settings"},{"location":"tool/settings/#settings","text":"The plugins allow you, to connect your Moodle instance to multiple Opencast instances. For each instance, you must configure the settings, described below. The configured instances are listed in the table under Opencast Instances . You can add new instances by clicking on the Add instance button. Next to an automatically set and constant ID, each instance has a name, which you can choose. The admin settings page of the plugin has an own configuration section for each instance, that is classified with the name of the corresponding instance. Note, that that section for a newly added instance will be visible only after saving changes. The same applies to the deletion of an instance. Furthermore, each instance has additional options, that can be configured with the table: * Is visible to teachers: If checked, the videos of the corresponding instance are visible in the overview of the block Opencast Videos in a course. Otherwise, the videos of the corresponding instance are hidden. * Default: There must be exactly one default instance. Such an instance has the following additional properties: * It is automatically selected in the configuration form of the Opencast activity plugin ; * It is automatically selected in the upload form for a video of the Opencast activity plugin ; * It specifies the allowed video file extensions for an upload of a video file via drag and drop in the activity sections of a course (with edit mode turned on); Before being able to configure the Opencast API tool, a user has to be created in Opencast. That user will be used, to connect to Opencast from within Moodle. It needs to have the following roles in Opencast: ROLE_API ROLE_API_* ROLE_SUDO Once such a user is created, you must add it to the group Opencast Project External Applications (role ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS ) , which is created by Opencast by default, or you must add the required external API roles to that user in a different way. Note, that the roles above are the minimal required roles and additional roles may be added, if required. The tool plugin has the following configuration options: Opencast API URL: This is the base URL of the Opencast system. If you have a multiple server setup, this should be the URL of the admin server. Provide the URL including http:// or https:// . For example: https://stable.opencast.org Username for API calls: Provide the username of the previously created Opencast user. Password for API user: Provide the password of the previously created Opencast user. Overall API request execution timeout: : Configure the time in milliseconds, each API request to Opencast might take until timeout. Connection timeout: Setup the time in milliseconds, while Moodle is trying to connect to Opencast until timeout. You can test, whether your API user configuration is correct, by clicking on the Connection Test Tool button. It shows, whether the tool is able, to reach the Opencast server, and whether it is able to successfully authenticate with the configured API user. If you want to use LTI, to authenticate users, e.g., for Opencast Studio, you must set the following settings: * Consumer key: LTI Consumer key as configured in Opencast * Consumer secret: LTI Consumer secret as configured in Opencast LTI must be configured in Opencast, see LTI . If you want LTI users to be allowed, to access Opencast studio, you must grant them the additional role ROLE_STUDIO in the Opencast LTI configuration.","title":"Settings"}]}