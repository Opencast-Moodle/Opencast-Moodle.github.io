{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Opencast Moodle Plugins Guide Welcome to the documentation of the Opencast Moodle plugins. Plugins Currently there are five Opencast Moodle plugins. These are: Tool : This is the base plugin that is needed by all other plugins to connect to the Opencast external API. Block : This plugin provides a block that can be used to upload videos and manage these from within a Moodle course. Chunk Upload : This plugins provides the possibility of using a chunked upload in the block. Repository : This plugin provides a repository for accessing uploaded videos. Filter : This plugin provides a filter that replaces links to Opencast with a player.","title":"Home"},{"location":"#opencast-moodle-plugins-guide","text":"Welcome to the documentation of the Opencast Moodle plugins.","title":"Opencast Moodle Plugins Guide"},{"location":"#plugins","text":"Currently there are five Opencast Moodle plugins. These are: Tool : This is the base plugin that is needed by all other plugins to connect to the Opencast external API. Block : This plugin provides a block that can be used to upload videos and manage these from within a Moodle course. Chunk Upload : This plugins provides the possibility of using a chunked upload in the block. Repository : This plugin provides a repository for accessing uploaded videos. Filter : This plugin provides a filter that replaces links to Opencast with a player.","title":"Plugins"},{"location":"block/about/","text":"Opencast block plugin This block can be used to link Moodle courses to Opencast series. Users with respective privileges (in the following called instructors) can use this block to upload videos via Moodle to Opencast. These videos are transmitted to the Opencast system by the cronjob and create an event in the respective series there. The block can be used to automatically set the access privileges of Moodle users enrolled in the course. All events belonging to the series are displayed in the block. This way, the instructors get an overview of all recorded lectures as well as planned ones. Further, if setup correctly, the instructors are able to restrict the visibility to Moodle groups or prevent access by students at all. Installation The Opencast block plugin is available from GitHub as well as from the Moodle plugins directory . Requirements Min. Moodle Version: 3.3 Opencast API level: Minimum: v1.0.0 Recommended: v1.1.0 Some features might do not works as expected, when using an older API level. Installed Opencast API tool. Configuration The configuration of the block is split up into three sections: General settings Appearance Additional features Capabilities There are additional capabilities, with which you can control the access to the features of the block. Capability Role in default configuration Description block/opencast:addvideo editingteacher, manager Add a video via Moodle to opencast. block/opencast:viewunpublishedvideos editingteacher, manager View the list of all videos of the course, which are available in opencast (even not published ones) block/opencast:defineseriesforcourse manager Change the series ID which is associated with the block instance or rather course block/opencast:createseriesforcourse manager Create a new series if block/course is not yet associated with one block/opencast:deleteevent editingteacher, manager Allows to delete a video as specified above. block/opencast:unassignevent - Allows to unassign a video from the series of the course as specified above. Logging The execution of upload jobs are being logged, which can be viewed at Site administration -> Reports -> Logs . View the setting \"Site Errors\" instead of \"All activities\" you can view only those upload jobs, which failed. Placement This plugin is designed as block and, to be used, it will be initially added to a Moodle course by a teacher. The block shows a quick overview over the videos which are uploaded in the block, but mainly links to a fullscreen overview page where the full functionality of the plugin is provided. If you want to provide the plugin in every course by default without requiring that the teachers adds it to the course, please have a look at Moodle core's $CFG->defaultblocks setting which is set in config.php only and which is described on https://github.com/moodle/moodle/blob/master/config-dist.php. As an alternative to placing the block by default, you might also want to add a link to the plugin's overview page to the Boost nav drawer. This plugin does not offer support for adding a Boost nav drawer item itself, but we would like to reference the https://moodle.org/plugins/local_boostnavigation plugin for this job. After installing local_boostnavigation to your Moodle instance, please add the following line to the local_boostnavigation | insertcustomcoursenodesusers setting: Opencast Videos|/blocks/opencast/index.php?courseid={courseid}|||editingteacher,manager|admin|OR|fa-film|opencast|grades Please take extra care that the editingteacher,manager list of roles should match the list of roles who are given the block/opencast:addvideo capability in your Moodle instance. After adding the Boost nav drawer item, you can also remove the block/opencast:addinstance capability from all roles as adding the block is not really necessary anymore.","title":"About"},{"location":"block/about/#opencast-block-plugin","text":"This block can be used to link Moodle courses to Opencast series. Users with respective privileges (in the following called instructors) can use this block to upload videos via Moodle to Opencast. These videos are transmitted to the Opencast system by the cronjob and create an event in the respective series there. The block can be used to automatically set the access privileges of Moodle users enrolled in the course. All events belonging to the series are displayed in the block. This way, the instructors get an overview of all recorded lectures as well as planned ones. Further, if setup correctly, the instructors are able to restrict the visibility to Moodle groups or prevent access by students at all.","title":"Opencast block plugin"},{"location":"block/about/#installation","text":"The Opencast block plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"block/about/#requirements","text":"Min. Moodle Version: 3.3 Opencast API level: Minimum: v1.0.0 Recommended: v1.1.0 Some features might do not works as expected, when using an older API level. Installed Opencast API tool.","title":"Requirements"},{"location":"block/about/#configuration","text":"The configuration of the block is split up into three sections: General settings Appearance Additional features","title":"Configuration"},{"location":"block/about/#capabilities","text":"There are additional capabilities, with which you can control the access to the features of the block. Capability Role in default configuration Description block/opencast:addvideo editingteacher, manager Add a video via Moodle to opencast. block/opencast:viewunpublishedvideos editingteacher, manager View the list of all videos of the course, which are available in opencast (even not published ones) block/opencast:defineseriesforcourse manager Change the series ID which is associated with the block instance or rather course block/opencast:createseriesforcourse manager Create a new series if block/course is not yet associated with one block/opencast:deleteevent editingteacher, manager Allows to delete a video as specified above. block/opencast:unassignevent - Allows to unassign a video from the series of the course as specified above.","title":"Capabilities"},{"location":"block/about/#logging","text":"The execution of upload jobs are being logged, which can be viewed at Site administration -> Reports -> Logs . View the setting \"Site Errors\" instead of \"All activities\" you can view only those upload jobs, which failed.","title":"Logging"},{"location":"block/about/#placement","text":"This plugin is designed as block and, to be used, it will be initially added to a Moodle course by a teacher. The block shows a quick overview over the videos which are uploaded in the block, but mainly links to a fullscreen overview page where the full functionality of the plugin is provided. If you want to provide the plugin in every course by default without requiring that the teachers adds it to the course, please have a look at Moodle core's $CFG->defaultblocks setting which is set in config.php only and which is described on https://github.com/moodle/moodle/blob/master/config-dist.php. As an alternative to placing the block by default, you might also want to add a link to the plugin's overview page to the Boost nav drawer. This plugin does not offer support for adding a Boost nav drawer item itself, but we would like to reference the https://moodle.org/plugins/local_boostnavigation plugin for this job. After installing local_boostnavigation to your Moodle instance, please add the following line to the local_boostnavigation | insertcustomcoursenodesusers setting: Opencast Videos|/blocks/opencast/index.php?courseid={courseid}|||editingteacher,manager|admin|OR|fa-film|opencast|grades Please take extra care that the editingteacher,manager list of roles should match the list of roles who are given the block/opencast:addvideo capability in your Moodle instance. After adding the Boost nav drawer item, you can also remove the block/opencast:addinstance capability from all roles as adding the block is not really necessary anymore.","title":"Placement"},{"location":"block/additional_features/","text":"Additional Features In the additional features you can configure the access to Opencast Studio as well as for LTI activities. Settings for the chunkuploader If you also have the chunkuploader installed you configure it in this section. Enable Chunkupload: If Chunkupload is enabled it will be possible to upload videos using the chunkupload plugin. Defaults to yes. Video size limit: Limit the file size of uploaded videos through the chunkupload. The default is 2GB. Opencast studio In this section you can enable the feature to add Opencast Studio support to the block. For this to work Opencast Studio needs to be running on the admin node and LTI needs to be enabled. Furthermore LTI users need to be allowed to access Opencast Studio, for this they need the additional role \u00b4ROLE_STUDIO\u00b4. The options are: Show the link to opencast studio: This option renders a button to opencast studio in the block content and the block overview. Opencast studio has to run on your opencast admin node and the following LTI settings have to be configured as well. Defaults to no. Consumer key: LTI Consumer key for the opencast studio integration. Consumer secret: LTI Consumer secret for the opencast studio integration. Recommendation: It is possible to configure Opencast Studio to add certain ACLs to the recorded videos. It is recommended to add the same ACLs to recorded videos as to uploaded videos via the block. Control episode visibility In this section you can configure if the teacher is allowed to control the visibility of an Opencast episode after the episode has been processed. The options are: Allow episode visibility control after processing: If enabled, teachers can control the visibility of an Opencast episode after the episode has been processed in Opencast. Defaults to yes. Allow episode group restriction: If enabled, teachers can not only control the visibility of an Opencast episode for all course users but can also restrict the visibility to particular course groups. Defaults to yes. Add Opencast LTI modules to courses Series In this section you can enable a feature to let teachers add an Opencast LTI series module to the course. This requires that LTI is configured in Opencast. This LTI series module will be pointing to the course's Opencast series. To be able to use this feature, you have to create a preconfigured LTI tool for showing Opencast series first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Series Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=ltitools/series/index.html In the plugin the settings options are: Enable \u201dAdd LTI series module\": If enabled, teachers can add an Opencast LTI series module to a course. This LTI series module will be pointing to the course's Opencast series. The default is no. Default LTI series module title: The default title to be used when a new Opencast LTI series module is added to a course. Preconfigured LTI tool for series modules: The preconfigured LTI tool to be used when a new Opencast LTI series module is added to a course. Add series module intro: If enabled, teachers can add an intro to the Opencast LTI series module. This intro will be shown on the course overview page. Choose series module section: If enabled, teachers can choose the section which the Opencast LTI series module will be added to. Set series module availability: If enabled, teachers can set the availability conditions when a new Opencast LTI series module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page. Episode You can also enable a feature to let teachers add Opencast LTI episode modules to the course. This requires that LTI is configured in Opencast. These LTI episode modules will be pointing to an Opencast episode. To be able to use this feature, you have to create a preconfigured LTI tool for showing Opencast episodes first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Episodes Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=paella/ui/watch.html or tool=theodul/ui/core.html In the plugin the settings options are: Enable \u201dAdd LTI episode module\": If enabled, teachers can add an Opencast LTI episode module to a course. This LTI episode module will be pointing to an Opencast episode. The default is no. Preconfigured LTI tool for episode modules: The preconfigured LTI tool to be used when a new Opencast LTI episode module is added to a course. Add episode module intro: If enabled, teachers can add a intro to the Opencast LTI episode module. This intro will be shown on the course overview page. Choose episode module section: If enabled, teachers can choose the section which the Opencast LTI episode module will be added to. Set episode module availability: If enabled, teachers can set the availability conditions when a new Opencast LTI episode module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page.","title":"Additional features"},{"location":"block/additional_features/#additional-features","text":"In the additional features you can configure the access to Opencast Studio as well as for LTI activities.","title":"Additional Features"},{"location":"block/additional_features/#settings-for-the-chunkuploader","text":"If you also have the chunkuploader installed you configure it in this section. Enable Chunkupload: If Chunkupload is enabled it will be possible to upload videos using the chunkupload plugin. Defaults to yes. Video size limit: Limit the file size of uploaded videos through the chunkupload. The default is 2GB.","title":"Settings for the chunkuploader"},{"location":"block/additional_features/#opencast-studio","text":"In this section you can enable the feature to add Opencast Studio support to the block. For this to work Opencast Studio needs to be running on the admin node and LTI needs to be enabled. Furthermore LTI users need to be allowed to access Opencast Studio, for this they need the additional role \u00b4ROLE_STUDIO\u00b4. The options are: Show the link to opencast studio: This option renders a button to opencast studio in the block content and the block overview. Opencast studio has to run on your opencast admin node and the following LTI settings have to be configured as well. Defaults to no. Consumer key: LTI Consumer key for the opencast studio integration. Consumer secret: LTI Consumer secret for the opencast studio integration. Recommendation: It is possible to configure Opencast Studio to add certain ACLs to the recorded videos. It is recommended to add the same ACLs to recorded videos as to uploaded videos via the block.","title":"Opencast studio"},{"location":"block/additional_features/#control-episode-visibility","text":"In this section you can configure if the teacher is allowed to control the visibility of an Opencast episode after the episode has been processed. The options are: Allow episode visibility control after processing: If enabled, teachers can control the visibility of an Opencast episode after the episode has been processed in Opencast. Defaults to yes. Allow episode group restriction: If enabled, teachers can not only control the visibility of an Opencast episode for all course users but can also restrict the visibility to particular course groups. Defaults to yes.","title":"Control episode visibility"},{"location":"block/additional_features/#add-opencast-lti-modules-to-courses","text":"","title":"Add Opencast LTI modules to courses"},{"location":"block/additional_features/#series","text":"In this section you can enable a feature to let teachers add an Opencast LTI series module to the course. This requires that LTI is configured in Opencast. This LTI series module will be pointing to the course's Opencast series. To be able to use this feature, you have to create a preconfigured LTI tool for showing Opencast series first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Series Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=ltitools/series/index.html In the plugin the settings options are: Enable \u201dAdd LTI series module\": If enabled, teachers can add an Opencast LTI series module to a course. This LTI series module will be pointing to the course's Opencast series. The default is no. Default LTI series module title: The default title to be used when a new Opencast LTI series module is added to a course. Preconfigured LTI tool for series modules: The preconfigured LTI tool to be used when a new Opencast LTI series module is added to a course. Add series module intro: If enabled, teachers can add an intro to the Opencast LTI series module. This intro will be shown on the course overview page. Choose series module section: If enabled, teachers can choose the section which the Opencast LTI series module will be added to. Set series module availability: If enabled, teachers can set the availability conditions when a new Opencast LTI series module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page.","title":"Series"},{"location":"block/additional_features/#episode","text":"You can also enable a feature to let teachers add Opencast LTI episode modules to the course. This requires that LTI is configured in Opencast. These LTI episode modules will be pointing to an Opencast episode. To be able to use this feature, you have to create a preconfigured LTI tool for showing Opencast episodes first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Episodes Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=paella/ui/watch.html or tool=theodul/ui/core.html In the plugin the settings options are: Enable \u201dAdd LTI episode module\": If enabled, teachers can add an Opencast LTI episode module to a course. This LTI episode module will be pointing to an Opencast episode. The default is no. Preconfigured LTI tool for episode modules: The preconfigured LTI tool to be used when a new Opencast LTI episode module is added to a course. Add episode module intro: If enabled, teachers can add a intro to the Opencast LTI episode module. This intro will be shown on the course overview page. Choose episode module section: If enabled, teachers can choose the section which the Opencast LTI episode module will be added to. Set episode module availability: If enabled, teachers can set the availability conditions when a new Opencast LTI episode module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page.","title":"Episode"},{"location":"block/appearance/","text":"Appearance In this section you can configure if particular columns on the overview page are shown or not. The configuration options are: Show publication channels: If enabled, the table of available videos on the overview page will contain a column which shows the publication channel of the Opencast episode. The same information will also be given on the Opencast episode deletion page. Defaults to yes. Show end date: If enabled, the table of available and scheduled videos on the overview page will contain a column which shows the end date of the Opencast episode. Defaults to yes. Show location: If enabled, the table of available and scheduled videos on the overview page will contain a column which shows the location of the Opencast episode. Defaults to yes.","title":"Appearance"},{"location":"block/appearance/#appearance","text":"In this section you can configure if particular columns on the overview page are shown or not. The configuration options are: Show publication channels: If enabled, the table of available videos on the overview page will contain a column which shows the publication channel of the Opencast episode. The same information will also be given on the Opencast episode deletion page. Defaults to yes. Show end date: If enabled, the table of available and scheduled videos on the overview page will contain a column which shows the end date of the Opencast episode. Defaults to yes. Show location: If enabled, the table of available and scheduled videos on the overview page will contain a column which shows the location of the Opencast episode. Defaults to yes.","title":"Appearance"},{"location":"block/backup_restore_workflows/","text":"Configuration of the Duplicate Workflow To use the backup and restore functionality, you need to specify a duplication workflow within the Moodle settings. However, there is no out of the box workflow defined in Opencast, which allows to duplicate a series. Own workflows If you want to create your own workflow, here are the descriptions of the general restore process: In the restore process, we first create a new opencast series for the new course. Afterwards, for each event UID of the backup a 'duplicate' workflow is started, while the new series UID is given as a configuration parameter to the start workflow call. The variable used to store the series ID is 'seriesID'. In our workflow definition example from above, the first workflow lms-automated-duplicate will duplicate the event and will start a new workflow for the new event. This second workflow lms-publish-duplicate then assigns the series of the new course to the new event. In order to be able to select your duplicate workflow within Moodle, you need to assign the 'api' tag to it, since the viable duplicate workflows are filtered by that. Workflow examples The workflow that is triggered by Moodle: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-automated-duplicate</id> <title>LMS Upload aus dem LMS duplizieren</title> <tags> <tag>api</tag> </tags> <operations> <!-- Create the new events --> <operation id=\"duplicate-event\" fail-on-error=\"true\" exception-handler-workflow=\"partial-error\" description=\"Duplicate Event\"> <configurations> <configuration key=\"source-flavors\">*/source,*/prepared,*/search+preview,dublincore/*,*/player+preview,*/feed+preview,*/timeline+preview,smil/*,security/xacml+series</configuration> <configuration key=\"number-of-events\">1</configuration> <configuration key=\"target-tags\">+copied</configuration> <configuration key=\"property-namespaces\">org.opencastproject.assetmanager.security, org.opencastproject.workflow.configuration</configuration> <configuration key=\"copy-number-prefix\">Kopie</configuration> </configurations> </operation> <!-- Start new workflow --> <operation id=\"start-workflow\" fail-on-error=\"true\" retry-strategy=\"hold\" max-attempts=\"5\" exception-handler-workflow=\"partial-error\" description=\"Start workflow on duplicate\"> <configurations> <configuration key=\"workflow-definition\">lms-publish-duplicate</configuration> <configuration key=\"media-package\">${duplicate_media_package_1_id}</configuration> <configuration key=\"seriesID\">${seriesID}</configuration> </configurations> </operation> <!-- Cleanup the working file repository --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition> The first workflow triggers this second workflow on the duplicated mediapackage. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-publish-duplicate</id> <title>Publish a duplicate of an LMS upload</title> <operations> <!-- Apply the default workflow configuration --> <operation id=\"defaults\" description=\"Applying default configuration values\"> <configurations> <configuration key=\"straightToPublishing\">true</configuration> <configuration key=\"flagForCutting\">false</configuration> <configuration key=\"flagForReview\">false</configuration> <configuration key=\"flagQuality360p\">false</configuration> <configuration key=\"flagQuality480p\">false</configuration> <configuration key=\"flagQuality720p\">true</configuration> <configuration key=\"flagQuality1080p\">false</configuration> <configuration key=\"flagQuality2160p\">false</configuration> <configuration key=\"publishToEngage\">true</configuration> <configuration key=\"publishToApi\">true</configuration> <configuration key=\"publishToOaiPmh\">true</configuration> <configuration key=\"publishToYouTube\">false</configuration> <configuration key=\"publishToAws\">false</configuration> <configuration key=\"uploadedSearchPreview\">false</configuration> <configuration key=\"publishLive\">false</configuration> <configuration key=\"thumbnailType\">0</configuration> <configuration key=\"thumbnailPosition\">1</configuration> </configurations> </operation> <!-- Apply series --> <operation id=\"series\" exception-handler-workflow=\"partial-error\" description=\"Apply series metadata and acl\"> <configurations> <configuration key=\"series\">${seriesID}</configuration> <configuration key=\"attach\">*/*</configuration> <configuration key=\"apply-acl\">true</configuration> <configuration key=\"copy-metadata\">isPartOf</configuration> </configurations> </operation> <operation id=\"tag\" description=\"Tagging metadata catalogs for publication\"> <configurations> <configuration key=\"source-flavors\">dublincore/*,security/*</configuration> <configuration key=\"target-tags\">+engage-download,+archive</configuration> </configurations> </operation> <!-- Archive --> <operation id=\"snapshot\" description=\"Archive updated duplicate\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- Encode and publish --> <operation id=\"include\" description=\"Publish the recording\"> <configurations> <configuration key=\"workflow-id\">partial-publish</configuration> </configurations> </operation> <!-- Archive after publish --> <operation id=\"snapshot\" description=\"Archive publish information\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Cleanup --> <!-- --> <!-- Remove work artifacts. --> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Clean the system from work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition>","title":"Backup and restore workflows"},{"location":"block/backup_restore_workflows/#configuration-of-the-duplicate-workflow","text":"To use the backup and restore functionality, you need to specify a duplication workflow within the Moodle settings. However, there is no out of the box workflow defined in Opencast, which allows to duplicate a series.","title":"Configuration of the Duplicate Workflow"},{"location":"block/backup_restore_workflows/#own-workflows","text":"If you want to create your own workflow, here are the descriptions of the general restore process: In the restore process, we first create a new opencast series for the new course. Afterwards, for each event UID of the backup a 'duplicate' workflow is started, while the new series UID is given as a configuration parameter to the start workflow call. The variable used to store the series ID is 'seriesID'. In our workflow definition example from above, the first workflow lms-automated-duplicate will duplicate the event and will start a new workflow for the new event. This second workflow lms-publish-duplicate then assigns the series of the new course to the new event. In order to be able to select your duplicate workflow within Moodle, you need to assign the 'api' tag to it, since the viable duplicate workflows are filtered by that.","title":"Own workflows"},{"location":"block/backup_restore_workflows/#workflow-examples","text":"The workflow that is triggered by Moodle: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-automated-duplicate</id> <title>LMS Upload aus dem LMS duplizieren</title> <tags> <tag>api</tag> </tags> <operations> <!-- Create the new events --> <operation id=\"duplicate-event\" fail-on-error=\"true\" exception-handler-workflow=\"partial-error\" description=\"Duplicate Event\"> <configurations> <configuration key=\"source-flavors\">*/source,*/prepared,*/search+preview,dublincore/*,*/player+preview,*/feed+preview,*/timeline+preview,smil/*,security/xacml+series</configuration> <configuration key=\"number-of-events\">1</configuration> <configuration key=\"target-tags\">+copied</configuration> <configuration key=\"property-namespaces\">org.opencastproject.assetmanager.security, org.opencastproject.workflow.configuration</configuration> <configuration key=\"copy-number-prefix\">Kopie</configuration> </configurations> </operation> <!-- Start new workflow --> <operation id=\"start-workflow\" fail-on-error=\"true\" retry-strategy=\"hold\" max-attempts=\"5\" exception-handler-workflow=\"partial-error\" description=\"Start workflow on duplicate\"> <configurations> <configuration key=\"workflow-definition\">lms-publish-duplicate</configuration> <configuration key=\"media-package\">${duplicate_media_package_1_id}</configuration> <configuration key=\"seriesID\">${seriesID}</configuration> </configurations> </operation> <!-- Cleanup the working file repository --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition> The first workflow triggers this second workflow on the duplicated mediapackage. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-publish-duplicate</id> <title>Publish a duplicate of an LMS upload</title> <operations> <!-- Apply the default workflow configuration --> <operation id=\"defaults\" description=\"Applying default configuration values\"> <configurations> <configuration key=\"straightToPublishing\">true</configuration> <configuration key=\"flagForCutting\">false</configuration> <configuration key=\"flagForReview\">false</configuration> <configuration key=\"flagQuality360p\">false</configuration> <configuration key=\"flagQuality480p\">false</configuration> <configuration key=\"flagQuality720p\">true</configuration> <configuration key=\"flagQuality1080p\">false</configuration> <configuration key=\"flagQuality2160p\">false</configuration> <configuration key=\"publishToEngage\">true</configuration> <configuration key=\"publishToApi\">true</configuration> <configuration key=\"publishToOaiPmh\">true</configuration> <configuration key=\"publishToYouTube\">false</configuration> <configuration key=\"publishToAws\">false</configuration> <configuration key=\"uploadedSearchPreview\">false</configuration> <configuration key=\"publishLive\">false</configuration> <configuration key=\"thumbnailType\">0</configuration> <configuration key=\"thumbnailPosition\">1</configuration> </configurations> </operation> <!-- Apply series --> <operation id=\"series\" exception-handler-workflow=\"partial-error\" description=\"Apply series metadata and acl\"> <configurations> <configuration key=\"series\">${seriesID}</configuration> <configuration key=\"attach\">*/*</configuration> <configuration key=\"apply-acl\">true</configuration> <configuration key=\"copy-metadata\">isPartOf</configuration> </configurations> </operation> <operation id=\"tag\" description=\"Tagging metadata catalogs for publication\"> <configurations> <configuration key=\"source-flavors\">dublincore/*,security/*</configuration> <configuration key=\"target-tags\">+engage-download,+archive</configuration> </configurations> </operation> <!-- Archive --> <operation id=\"snapshot\" description=\"Archive updated duplicate\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- Encode and publish --> <operation id=\"include\" description=\"Publish the recording\"> <configurations> <configuration key=\"workflow-id\">partial-publish</configuration> </configurations> </operation> <!-- Archive after publish --> <operation id=\"snapshot\" description=\"Archive publish information\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Cleanup --> <!-- --> <!-- Remove work artifacts. --> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Clean the system from work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition>","title":"Workflow examples"},{"location":"block/general_settings/","text":"General Settings In the following, we outline the settings for the block. Through the settings, the block can be adjusted to the needs of your platform. Most of the features the block provides, can be further specified or completely turned off. The core functionality is to upload a video file to Moodle, which is then transferred to opencast. This is done via a cronjob, which processes all Upload Jobs in a first in first out fashion. Please make sure that the Maximum Time limit for cron execution in Site administration -> Server -> Performance is not restricted (value of 0 means no time limit). Then the cron job is not terminated early. Settings for upload jobs In this section you can define the following settings: Limit upload job by cron: How many videos are uploaded within one run of the cronjob. If it is set to 0, the number of videos is not limited. Workflow to start after upload: Workflow: Set the unique shortname of the workflow that should be started after successfully uploading a video file to Opencast. When using the default workflows it is recommended to use the Studio Upload workflow. Publish to Engage: Select whether the videos should be published to the engage player. This results in the configuration field 'publishToEngage' to be set to true or false for the called workflow (only useful if the selected workflow supports this). When using the default workflows this checkbox needs to be ticked. Select if multiple videos with the same content hash are uploaded to opencast only once. This is a legacy feature: Not recommended to be used. With our further development we strive to create one series per course. Allow unassign from course others a 'delete' icon to the teacher, which will unassign the event from the series of the course. This is a legacy feature: Only useful if events should not actually be deleted! Workflow to start before event is be deleted: Setup the unique shortname of the workflow that should be started for deleting a video file in Opencast. If a workflow is selected, a 'delete' icon is offered to the teacher, which will actually delete the event in the Opencast system. When using the default workflows it is recommended to use the Delete workflow. We recommend to use only one of the two previous 'delete' options! Delete videofile from Moodle: This setting causes the Moodle system to delete the file of the uploaded video as soon as possible. If set to false, the video file will remain in the Moodle system in the draft area until a cron job deletes it (usually some days later). Allowed file extensions: With 'Allowed file extensions' you can specify which file extensions users can upload as videos. The extensions must exist as file types in Moodle under Site administration -> Server -> File types. If left blank all of Moodle's file types in the type group 'video' are allowed. Settings for a block instance In this section the number of videos that is displayed can be configured. Number of videos: Maximum number of videos to display in the block. Cache valid time: Time in seconds, before the cache for the video data of each course is refreshed. Settings for backup and restore In this section the backup and restore workflow can be configured. However, the default Opencast workflows do not support this feature. To be able to use this feature two additional workflows need to be added to Opencast. One workflow to duplicate an event in Opencast and another workflow to publish this duplicate. With the default Opencast workflows the example workflows can be used. Workflow for duplicating events: This workflow is needed for restoring opencast events from one course into another. If not set, it is not possible to restore Opencast events. A block instance might be restore, but without a series and without events. In this dropdown menu only workflows with the api tag can be selected. Group and series In this section it can be configured how groups and series created by Moodle are named in Opencast. In both cases the options [COURSEID] and [COURSENAME] are available which are placeholders for the numeric course ID and for the course name. The configuration options are: Create a group: If checked, a group is created during the upload. This is a legacy feature, which assigns each uploaded event to a Opencast group. Group name: Group to which the video is added. Important: The group name length is restricted to 128 Bytes. You can use the placeholders [COURSEID] and [COURSENAME] which are automatically replaced. Series name: Series to which the video is added. You can use the placeholders [COURSEID] and [COURSENAME] which are automatically replaced. Roles In this section you can define which ACL rules are added to a video. You can add and delete roles and define the respective actions for these roles. This might only be relevant if you want to control the access privileges for your opencast videos via Moodle. In this case it is recommended that you setup the moodle-role-provider for your Opencast system (https://docs.opencast.org/develop/admin/configuration/security.user.moodle/). It is possible to select if roles should be permanent or not. Non-permanent roles can be used to manually change the access of certain user groups (e.g. students) for each video. Roles which are not permanent will be removed if the video is hidden in the block overview and added again if the video is made visible. To use this feature, you need to define at least one non-permanent role-action combination and the name of opencast workflow for republishing metadata. When using the default Opencast workflows this is Republish Metadata . In the video overview of the block, the instructors are able to change the visibility of each video. However, the icon to do so, is only present if the two requirements mentioned above are met! This process takes some time, since the opencast workflow needs to finish. In the ACL Roles the following placeholders can be used: * [COURSEID]: Will be replaced by the id of the course. * [COURSEGROUPID]: Should only be used in non-permanent roles. Depending on the visibility of the event, it is either replaced by the id of the course or (in case the visibility is restricted by groups) it is replaced by a 'G' followed by the id of the group. In case that multiple groups are selected in the visibility dialog, one ACL rule for every group is created. The basic role including the course id is removed in the case of group visibility. To give an example for Roles, which also meets the LTI standard and which is used by the plugin by default, you can use the following setting: Role Actions Permanent ROLE_ADMIN write,read Yes ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS write,read Yes [COURSEID]_Instructor write,read Yes [COURSEGROUPID]_Learner read No Metadata In this section it can be configured which metadata instructors can provide as well as which metadata instructors have to provide. By default instructors have to provide the title of a video.","title":"General Settings"},{"location":"block/general_settings/#general-settings","text":"In the following, we outline the settings for the block. Through the settings, the block can be adjusted to the needs of your platform. Most of the features the block provides, can be further specified or completely turned off. The core functionality is to upload a video file to Moodle, which is then transferred to opencast. This is done via a cronjob, which processes all Upload Jobs in a first in first out fashion. Please make sure that the Maximum Time limit for cron execution in Site administration -> Server -> Performance is not restricted (value of 0 means no time limit). Then the cron job is not terminated early.","title":"General Settings"},{"location":"block/general_settings/#settings-for-upload-jobs","text":"In this section you can define the following settings: Limit upload job by cron: How many videos are uploaded within one run of the cronjob. If it is set to 0, the number of videos is not limited. Workflow to start after upload: Workflow: Set the unique shortname of the workflow that should be started after successfully uploading a video file to Opencast. When using the default workflows it is recommended to use the Studio Upload workflow. Publish to Engage: Select whether the videos should be published to the engage player. This results in the configuration field 'publishToEngage' to be set to true or false for the called workflow (only useful if the selected workflow supports this). When using the default workflows this checkbox needs to be ticked. Select if multiple videos with the same content hash are uploaded to opencast only once. This is a legacy feature: Not recommended to be used. With our further development we strive to create one series per course. Allow unassign from course others a 'delete' icon to the teacher, which will unassign the event from the series of the course. This is a legacy feature: Only useful if events should not actually be deleted! Workflow to start before event is be deleted: Setup the unique shortname of the workflow that should be started for deleting a video file in Opencast. If a workflow is selected, a 'delete' icon is offered to the teacher, which will actually delete the event in the Opencast system. When using the default workflows it is recommended to use the Delete workflow. We recommend to use only one of the two previous 'delete' options! Delete videofile from Moodle: This setting causes the Moodle system to delete the file of the uploaded video as soon as possible. If set to false, the video file will remain in the Moodle system in the draft area until a cron job deletes it (usually some days later). Allowed file extensions: With 'Allowed file extensions' you can specify which file extensions users can upload as videos. The extensions must exist as file types in Moodle under Site administration -> Server -> File types. If left blank all of Moodle's file types in the type group 'video' are allowed.","title":"Settings for upload jobs"},{"location":"block/general_settings/#settings-for-a-block-instance","text":"In this section the number of videos that is displayed can be configured. Number of videos: Maximum number of videos to display in the block. Cache valid time: Time in seconds, before the cache for the video data of each course is refreshed.","title":"Settings for a block instance"},{"location":"block/general_settings/#settings-for-backup-and-restore","text":"In this section the backup and restore workflow can be configured. However, the default Opencast workflows do not support this feature. To be able to use this feature two additional workflows need to be added to Opencast. One workflow to duplicate an event in Opencast and another workflow to publish this duplicate. With the default Opencast workflows the example workflows can be used. Workflow for duplicating events: This workflow is needed for restoring opencast events from one course into another. If not set, it is not possible to restore Opencast events. A block instance might be restore, but without a series and without events. In this dropdown menu only workflows with the api tag can be selected.","title":"Settings for backup and restore"},{"location":"block/general_settings/#group-and-series","text":"In this section it can be configured how groups and series created by Moodle are named in Opencast. In both cases the options [COURSEID] and [COURSENAME] are available which are placeholders for the numeric course ID and for the course name. The configuration options are: Create a group: If checked, a group is created during the upload. This is a legacy feature, which assigns each uploaded event to a Opencast group. Group name: Group to which the video is added. Important: The group name length is restricted to 128 Bytes. You can use the placeholders [COURSEID] and [COURSENAME] which are automatically replaced. Series name: Series to which the video is added. You can use the placeholders [COURSEID] and [COURSENAME] which are automatically replaced.","title":"Group and series"},{"location":"block/general_settings/#roles","text":"In this section you can define which ACL rules are added to a video. You can add and delete roles and define the respective actions for these roles. This might only be relevant if you want to control the access privileges for your opencast videos via Moodle. In this case it is recommended that you setup the moodle-role-provider for your Opencast system (https://docs.opencast.org/develop/admin/configuration/security.user.moodle/). It is possible to select if roles should be permanent or not. Non-permanent roles can be used to manually change the access of certain user groups (e.g. students) for each video. Roles which are not permanent will be removed if the video is hidden in the block overview and added again if the video is made visible. To use this feature, you need to define at least one non-permanent role-action combination and the name of opencast workflow for republishing metadata. When using the default Opencast workflows this is Republish Metadata . In the video overview of the block, the instructors are able to change the visibility of each video. However, the icon to do so, is only present if the two requirements mentioned above are met! This process takes some time, since the opencast workflow needs to finish. In the ACL Roles the following placeholders can be used: * [COURSEID]: Will be replaced by the id of the course. * [COURSEGROUPID]: Should only be used in non-permanent roles. Depending on the visibility of the event, it is either replaced by the id of the course or (in case the visibility is restricted by groups) it is replaced by a 'G' followed by the id of the group. In case that multiple groups are selected in the visibility dialog, one ACL rule for every group is created. The basic role including the course id is removed in the case of group visibility. To give an example for Roles, which also meets the LTI standard and which is used by the plugin by default, you can use the following setting: Role Actions Permanent ROLE_ADMIN write,read Yes ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS write,read Yes [COURSEID]_Instructor write,read Yes [COURSEGROUPID]_Learner read No","title":"Roles"},{"location":"block/general_settings/#metadata","text":"In this section it can be configured which metadata instructors can provide as well as which metadata instructors have to provide. By default instructors have to provide the title of a video.","title":"Metadata"},{"location":"chunkupload/about/","text":"Opencast chunkupload plugin The chunkupload plugin provides the possibility of using a chunked upload. Using a chunked upload users are able to upload files that are bigger then the size limit of the Moodle course. Installation The chunkupload plugin is available from GitHub as well as from the Moodle plugins directory . Requirements Min. Moodle Version: 3.7 Installed Opencast block. Configuration For the configuration see the additional features of the block.","title":"About"},{"location":"chunkupload/about/#opencast-chunkupload-plugin","text":"The chunkupload plugin provides the possibility of using a chunked upload. Using a chunked upload users are able to upload files that are bigger then the size limit of the Moodle course.","title":"Opencast chunkupload plugin"},{"location":"chunkupload/about/#installation","text":"The chunkupload plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"chunkupload/about/#requirements","text":"Min. Moodle Version: 3.7 Installed Opencast block.","title":"Requirements"},{"location":"chunkupload/about/#configuration","text":"For the configuration see the additional features of the block.","title":"Configuration"},{"location":"filter/about/","text":"Opencast filter plugin The opencast filter can be used to embed opencast videos. Tested opencast players are Paella or Theodul. Notice: This plugin is work in progress and currently only works with the Atto editor. Installation The Opencast repository plugin is available from GitHub . Requirements Installed Opencast API tool. Installed Opencast repository plugin. Configuration The configuration of this filter is documented in the settings page.","title":"About"},{"location":"filter/about/#opencast-filter-plugin","text":"The opencast filter can be used to embed opencast videos. Tested opencast players are Paella or Theodul. Notice: This plugin is work in progress and currently only works with the Atto editor.","title":"Opencast filter plugin"},{"location":"filter/about/#installation","text":"The Opencast repository plugin is available from GitHub .","title":"Installation"},{"location":"filter/about/#requirements","text":"Installed Opencast API tool. Installed Opencast repository plugin.","title":"Requirements"},{"location":"filter/about/#configuration","text":"The configuration of this filter is documented in the settings page.","title":"Configuration"},{"location":"filter/settings/","text":"Settings For the Opencast filter to work you need to configure LTI in your Opencast server. The configuration options are: Consumer key: The LTI consumer key. Consumer secret: The LTI consumer secret. URL of the Opencast Engage server: The full URL of your Opencast presentation server. For example: https://develop.opencast.org URL of the Opencast player: Relative URL of the Opencast player, e.g. /paella/ui/watch.html or /theodul/ui/core.html . Once you configured the filter you need to activate the filter.","title":"Settings"},{"location":"filter/settings/#settings","text":"For the Opencast filter to work you need to configure LTI in your Opencast server. The configuration options are: Consumer key: The LTI consumer key. Consumer secret: The LTI consumer secret. URL of the Opencast Engage server: The full URL of your Opencast presentation server. For example: https://develop.opencast.org URL of the Opencast player: Relative URL of the Opencast player, e.g. /paella/ui/watch.html or /theodul/ui/core.html . Once you configured the filter you need to activate the filter.","title":"Settings"},{"location":"repository/about/","text":"Opencast repository plugin The repository plugin serves as a way to embed videos of your Opencast system into a Moodle course. Notice: This plugin is work in progress and currently only works with the Atto editor. Installation The Opencast repository plugin is available from GitHub . Requirements Installed Opencast API tool. Configuration The configuration of the block is documented in the settings page.","title":"About"},{"location":"repository/about/#opencast-repository-plugin","text":"The repository plugin serves as a way to embed videos of your Opencast system into a Moodle course. Notice: This plugin is work in progress and currently only works with the Atto editor.","title":"Opencast repository plugin"},{"location":"repository/about/#installation","text":"The Opencast repository plugin is available from GitHub .","title":"Installation"},{"location":"repository/about/#requirements","text":"Installed Opencast API tool.","title":"Requirements"},{"location":"repository/about/#configuration","text":"The configuration of the block is documented in the settings page.","title":"Configuration"},{"location":"repository/settings/","text":"Settings In the settings of the repository plugin the repository instances can configured. General settings Allow users to add a repository instance into the course Allow users to add a repository instance into the user context Repositories instances of the site Note that the repository is only available within a text editor and will paste the URL to the resource into the content. This URL will later be replaced via a Moodle filter to show an embedded player. There are two different possibilities: Display a video using the Moodle media filter: The repository can embed a link to the media file of the Opencast event. This link will automatically be replaced by the Moodle media filter. Be aware that by default Opencast does not protect links to published files in any way. Thus, this link can be easily shared between students, who might not have access to the course itself. * Display a video using an Opencast player: The repository can paste a link to the course content, which leads to a page at which an embeddable Opencast player is provided. For this scenario, you will need the Opencast filter plugin as well as an Opencast instance with configured LTI . The filter will replace the link by an iFrame, which displays the Opencast player. In order for this to work, the selected publication channel of the repository instance has to serve the URL to the player within the publication URL. Additionally, the filter will automatically authenticate the user in Opencast using LTI. This way, some kind of resource protection is provided. However, for increased protection, you would need to activate stream security in Opencast. In this section you see a table of the configured repository instances. You can add instances as well as configure and delete instances. The possible options per repository instance are: Name: Name of the repository instance. Opencast default author Opencast channelid : The channel id of the publication in Opencast. With a default Opencast installation you can use engage-player . Preferred flavor to get thumbnail : The flavor for the thumbnail. Leave empty for the Opencast default. Fallback flavor to get thumbnail Embedd URL to player instead of media file. Whether the URL to the Opencast player should be embedded. If this box is not checked a direct link to a video file will be embedded. Flavor to get video: The flavor of the video. Leave empty to use the Opencast default. Publication channels For the configuration of the publication channel you can either use the default publication channel engage-player or use your own publication channel. To use your own publication channel you will have to modify the publish workflow and add a publish-configure operation. For example: <operation id=\"publish-configure\" exception-handler-workflow=\"partial-error\" description=\"Publish to external api publication channel\"> <configurations> <configuration key=\"channel-id\">api</configuration> <configuration key=\"mimetype\">application/json</configuration> <configuration key=\"source-tags\">engage-download,engage-streaming</configuration> <configuration key=\"url-pattern\">https://HOSTNAME/paella/ui/watch.html?id=${event_id}</configuration> <configuration key=\"with-published-elements\">false</configuration> <configuration key=\"check-availability\">true</configuration> </configurations> </operation>","title":"Settings"},{"location":"repository/settings/#settings","text":"In the settings of the repository plugin the repository instances can configured.","title":"Settings"},{"location":"repository/settings/#general-settings","text":"Allow users to add a repository instance into the course Allow users to add a repository instance into the user context","title":"General settings"},{"location":"repository/settings/#repositories-instances-of-the-site","text":"Note that the repository is only available within a text editor and will paste the URL to the resource into the content. This URL will later be replaced via a Moodle filter to show an embedded player. There are two different possibilities: Display a video using the Moodle media filter: The repository can embed a link to the media file of the Opencast event. This link will automatically be replaced by the Moodle media filter. Be aware that by default Opencast does not protect links to published files in any way. Thus, this link can be easily shared between students, who might not have access to the course itself. * Display a video using an Opencast player: The repository can paste a link to the course content, which leads to a page at which an embeddable Opencast player is provided. For this scenario, you will need the Opencast filter plugin as well as an Opencast instance with configured LTI . The filter will replace the link by an iFrame, which displays the Opencast player. In order for this to work, the selected publication channel of the repository instance has to serve the URL to the player within the publication URL. Additionally, the filter will automatically authenticate the user in Opencast using LTI. This way, some kind of resource protection is provided. However, for increased protection, you would need to activate stream security in Opencast. In this section you see a table of the configured repository instances. You can add instances as well as configure and delete instances. The possible options per repository instance are: Name: Name of the repository instance. Opencast default author Opencast channelid : The channel id of the publication in Opencast. With a default Opencast installation you can use engage-player . Preferred flavor to get thumbnail : The flavor for the thumbnail. Leave empty for the Opencast default. Fallback flavor to get thumbnail Embedd URL to player instead of media file. Whether the URL to the Opencast player should be embedded. If this box is not checked a direct link to a video file will be embedded. Flavor to get video: The flavor of the video. Leave empty to use the Opencast default.","title":"Repositories instances of the site"},{"location":"repository/settings/#publication-channels","text":"For the configuration of the publication channel you can either use the default publication channel engage-player or use your own publication channel. To use your own publication channel you will have to modify the publish workflow and add a publish-configure operation. For example: <operation id=\"publish-configure\" exception-handler-workflow=\"partial-error\" description=\"Publish to external api publication channel\"> <configurations> <configuration key=\"channel-id\">api</configuration> <configuration key=\"mimetype\">application/json</configuration> <configuration key=\"source-tags\">engage-download,engage-streaming</configuration> <configuration key=\"url-pattern\">https://HOSTNAME/paella/ui/watch.html?id=${event_id}</configuration> <configuration key=\"with-published-elements\">false</configuration> <configuration key=\"check-availability\">true</configuration> </configurations> </operation>","title":"Publication channels"},{"location":"tool/about/","text":"Opencast API plugin The Opencast API plugin provides API functions as general settings for the other plugins. The tool stores the relation between courses and series UIDs and offers webservice endpoints for the opencast role provider . Installation The Opencast API plugin is available from GitHub as well as from the Moodle plugins directory . Configuration For the configuration see the settings page.","title":"About"},{"location":"tool/about/#opencast-api-plugin","text":"The Opencast API plugin provides API functions as general settings for the other plugins. The tool stores the relation between courses and series UIDs and offers webservice endpoints for the opencast role provider .","title":"Opencast API plugin"},{"location":"tool/about/#installation","text":"The Opencast API plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"tool/about/#configuration","text":"For the configuration see the settings page.","title":"Configuration"},{"location":"tool/settings/","text":"Settings Before being able to configure the Opencast API tool a user has to be created in Opencast. This user will be used to connect to Opencast from within Moodle. This user needs to have the following roles in Opencast: ROLE_API ROLE_API_* ROLE_SUDO Once the user is created you can add it to the group Opencast Project External Applications . The tool plugin has the following configuration options: Opencast API URL: This is the base URL of the Opencast system. If you have a multiple server setup this should be the URL of the admin server. Provide the URL including https:// . For example: https://stable.opencast.org Username for API calls: Provide the username of the previously created user. Password for API user: Provide the password of the previously created user. Connection timeout: Setup the time in seconds while Moodle is trying to connect to opencast until timeout. This defaults to 1 second.","title":"Settings"},{"location":"tool/settings/#settings","text":"Before being able to configure the Opencast API tool a user has to be created in Opencast. This user will be used to connect to Opencast from within Moodle. This user needs to have the following roles in Opencast: ROLE_API ROLE_API_* ROLE_SUDO Once the user is created you can add it to the group Opencast Project External Applications . The tool plugin has the following configuration options: Opencast API URL: This is the base URL of the Opencast system. If you have a multiple server setup this should be the URL of the admin server. Provide the URL including https:// . For example: https://stable.opencast.org Username for API calls: Provide the username of the previously created user. Password for API user: Provide the password of the previously created user. Connection timeout: Setup the time in seconds while Moodle is trying to connect to opencast until timeout. This defaults to 1 second.","title":"Settings"}]}