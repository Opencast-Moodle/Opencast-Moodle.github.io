{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Opencast Moodle Plugins Guide Welcome to the documentation of the Opencast Moodle plugins. Plugins Currently, there are six Opencast Moodle plugins. These are: Tool : This is the base plugin, that is needed by all other plugins, to connect to the Opencast external API. Block : This plugin provides a block, that can be used, to upload videos and manage these from within a Moodle course. Activity : This activity provides a player for Opencast videos. Chunk Upload : This plugin provides the possibility of using a chunked upload in the block. Repository : This plugin provides a repository for accessing uploaded videos. Filter : This plugin provides a filter, that replaces links to Opencast with a player.","title":"Home"},{"location":"#opencast-moodle-plugins-guide","text":"Welcome to the documentation of the Opencast Moodle plugins.","title":"Opencast Moodle Plugins Guide"},{"location":"#plugins","text":"Currently, there are six Opencast Moodle plugins. These are: Tool : This is the base plugin, that is needed by all other plugins, to connect to the Opencast external API. Block : This plugin provides a block, that can be used, to upload videos and manage these from within a Moodle course. Activity : This activity provides a player for Opencast videos. Chunk Upload : This plugin provides the possibility of using a chunked upload in the block. Repository : This plugin provides a repository for accessing uploaded videos. Filter : This plugin provides a filter, that replaces links to Opencast with a player.","title":"Plugins"},{"location":"block/about/","text":"Opencast block plugin This block can be used, to link Moodle courses to Opencast series. Users with respective privileges (in the following called instructors) can use this block, to upload videos via Moodle to Opencast. These videos are transmitted to the Opencast system by a cronjob and create an event in the respective series there. Other plugins, like the Opencast activity plugin , can be used afterwards, to provide a complete series or a bulk of videos within a course. The block can be used, to automatically set the access privileges of Moodle users enrolled in the course. All events belonging to the series are displayed in the block. This way, the instructors get an overview of all recorded lectures as well as planned ones. Further, if set up correctly, the instructors are able to restrict the visibility to Moodle groups or prevent access by students at all. Installation The Opencast block plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle. Requirements To use the Opencast Videos block plugin, the following dependency must be installed and properly configured: Opencast API tool (tool_opencast) Features The Opencast Videos block plugin provides the following key features: Upload videos to Opencast, either individually or in batches. Record videos using Opencast studio View an overview of recorded and scheduled videos within a course. Access an overview of all series and videos available to a user, regardless of the course ( Global overview ). Attach and manage transcription (subtitle) files for videos. Send process notifications about videos. Live status updates of the uploading status and workflow processing states of videos Download processed videos from Opencast Edit the video in the Opencast editor Edit and update metadata of videos and series Delete videos Create new Opencast series from Moodle Linking an existing Opencast series to the course Restrict the visibility of videos to Moodle groups or prevent access by students at all Allow teachers, to start Opencast workflows for videos Import videos from other Moodle courses via course reuse, series import or manual video bulk import Report problems to a support team with automatically including technical information In integration with the activity Opencast Video Provider : Provide the series or single videos as activity for students to watch directly in Moodle Restrict the visibility using the extensive Moodle activity access settings Perform mass actions in video lists, enabling bulk operations such as metadata updates or deletions. Offer a Workflow Configuration panel for teachers to customize workflow options during video uploads. Configuration The block has many settings, that allow the administrator, to further specify the features or to turn them off. The configuration of the block is split up into six sections: Shared settings General settings Appearance Additional features LTI module features Import videos features Capabilities There are additional capabilities, with which you can control the access to the features of the block. Those capabilities are given in an alphabetical order by the following table: Capability Role in default configuration Description block/opencast:addactivity editingteacher, manager Add Opencast Video Provider activity for a series to course block/opencast:addactivityepisode editingteacher, manager Add Opencast Video Provider activity for an episode to course block/opencast:addinstance editingteacher, manager Add a block instance to a course. block/opencast:addlti editingteacher, manager Add Opencast LTI series module to course block/opencast:addltiepisode editingteacher, manager Add Opencast LTI episode module to course block/opencast:addvideo editingteacher, manager Add a video via Moodle to opencast block/opencast:autocompleteteacherroles editingteacher, teacher One's fullname is used for fullname suggestions in a course for different forms block/opencast:canchangeownerforallvideos manager Can change the owner of videos without being the owner itself block/opencast:createseriesforcourse manager Create a new series if block/course is not yet associated with one block/opencast:defineseriesforcourse manager Change the series ID which is associated with the block instance or rather course block/opencast:deleteevent editingteacher, manager Allows to delete a video as specified above block/opencast:directaccessvideolink student, teacher, editingteacher, manager This capability is mainly for those, who received a shared direct access link from a Lecturer and would like to access that video. block/opencast:downloadvideo editingteacher, manager Download processed videos block/opencast:importseriesintocourse manager Can import a series into a course block/opencast:manageseriesforcourse manager Can set the default series of a course and delete series from a course block/opencast:manualimporttarget editingteacher, manager Manually import videos from other courses block/opencast:manualimportsource editingteacher, manager Manually import videos from a course block/opencast:myaddinstance user Add a block instance to the dashboard. block/opencast:sharedirectaccessvideolink editingteacher, manager This is the capability, to give to Lecturers mainly, who would like to share the direct access link to an event with students or anyone else. The feature of sharing a direct access link must be activated in the admin settings and then, Lecturers who have this capability, will have another item in the action menu of each event, which gives them a local Moodle url to share. block/opencast:startworkflow editingteacher, manager Start a preconfigured workflow for a video block/opencast:unassignevent - Allows to unassign a video from the series of the course as specified above. block/opencast:viewunpublishedvideos editingteacher, manager View the list of all videos of the course, which are available in opencast (even not published ones) block/opencast:viewusers manager View all Moodle users when trying to change the owner of a video on the global overview page Logging The execution of upload jobs are being logged, which can be viewed at Site administration -> Reports -> Logs . View the setting \"Site Errors\" instead of \"All activities\" you can view only those upload jobs, which failed. Placement This plugin is designed as block and, to be used, it will be initially added to a Moodle course by a teacher. The block shows a quick overview over the videos, which are uploaded in the block, but mainly links to a fullscreen overview page, where the full functionality of the plugin is provided. If you want to provide the plugin in every course by default without requiring, that the teachers adds it to the course, please have a look at Moodle core's $CFG->defaultblocks setting which is set in config.php only and which is described on https://github.com/moodle/moodle/blob/master/config-dist.php. As an alternative to placing the block by default, you might also want to add a link to the plugin's overview page to the Boost nav drawer. This plugin does not offer support for adding a Boost nav drawer item itself, but we would like to reference the https://moodle.org/plugins/local_boostnavigation plugin for this job. After installing local_boostnavigation to your Moodle instance, please add the following line to the local_boostnavigation | insertcustomcoursenodesusers setting: Opencast Videos|/blocks/opencast/index.php?courseid={courseid}|||editingteacher,manager|admin|OR|fa-film|opencast|grades Please take extra care, that the editingteacher,manager list of roles should match the list of roles, who are given the block/opencast:addvideo capability in your Moodle instance. After adding the Boost nav drawer item, you can also remove the block/opencast:addinstance capability from all roles, as adding the block is not really necessary anymore. Export and import settings If you want to export and import the administrator settings of the block, you can use the Admin presets block. The admin presets block can be added to the frontpage (https://yourmoodlesite.com/?redirect=0). After adding the block, you can select which settings to export or choose a file from which settings should be imported. In Moodle 4, this functionality is partly integrated into the core.","title":"About"},{"location":"block/about/#opencast-block-plugin","text":"This block can be used, to link Moodle courses to Opencast series. Users with respective privileges (in the following called instructors) can use this block, to upload videos via Moodle to Opencast. These videos are transmitted to the Opencast system by a cronjob and create an event in the respective series there. Other plugins, like the Opencast activity plugin , can be used afterwards, to provide a complete series or a bulk of videos within a course. The block can be used, to automatically set the access privileges of Moodle users enrolled in the course. All events belonging to the series are displayed in the block. This way, the instructors get an overview of all recorded lectures as well as planned ones. Further, if set up correctly, the instructors are able to restrict the visibility to Moodle groups or prevent access by students at all.","title":"Opencast block plugin"},{"location":"block/about/#installation","text":"The Opencast block plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle.","title":"Installation"},{"location":"block/about/#requirements","text":"To use the Opencast Videos block plugin, the following dependency must be installed and properly configured: Opencast API tool (tool_opencast)","title":"Requirements"},{"location":"block/about/#features","text":"The Opencast Videos block plugin provides the following key features: Upload videos to Opencast, either individually or in batches. Record videos using Opencast studio View an overview of recorded and scheduled videos within a course. Access an overview of all series and videos available to a user, regardless of the course ( Global overview ). Attach and manage transcription (subtitle) files for videos. Send process notifications about videos. Live status updates of the uploading status and workflow processing states of videos Download processed videos from Opencast Edit the video in the Opencast editor Edit and update metadata of videos and series Delete videos Create new Opencast series from Moodle Linking an existing Opencast series to the course Restrict the visibility of videos to Moodle groups or prevent access by students at all Allow teachers, to start Opencast workflows for videos Import videos from other Moodle courses via course reuse, series import or manual video bulk import Report problems to a support team with automatically including technical information In integration with the activity Opencast Video Provider : Provide the series or single videos as activity for students to watch directly in Moodle Restrict the visibility using the extensive Moodle activity access settings Perform mass actions in video lists, enabling bulk operations such as metadata updates or deletions. Offer a Workflow Configuration panel for teachers to customize workflow options during video uploads.","title":"Features"},{"location":"block/about/#configuration","text":"The block has many settings, that allow the administrator, to further specify the features or to turn them off. The configuration of the block is split up into six sections: Shared settings General settings Appearance Additional features LTI module features Import videos features","title":"Configuration"},{"location":"block/about/#capabilities","text":"There are additional capabilities, with which you can control the access to the features of the block. Those capabilities are given in an alphabetical order by the following table: Capability Role in default configuration Description block/opencast:addactivity editingteacher, manager Add Opencast Video Provider activity for a series to course block/opencast:addactivityepisode editingteacher, manager Add Opencast Video Provider activity for an episode to course block/opencast:addinstance editingteacher, manager Add a block instance to a course. block/opencast:addlti editingteacher, manager Add Opencast LTI series module to course block/opencast:addltiepisode editingteacher, manager Add Opencast LTI episode module to course block/opencast:addvideo editingteacher, manager Add a video via Moodle to opencast block/opencast:autocompleteteacherroles editingteacher, teacher One's fullname is used for fullname suggestions in a course for different forms block/opencast:canchangeownerforallvideos manager Can change the owner of videos without being the owner itself block/opencast:createseriesforcourse manager Create a new series if block/course is not yet associated with one block/opencast:defineseriesforcourse manager Change the series ID which is associated with the block instance or rather course block/opencast:deleteevent editingteacher, manager Allows to delete a video as specified above block/opencast:directaccessvideolink student, teacher, editingteacher, manager This capability is mainly for those, who received a shared direct access link from a Lecturer and would like to access that video. block/opencast:downloadvideo editingteacher, manager Download processed videos block/opencast:importseriesintocourse manager Can import a series into a course block/opencast:manageseriesforcourse manager Can set the default series of a course and delete series from a course block/opencast:manualimporttarget editingteacher, manager Manually import videos from other courses block/opencast:manualimportsource editingteacher, manager Manually import videos from a course block/opencast:myaddinstance user Add a block instance to the dashboard. block/opencast:sharedirectaccessvideolink editingteacher, manager This is the capability, to give to Lecturers mainly, who would like to share the direct access link to an event with students or anyone else. The feature of sharing a direct access link must be activated in the admin settings and then, Lecturers who have this capability, will have another item in the action menu of each event, which gives them a local Moodle url to share. block/opencast:startworkflow editingteacher, manager Start a preconfigured workflow for a video block/opencast:unassignevent - Allows to unassign a video from the series of the course as specified above. block/opencast:viewunpublishedvideos editingteacher, manager View the list of all videos of the course, which are available in opencast (even not published ones) block/opencast:viewusers manager View all Moodle users when trying to change the owner of a video on the global overview page","title":"Capabilities"},{"location":"block/about/#logging","text":"The execution of upload jobs are being logged, which can be viewed at Site administration -> Reports -> Logs . View the setting \"Site Errors\" instead of \"All activities\" you can view only those upload jobs, which failed.","title":"Logging"},{"location":"block/about/#placement","text":"This plugin is designed as block and, to be used, it will be initially added to a Moodle course by a teacher. The block shows a quick overview over the videos, which are uploaded in the block, but mainly links to a fullscreen overview page, where the full functionality of the plugin is provided. If you want to provide the plugin in every course by default without requiring, that the teachers adds it to the course, please have a look at Moodle core's $CFG->defaultblocks setting which is set in config.php only and which is described on https://github.com/moodle/moodle/blob/master/config-dist.php. As an alternative to placing the block by default, you might also want to add a link to the plugin's overview page to the Boost nav drawer. This plugin does not offer support for adding a Boost nav drawer item itself, but we would like to reference the https://moodle.org/plugins/local_boostnavigation plugin for this job. After installing local_boostnavigation to your Moodle instance, please add the following line to the local_boostnavigation | insertcustomcoursenodesusers setting: Opencast Videos|/blocks/opencast/index.php?courseid={courseid}|||editingteacher,manager|admin|OR|fa-film|opencast|grades Please take extra care, that the editingteacher,manager list of roles should match the list of roles, who are given the block/opencast:addvideo capability in your Moodle instance. After adding the Boost nav drawer item, you can also remove the block/opencast:addinstance capability from all roles, as adding the block is not really necessary anymore.","title":"Placement"},{"location":"block/about/#export-and-import-settings","text":"If you want to export and import the administrator settings of the block, you can use the Admin presets block. The admin presets block can be added to the frontpage (https://yourmoodlesite.com/?redirect=0). After adding the block, you can select which settings to export or choose a file from which settings should be imported. In Moodle 4, this functionality is partly integrated into the core.","title":"Export and import settings"},{"location":"block/additional_features/","text":"Additional Features In this section, you can configure the chunkuploader , the access to Opencast Studio, the access to Opencast Editor, the visibility of episodes, the activity module settings, the settings for transcriptions as well as some other features. Settings for the chunkuploader If you also have the chunkuploader installed, you configure it in this section. Enable Chunkupload: If enabled, it will be possible, to upload videos using the chunkupload plugin. Defaults to yes. Video file size limitation mode: Use this option to specify whether to limit the video file size. If \"Limited video size\" is selected, you can define the video size limit in the corresponding setting. Video size limit: Limits the file size of uploaded videos through the chunkupload . The default is 2.0 GB. Offer filepicker as alternative: If this option is enabled, a checkbox, labeled as 'Use Moodle default file picker to access all repositories' will be shown below the chunkupload widget. As soon as this checkbox is checked, the chunkupload widget is hidden and the Moodle default file picker is shown, giving access to all Moodle repositories. Defaults to yes. Opencast Studio integration In this section, you can enable the feature, to add Opencast Studio support to the block. The options are: Show the link to opencast studio: This option renders a button to Opencast Studio in the block content and the block overview. Defaults to no. Redirect to Studio in a new tab: If enabled, the Opencast Studio opens in a new tab. Defaults to yes. Opencast Studio Base URL: The base URL, to be used to call Opencast Studio. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Show a redirect back button in Studio: When enabled, Opencast Studio then renders an additional button \"Exit and go back\" after up- or downloading the recording. Defaults to no. Label for Studio's return button: This label works as a short description, where the return link leads to. This label will be appended to the Opencast Studio return button text. If empty, the Moodle site name will be passed as label. Defaults to empty. Custom Studio return endpoint URL: If empty, the return URL redirects back to the same Moodle Opencast block overview, where the request comes from. A custom endpoint URL will then be passed to Opencast Studio as return URL, if configured. In this case, an admin is able, to use two placeholders including [OCINSTANCEID] and [COURSEID]. Please NOTE: The URL must be relative to wwwroot . Defaults to /blocks/opencast/index.php?courseid=[COURSEID]&ocinstanceid=[OCINSTANCEID] . Custom Studio settings filename: This custom settings filename will be appended to the query, when redirecting to Opencast Studio. Afterwards Opencast Studio looks for that filename relative to its directory and reads its settings from that file. Note, that this feature requires Opencast 14.2 or later. Defaults to empty. If LTI is configured in the Opencast API plugin , the access to Opencast Studio is initiated with LTI, so that users are directly authenticated. Recommendation: It is possible, to configure Opencast Studio, to add certain ACLs to the recorded videos. It is recommended, to add the same ACLs to recorded videos as to uploaded videos via the block. Opencast Editor integration In this section, you can enable the feature, to add Opencast Editor support to the block. The options are: Show the link to opencast editor in the action menu: This option renders a button to Opencast Editor in the block content and the block overview. The other settings of this section and the LTI credentials have to be configured as well. Defaults to no. Opencast Editor Base URL: The base URL to be used, to call the Opencast Editor. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Opencast Editor Endpoint: The Opencast Editor endpoint, to access the editor. The mediapackage ID will be added at the end of that URL. Defaults to /editor-ui/index.html?mediaPackageId= . If LTI is configured in the Opencast API plugin , the access to the Opencast Editor is initiated with LTI, so that users are directly authenticated. Engage player integration If you use this configuration, the video titles in the block overview are displayed as links to the Engage player. If LTI is configured in the Opencast API plugin , the user will be authenticated with LTI before being redirected to the Engage player. URl of the Opencast Engage server : Absolute URL to the Engage server. If empty, the video titles in the overview are not linked to the Engage player. Defaults to empty. Notifications In this section, you can configure, whether teachers should receive notifications about the processing status of videos after upload. Allow event process status notification: This option allows the system, to send notifications about the status of uploaded videos from Opencast during the process to the users. This option only includes the uploader of the video in the user list. To notify all teachers of the course, the setting Notify all course teachers about the event process status should be enabled. This feature is realized through a scheduled task, that is recommended to run every minute. Defaults to no. Notify all course teachers about the event process status: With this option, apart from the uploader of the video, all the teachers of the course, where the video is uploaded from, get notified about the Opencast processing status (see the setting Allow event process status notification ). Defaults to no. Cleanup notification jobs after (Days): This setting sets a deadline in days for the jobs, that are not yet completed. After the deadline was reached, the job will be deleted despite its process state. This features helps, to remove the pending notification jobs from the list, and it is done through a scheduled task, that is recommended to run once a day. Defaults to 0. NOTE: (zero) \"0\" value disables the setting. Control episode visibility In this section, you can configure, whether the teacher is allowed, to control the visibility of an Opencast episode, after the episode has been processed. The options are: Enable visibility control: If enabled, teachers can control the visibility of an Opencast episode on upload. Defaults to yes. Allow episode visibility control after processing: If enabled, teachers can control the visibility of an Opencast episode after the episode has been processed in Opencast. Defaults to yes. Allow episode group restriction: If enabled, teachers can not only control the visibility of an Opencast episode for all course users, but can also restrict the visibility to particular course groups. Defaults to yes. Waiting time for scheduled visibility change (Minutes): It defines a minimum waiting time (in minutes), that a scheduled visibility change process should wait. This time span will be added to the current time for the scheduled video change date field in the add video form. It will also be used, to validate that field. Based on how fast the Opencast instance processes the videos, this waiting time could be configured. Defaults to 20. NOTE: When empty or (zero) \"0\", the default value is used. Opencast activity modules If you also have the Opencast Video Provider activity installed, you can configure it in this section. Enable Opencast activity: If enabled, teachers can add an activity for the series to the course. Defaults to no. Default activity title: Default title, that is used, when a new Opencast activity is added to a course. Defaults to Opencast videos . Add series module intro: If enabled, teachers can add a description to the Opencast activity series module, that is shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast activity series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Defaults to no. Enable Opencast activity for episodes: If enabled, teachers can add activities for episodes to the course. Defaults to no. Add episode module intro: If enabled, teachers can add a description to the Opencast activity episode module, that is shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, to which the Opencast activity episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast activity episode module is added to a course. Defaults to no. For the availability features, the Enable restricted access feature must be activated in the global settings. Settings for Transcription In this section, you can configure, whether transcription files can be attached to videos and different features as well as properties for those transcription files. Workflow for transcription (speech to text): This workflow is triggered, when transcription files are attached to the video. If not set, uploading and managing transcriptions is not provided. By setting this workflow, a new section to upload transcription files in the add video page as well as a new action menu item in the overview page are provided, to upload/handle the new/current transcriptions files.Defaults to empty. Workflow for delete transcription: This workflow is triggered, when a transcription is deleted. It is required, to provide the deletion feature in order for an event, to be processed correctly. NOTE: If empty, the feature will be disabled. Defaults to empty. Allow download transcriptions: If enabled, the transcription download button will be displayed in the manage transcriptions page, by which teachers are able, to download the transcriptions file. NOTE: In case you are using Opencast 13 or later, you need to make sure, that all prerequisites including LTI features and permissions to access /assets/ endpoint for LTI users, are set correctly, as it is mandatory, to perform LTI call. Defaults to yes. Transcription Service Types (Flavors): These service types (flavors) will be presented as select (dropdown) options, to select from, when uploading transcriptions. It is a key-value pair of information, by which the keys are consumed by Opencast and values are human-readable information, that describe the type of transcription service. (Multi-Language filters) In order for each value of the dropdown (select) to get translated using filters such as Multi-Language Content (v2) , each value should contain the placeholder, defined by that filter i.e. \"{mlang en}Amberscript German{mlang}{mlang de}Amberscript Deutsch{mlang}\" . Maximum number of sets to upload: Specifies, how many transcription boxes should be provided to teachers, to upload. In the case, that it is not correctly set, only one field set will be provided. Defaults to 3. Allowed transcription file extensions: Comma separated list of allowed transcription file extensions (extensions must exist in Moodle's File types list). If left blank, all extensions with the type 'HTML track files' are allowed (again see File types ). For the transcription features to work properly, the Opencast user should have the following roles: * ROLE_UI_EVENTS_DETAILS_ASSETS_EDIT * ROLE_UI_EVENTS_DETAILS_ASSETS_VIEW * ROLE_UI_EVENTS_DETAILS_MEDIA_VIEW * ROLE_GROUP_MH_DEFAULT_ORG_SYSTEM_ADMINS For the setting workflow for transcription and for the setting workflow for delete transcription the following sample Opencast workflow Republish metadata and captions may be used: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>republish-metadata-and-captions</id> <title>Republish metadata and captions</title> <tags> <tag>api</tag> </tags> <operations> <!-- Publish to engage player --> <operation id=\"publish-engage\" exception-handler-workflow=\"partial-error\" description=\"Update recording in Opencast Media Module\"> <configurations> <configuration key=\"download-source-flavors\">dublincore/*,security/*,captions/*</configuration> <configuration key=\"strategy\">merge</configuration> <configuration key=\"check-availability\">false</configuration> </configurations> </operation> <!-- Clean up work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"delete-external\">true</configuration> <configuration key=\"preserve-flavors\">security/*</configuration> </configurations> </operation> </operations> </definition> Live Status Update In this section, you can configure, whether uploading status and workflow processing states of videos will be watched and are visible. Enable live status update feature: If enabled, uploading status and workflow processing states will be watched, when they are in an ongoing process. This is done, by pulling the status information for those processes in a one-second interval. Defaults to yes. Page reload timeout (in seconds): The timeout in seconds, by which the page will be reloaded, when there is an updated status identified. If empty or less than 0, a default value of 3 seconds will be considered. NOTE: Before reloading the page, a teachers will be notified. The reload is important, so that every required backend process takes place. Defaults to 3. Workflows Privacy Notice In this section, you can configure the privacy notice for workflows in the start workflow dialog. Workflow Privacy Notice Info Text: This input is used, to provide information about privacy notice for workflows in the start workflow dialog. NOTE: If empty, no notice will be displayed. Defaults to empty. Workflows Definition List: A comma separated list of workflow definitions, by which the privacy notice is displayed. When empty, the privacy notice will be displayed for all workflows. Defaults to empty. Workflow Privacy Notice Title: A title, to be displayed in start workflow dialog. It is intended, to be configurable in order, to be adjusted by the users. When empty, default string is used. Defaults to empty. Additional features In this section, unrelated configurations are collected. Download channel: If not empty, teachers can download processed videos. The video files are served from the specified Opencast channel. Defaults to api . Direct access channel: Opencast publication channel, from which the videos are served, when accessing them directly. Leaving this option empty, will disable the feature. Defaults to empty. NOTE: It is recommended, to take further caution when using this feature, since it reveals the direct video data on the Opencast server upon accessing the link. Workflow tag: Comma separated list of tags for Opencast workflows, that can be configured by the admin and manually started by teachers. Defaults to empty. Support email: Email address, to which reports are sent, if users report problems with videos. Defaults to empty. Terms of use: If you enter some text, a checkbox with the terms of use will appear on the \"Video upload\" page. The users must accept the entered terms of use, before they can upload the video. Defaults to empty.","title":"Additional features"},{"location":"block/additional_features/#additional-features","text":"In this section, you can configure the chunkuploader , the access to Opencast Studio, the access to Opencast Editor, the visibility of episodes, the activity module settings, the settings for transcriptions as well as some other features.","title":"Additional Features"},{"location":"block/additional_features/#settings-for-the-chunkuploader","text":"If you also have the chunkuploader installed, you configure it in this section. Enable Chunkupload: If enabled, it will be possible, to upload videos using the chunkupload plugin. Defaults to yes. Video file size limitation mode: Use this option to specify whether to limit the video file size. If \"Limited video size\" is selected, you can define the video size limit in the corresponding setting. Video size limit: Limits the file size of uploaded videos through the chunkupload . The default is 2.0 GB. Offer filepicker as alternative: If this option is enabled, a checkbox, labeled as 'Use Moodle default file picker to access all repositories' will be shown below the chunkupload widget. As soon as this checkbox is checked, the chunkupload widget is hidden and the Moodle default file picker is shown, giving access to all Moodle repositories. Defaults to yes.","title":"Settings for the chunkuploader"},{"location":"block/additional_features/#opencast-studio-integration","text":"In this section, you can enable the feature, to add Opencast Studio support to the block. The options are: Show the link to opencast studio: This option renders a button to Opencast Studio in the block content and the block overview. Defaults to no. Redirect to Studio in a new tab: If enabled, the Opencast Studio opens in a new tab. Defaults to yes. Opencast Studio Base URL: The base URL, to be used to call Opencast Studio. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Show a redirect back button in Studio: When enabled, Opencast Studio then renders an additional button \"Exit and go back\" after up- or downloading the recording. Defaults to no. Label for Studio's return button: This label works as a short description, where the return link leads to. This label will be appended to the Opencast Studio return button text. If empty, the Moodle site name will be passed as label. Defaults to empty. Custom Studio return endpoint URL: If empty, the return URL redirects back to the same Moodle Opencast block overview, where the request comes from. A custom endpoint URL will then be passed to Opencast Studio as return URL, if configured. In this case, an admin is able, to use two placeholders including [OCINSTANCEID] and [COURSEID]. Please NOTE: The URL must be relative to wwwroot . Defaults to /blocks/opencast/index.php?courseid=[COURSEID]&ocinstanceid=[OCINSTANCEID] . Custom Studio settings filename: This custom settings filename will be appended to the query, when redirecting to Opencast Studio. Afterwards Opencast Studio looks for that filename relative to its directory and reads its settings from that file. Note, that this feature requires Opencast 14.2 or later. Defaults to empty. If LTI is configured in the Opencast API plugin , the access to Opencast Studio is initiated with LTI, so that users are directly authenticated. Recommendation: It is possible, to configure Opencast Studio, to add certain ACLs to the recorded videos. It is recommended, to add the same ACLs to recorded videos as to uploaded videos via the block.","title":"Opencast Studio integration"},{"location":"block/additional_features/#opencast-editor-integration","text":"In this section, you can enable the feature, to add Opencast Editor support to the block. The options are: Show the link to opencast editor in the action menu: This option renders a button to Opencast Editor in the block content and the block overview. The other settings of this section and the LTI credentials have to be configured as well. Defaults to no. Opencast Editor Base URL: The base URL to be used, to call the Opencast Editor. The base URL of the associated Opencast instance is used, if empty. Defaults to empty. Opencast Editor Endpoint: The Opencast Editor endpoint, to access the editor. The mediapackage ID will be added at the end of that URL. Defaults to /editor-ui/index.html?mediaPackageId= . If LTI is configured in the Opencast API plugin , the access to the Opencast Editor is initiated with LTI, so that users are directly authenticated.","title":"Opencast Editor integration"},{"location":"block/additional_features/#engage-player-integration","text":"If you use this configuration, the video titles in the block overview are displayed as links to the Engage player. If LTI is configured in the Opencast API plugin , the user will be authenticated with LTI before being redirected to the Engage player. URl of the Opencast Engage server : Absolute URL to the Engage server. If empty, the video titles in the overview are not linked to the Engage player. Defaults to empty.","title":"Engage player integration"},{"location":"block/additional_features/#notifications","text":"In this section, you can configure, whether teachers should receive notifications about the processing status of videos after upload. Allow event process status notification: This option allows the system, to send notifications about the status of uploaded videos from Opencast during the process to the users. This option only includes the uploader of the video in the user list. To notify all teachers of the course, the setting Notify all course teachers about the event process status should be enabled. This feature is realized through a scheduled task, that is recommended to run every minute. Defaults to no. Notify all course teachers about the event process status: With this option, apart from the uploader of the video, all the teachers of the course, where the video is uploaded from, get notified about the Opencast processing status (see the setting Allow event process status notification ). Defaults to no. Cleanup notification jobs after (Days): This setting sets a deadline in days for the jobs, that are not yet completed. After the deadline was reached, the job will be deleted despite its process state. This features helps, to remove the pending notification jobs from the list, and it is done through a scheduled task, that is recommended to run once a day. Defaults to 0. NOTE: (zero) \"0\" value disables the setting.","title":"Notifications"},{"location":"block/additional_features/#control-episode-visibility","text":"In this section, you can configure, whether the teacher is allowed, to control the visibility of an Opencast episode, after the episode has been processed. The options are: Enable visibility control: If enabled, teachers can control the visibility of an Opencast episode on upload. Defaults to yes. Allow episode visibility control after processing: If enabled, teachers can control the visibility of an Opencast episode after the episode has been processed in Opencast. Defaults to yes. Allow episode group restriction: If enabled, teachers can not only control the visibility of an Opencast episode for all course users, but can also restrict the visibility to particular course groups. Defaults to yes. Waiting time for scheduled visibility change (Minutes): It defines a minimum waiting time (in minutes), that a scheduled visibility change process should wait. This time span will be added to the current time for the scheduled video change date field in the add video form. It will also be used, to validate that field. Based on how fast the Opencast instance processes the videos, this waiting time could be configured. Defaults to 20. NOTE: When empty or (zero) \"0\", the default value is used.","title":"Control episode visibility"},{"location":"block/additional_features/#opencast-activity-modules","text":"If you also have the Opencast Video Provider activity installed, you can configure it in this section. Enable Opencast activity: If enabled, teachers can add an activity for the series to the course. Defaults to no. Default activity title: Default title, that is used, when a new Opencast activity is added to a course. Defaults to Opencast videos . Add series module intro: If enabled, teachers can add a description to the Opencast activity series module, that is shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast activity series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Defaults to no. Enable Opencast activity for episodes: If enabled, teachers can add activities for episodes to the course. Defaults to no. Add episode module intro: If enabled, teachers can add a description to the Opencast activity episode module, that is shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, to which the Opencast activity episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast activity episode module is added to a course. Defaults to no. For the availability features, the Enable restricted access feature must be activated in the global settings.","title":"Opencast activity modules"},{"location":"block/additional_features/#settings-for-transcription","text":"In this section, you can configure, whether transcription files can be attached to videos and different features as well as properties for those transcription files. Workflow for transcription (speech to text): This workflow is triggered, when transcription files are attached to the video. If not set, uploading and managing transcriptions is not provided. By setting this workflow, a new section to upload transcription files in the add video page as well as a new action menu item in the overview page are provided, to upload/handle the new/current transcriptions files.Defaults to empty. Workflow for delete transcription: This workflow is triggered, when a transcription is deleted. It is required, to provide the deletion feature in order for an event, to be processed correctly. NOTE: If empty, the feature will be disabled. Defaults to empty. Allow download transcriptions: If enabled, the transcription download button will be displayed in the manage transcriptions page, by which teachers are able, to download the transcriptions file. NOTE: In case you are using Opencast 13 or later, you need to make sure, that all prerequisites including LTI features and permissions to access /assets/ endpoint for LTI users, are set correctly, as it is mandatory, to perform LTI call. Defaults to yes. Transcription Service Types (Flavors): These service types (flavors) will be presented as select (dropdown) options, to select from, when uploading transcriptions. It is a key-value pair of information, by which the keys are consumed by Opencast and values are human-readable information, that describe the type of transcription service. (Multi-Language filters) In order for each value of the dropdown (select) to get translated using filters such as Multi-Language Content (v2) , each value should contain the placeholder, defined by that filter i.e. \"{mlang en}Amberscript German{mlang}{mlang de}Amberscript Deutsch{mlang}\" . Maximum number of sets to upload: Specifies, how many transcription boxes should be provided to teachers, to upload. In the case, that it is not correctly set, only one field set will be provided. Defaults to 3. Allowed transcription file extensions: Comma separated list of allowed transcription file extensions (extensions must exist in Moodle's File types list). If left blank, all extensions with the type 'HTML track files' are allowed (again see File types ). For the transcription features to work properly, the Opencast user should have the following roles: * ROLE_UI_EVENTS_DETAILS_ASSETS_EDIT * ROLE_UI_EVENTS_DETAILS_ASSETS_VIEW * ROLE_UI_EVENTS_DETAILS_MEDIA_VIEW * ROLE_GROUP_MH_DEFAULT_ORG_SYSTEM_ADMINS For the setting workflow for transcription and for the setting workflow for delete transcription the following sample Opencast workflow Republish metadata and captions may be used: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>republish-metadata-and-captions</id> <title>Republish metadata and captions</title> <tags> <tag>api</tag> </tags> <operations> <!-- Publish to engage player --> <operation id=\"publish-engage\" exception-handler-workflow=\"partial-error\" description=\"Update recording in Opencast Media Module\"> <configurations> <configuration key=\"download-source-flavors\">dublincore/*,security/*,captions/*</configuration> <configuration key=\"strategy\">merge</configuration> <configuration key=\"check-availability\">false</configuration> </configurations> </operation> <!-- Clean up work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"delete-external\">true</configuration> <configuration key=\"preserve-flavors\">security/*</configuration> </configurations> </operation> </operations> </definition>","title":"Settings for Transcription"},{"location":"block/additional_features/#live-status-update","text":"In this section, you can configure, whether uploading status and workflow processing states of videos will be watched and are visible. Enable live status update feature: If enabled, uploading status and workflow processing states will be watched, when they are in an ongoing process. This is done, by pulling the status information for those processes in a one-second interval. Defaults to yes. Page reload timeout (in seconds): The timeout in seconds, by which the page will be reloaded, when there is an updated status identified. If empty or less than 0, a default value of 3 seconds will be considered. NOTE: Before reloading the page, a teachers will be notified. The reload is important, so that every required backend process takes place. Defaults to 3.","title":"Live Status Update"},{"location":"block/additional_features/#workflows-privacy-notice","text":"In this section, you can configure the privacy notice for workflows in the start workflow dialog. Workflow Privacy Notice Info Text: This input is used, to provide information about privacy notice for workflows in the start workflow dialog. NOTE: If empty, no notice will be displayed. Defaults to empty. Workflows Definition List: A comma separated list of workflow definitions, by which the privacy notice is displayed. When empty, the privacy notice will be displayed for all workflows. Defaults to empty. Workflow Privacy Notice Title: A title, to be displayed in start workflow dialog. It is intended, to be configurable in order, to be adjusted by the users. When empty, default string is used. Defaults to empty.","title":"Workflows Privacy Notice"},{"location":"block/additional_features/#additional-features_1","text":"In this section, unrelated configurations are collected. Download channel: If not empty, teachers can download processed videos. The video files are served from the specified Opencast channel. Defaults to api . Direct access channel: Opencast publication channel, from which the videos are served, when accessing them directly. Leaving this option empty, will disable the feature. Defaults to empty. NOTE: It is recommended, to take further caution when using this feature, since it reveals the direct video data on the Opencast server upon accessing the link. Workflow tag: Comma separated list of tags for Opencast workflows, that can be configured by the admin and manually started by teachers. Defaults to empty. Support email: Email address, to which reports are sent, if users report problems with videos. Defaults to empty. Terms of use: If you enter some text, a checkbox with the terms of use will appear on the \"Video upload\" page. The users must accept the entered terms of use, before they can upload the video. Defaults to empty.","title":"Additional features"},{"location":"block/appearance/","text":"Appearance This section allows administrators to configure the visibility of specific columns on the overview page of the Opencast Videos block. Show publication channels: Enables or disables the display of the Publication Channel column in the video overview table. When enabled, users can see the publication channel associated with each Opencast episode. This information is also displayed on the Opencast episode deletion page. Defaults to yes. Show end date: Enables or disables the display of the End Date column in the video overview table for available and scheduled videos. When enabled, users can view the scheduled end date of each Opencast episode. Defaults to yes. Show location: Enables or disables the display of the Location column in the video overview table for available and scheduled videos. When enabled, users can view the location where each Opencast episode was recorded or scheduled. Defaults to yes.","title":"Appearance"},{"location":"block/appearance/#appearance","text":"This section allows administrators to configure the visibility of specific columns on the overview page of the Opencast Videos block. Show publication channels: Enables or disables the display of the Publication Channel column in the video overview table. When enabled, users can see the publication channel associated with each Opencast episode. This information is also displayed on the Opencast episode deletion page. Defaults to yes. Show end date: Enables or disables the display of the End Date column in the video overview table for available and scheduled videos. When enabled, users can view the scheduled end date of each Opencast episode. Defaults to yes. Show location: Enables or disables the display of the Location column in the video overview table for available and scheduled videos. When enabled, users can view the location where each Opencast episode was recorded or scheduled. Defaults to yes.","title":"Appearance"},{"location":"block/backup_restore_workflows/","text":"Configuration of the Duplicate Workflow To use the backup and restore functionality, you need to specify a duplication workflow within the Moodle settings. However, there is no out of the box workflow defined in Opencast, which allows, to duplicate a series. Own workflows If you want to create your own workflow, here are the descriptions of the general restore process: In the restore process, we first create a new opencast series for the new course. Afterwards, for each event UID of the backup a 'duplicate' workflow is started, while the new series UID is given as a configuration parameter to the start workflow call. The variable, used to store the series ID, is 'seriesId'. In our workflow definition example from above, the first workflow lms-automated-duplicate will duplicate the event and will start a new workflow for the new event. This second workflow lms-publish-duplicate then assigns the series of the new course to the new event. In order to be able to select your duplicate workflow within Moodle, you need to assign the 'api' tag to it, since the viable duplicate workflows are filtered by that. Important changes Prior to version v4.1-r1 of the plugin, the following workflows must use \"seriesID\" instead of \"seriesId\". It is highly recommended/necessary to update these variables from \"seriesID\" to \"seriesId\" in your workflows if you are planing to use this feature with the latest version of the plugin. Important Opencast database change In addition to the steps above, if the above mentioned issue is applied to your system, then you might encounter the issue of unsuccessful duplication for old videos when using the new workflows with \"seriesId\", for that to be fixed, you have to manually perform the following SQL database queries against your Opencast database: To make sure that \"oc_assets_properties\" table has any record of \"seriesID\": SELECT * FROM oc_assets_properties where property_name='seriesID'; If the above query indicates that \"seriesID\" exists, you have to perform the following SQL query to delete it from the table: DELETE FROM oc_assets_properties WHERE property_name='seriesID'; Workflow examples The workflow that is triggered by Moodle: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-automated-duplicate</id> <title>LMS Upload aus dem LMS duplizieren</title> <tags> <tag>api</tag> </tags> <operations> <!-- Create the new events --> <operation id=\"duplicate-event\" fail-on-error=\"true\" exception-handler-workflow=\"partial-error\" description=\"Duplicate Event\"> <configurations> <configuration key=\"source-flavors\">*/source,*/prepared,*/search+preview,dublincore/*,*/player+preview,*/feed+preview,*/timeline+preview,smil/*,security/xacml+series</configuration> <configuration key=\"number-of-events\">1</configuration> <configuration key=\"target-tags\">+copied</configuration> <configuration key=\"property-namespaces\">org.opencastproject.assetmanager.security, org.opencastproject.workflow.configuration</configuration> <configuration key=\"copy-number-prefix\">Kopie</configuration> </configurations> </operation> <!-- Start new workflow --> <operation id=\"start-workflow\" fail-on-error=\"true\" retry-strategy=\"hold\" max-attempts=\"5\" exception-handler-workflow=\"partial-error\" description=\"Start workflow on duplicate\"> <configurations> <configuration key=\"workflow-definition\">lms-publish-duplicate</configuration> <configuration key=\"media-package\">${duplicate_media_package_1_id}</configuration> <configuration key=\"seriesId\">${seriesId}</configuration> </configurations> </operation> <!-- Cleanup the working file repository --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition> The first workflow triggers this second workflow on the duplicated mediapackage . <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-publish-duplicate</id> <title>Publish a duplicate of an LMS upload</title> <operations> <!-- Apply the default workflow configuration --> <operation id=\"defaults\" description=\"Applying default configuration values\"> <configurations> <configuration key=\"straightToPublishing\">true</configuration> <configuration key=\"flagForCutting\">false</configuration> <configuration key=\"flagForReview\">false</configuration> <configuration key=\"flagQuality360p\">false</configuration> <configuration key=\"flagQuality480p\">false</configuration> <configuration key=\"flagQuality720p\">true</configuration> <configuration key=\"flagQuality1080p\">false</configuration> <configuration key=\"flagQuality2160p\">false</configuration> <configuration key=\"publishToEngage\">true</configuration> <configuration key=\"publishToApi\">true</configuration> <configuration key=\"publishToOaiPmh\">true</configuration> <configuration key=\"publishToYouTube\">false</configuration> <configuration key=\"publishToAws\">false</configuration> <configuration key=\"uploadedSearchPreview\">false</configuration> <configuration key=\"publishLive\">false</configuration> <configuration key=\"thumbnailType\">0</configuration> <configuration key=\"thumbnailPosition\">1</configuration> </configurations> </operation> <!-- Apply series --> <operation id=\"series\" exception-handler-workflow=\"partial-error\" description=\"Apply series metadata and acl\"> <configurations> <configuration key=\"series\">${seriesId}</configuration> <configuration key=\"attach\">*/*</configuration> <configuration key=\"apply-acl\">true</configuration> <configuration key=\"copy-metadata\">isPartOf</configuration> </configurations> </operation> <operation id=\"tag\" description=\"Tagging metadata catalogs for publication\"> <configurations> <configuration key=\"source-flavors\">dublincore/*,security/*</configuration> <configuration key=\"target-tags\">+engage-download,+archive</configuration> </configurations> </operation> <!-- Archive --> <operation id=\"snapshot\" description=\"Archive updated duplicate\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- Encode and publish --> <operation id=\"include\" description=\"Publish the recording\"> <configurations> <configuration key=\"workflow-id\">partial-publish</configuration> </configurations> </operation> <!-- Archive after publish --> <operation id=\"snapshot\" description=\"Archive publish information\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Cleanup --> <!-- --> <!-- Remove work artifacts. --> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Clean the system from work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition>","title":"Backup and restore workflows"},{"location":"block/backup_restore_workflows/#configuration-of-the-duplicate-workflow","text":"To use the backup and restore functionality, you need to specify a duplication workflow within the Moodle settings. However, there is no out of the box workflow defined in Opencast, which allows, to duplicate a series.","title":"Configuration of the Duplicate Workflow"},{"location":"block/backup_restore_workflows/#own-workflows","text":"If you want to create your own workflow, here are the descriptions of the general restore process: In the restore process, we first create a new opencast series for the new course. Afterwards, for each event UID of the backup a 'duplicate' workflow is started, while the new series UID is given as a configuration parameter to the start workflow call. The variable, used to store the series ID, is 'seriesId'. In our workflow definition example from above, the first workflow lms-automated-duplicate will duplicate the event and will start a new workflow for the new event. This second workflow lms-publish-duplicate then assigns the series of the new course to the new event. In order to be able to select your duplicate workflow within Moodle, you need to assign the 'api' tag to it, since the viable duplicate workflows are filtered by that.","title":"Own workflows"},{"location":"block/backup_restore_workflows/#important-changes","text":"Prior to version v4.1-r1 of the plugin, the following workflows must use \"seriesID\" instead of \"seriesId\". It is highly recommended/necessary to update these variables from \"seriesID\" to \"seriesId\" in your workflows if you are planing to use this feature with the latest version of the plugin.","title":"Important changes"},{"location":"block/backup_restore_workflows/#important-opencast-database-change","text":"In addition to the steps above, if the above mentioned issue is applied to your system, then you might encounter the issue of unsuccessful duplication for old videos when using the new workflows with \"seriesId\", for that to be fixed, you have to manually perform the following SQL database queries against your Opencast database: To make sure that \"oc_assets_properties\" table has any record of \"seriesID\": SELECT * FROM oc_assets_properties where property_name='seriesID'; If the above query indicates that \"seriesID\" exists, you have to perform the following SQL query to delete it from the table: DELETE FROM oc_assets_properties WHERE property_name='seriesID';","title":"Important Opencast database change"},{"location":"block/backup_restore_workflows/#workflow-examples","text":"The workflow that is triggered by Moodle: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-automated-duplicate</id> <title>LMS Upload aus dem LMS duplizieren</title> <tags> <tag>api</tag> </tags> <operations> <!-- Create the new events --> <operation id=\"duplicate-event\" fail-on-error=\"true\" exception-handler-workflow=\"partial-error\" description=\"Duplicate Event\"> <configurations> <configuration key=\"source-flavors\">*/source,*/prepared,*/search+preview,dublincore/*,*/player+preview,*/feed+preview,*/timeline+preview,smil/*,security/xacml+series</configuration> <configuration key=\"number-of-events\">1</configuration> <configuration key=\"target-tags\">+copied</configuration> <configuration key=\"property-namespaces\">org.opencastproject.assetmanager.security, org.opencastproject.workflow.configuration</configuration> <configuration key=\"copy-number-prefix\">Kopie</configuration> </configurations> </operation> <!-- Start new workflow --> <operation id=\"start-workflow\" fail-on-error=\"true\" retry-strategy=\"hold\" max-attempts=\"5\" exception-handler-workflow=\"partial-error\" description=\"Start workflow on duplicate\"> <configurations> <configuration key=\"workflow-definition\">lms-publish-duplicate</configuration> <configuration key=\"media-package\">${duplicate_media_package_1_id}</configuration> <configuration key=\"seriesId\">${seriesId}</configuration> </configurations> </operation> <!-- Cleanup the working file repository --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition> The first workflow triggers this second workflow on the duplicated mediapackage . <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <definition xmlns=\"http://workflow.opencastproject.org\"> <id>lms-publish-duplicate</id> <title>Publish a duplicate of an LMS upload</title> <operations> <!-- Apply the default workflow configuration --> <operation id=\"defaults\" description=\"Applying default configuration values\"> <configurations> <configuration key=\"straightToPublishing\">true</configuration> <configuration key=\"flagForCutting\">false</configuration> <configuration key=\"flagForReview\">false</configuration> <configuration key=\"flagQuality360p\">false</configuration> <configuration key=\"flagQuality480p\">false</configuration> <configuration key=\"flagQuality720p\">true</configuration> <configuration key=\"flagQuality1080p\">false</configuration> <configuration key=\"flagQuality2160p\">false</configuration> <configuration key=\"publishToEngage\">true</configuration> <configuration key=\"publishToApi\">true</configuration> <configuration key=\"publishToOaiPmh\">true</configuration> <configuration key=\"publishToYouTube\">false</configuration> <configuration key=\"publishToAws\">false</configuration> <configuration key=\"uploadedSearchPreview\">false</configuration> <configuration key=\"publishLive\">false</configuration> <configuration key=\"thumbnailType\">0</configuration> <configuration key=\"thumbnailPosition\">1</configuration> </configurations> </operation> <!-- Apply series --> <operation id=\"series\" exception-handler-workflow=\"partial-error\" description=\"Apply series metadata and acl\"> <configurations> <configuration key=\"series\">${seriesId}</configuration> <configuration key=\"attach\">*/*</configuration> <configuration key=\"apply-acl\">true</configuration> <configuration key=\"copy-metadata\">isPartOf</configuration> </configurations> </operation> <operation id=\"tag\" description=\"Tagging metadata catalogs for publication\"> <configurations> <configuration key=\"source-flavors\">dublincore/*,security/*</configuration> <configuration key=\"target-tags\">+engage-download,+archive</configuration> </configurations> </operation> <!-- Archive --> <operation id=\"snapshot\" description=\"Archive updated duplicate\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- Encode and publish --> <operation id=\"include\" description=\"Publish the recording\"> <configurations> <configuration key=\"workflow-id\">partial-publish</configuration> </configurations> </operation> <!-- Archive after publish --> <operation id=\"snapshot\" description=\"Archive publish information\"> <configurations> <configuration key=\"source-tags\">archive</configuration> </configurations> </operation> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Cleanup --> <!-- --> <!-- Remove work artifacts. --> <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --> <!-- Clean the system from work artifacts --> <operation id=\"cleanup\" fail-on-error=\"false\" description=\"Remove temporary processing artifacts\"> <configurations> <configuration key=\"preserve-flavors\">security/*</configuration> <configuration key=\"delete-external\">true</configuration> </configurations> </operation> </operations> </definition>","title":"Workflow examples"},{"location":"block/general_settings/","text":"General Settings This section explains the general settings, that affect the core functionality of the block. The core functionality is to upload a video file to Moodle, which is then transferred to Opencast. This is done via a cronjob, which processes all Upload Jobs in a first in first out fashion. Please make sure, that the Maximum Time limit for cron execution in Site administration -> Server -> Performance is not restricted (value of 0 means no time limit). Then the cron job is not terminated early. Settings for upload jobs In this section you can define the following settings: Limit upload job by cron: How many videos are uploaded within one run of the cronjob. If it is set to 0, the number of videos is not limited. Workflow to start after upload: Set the unique shortname of the workflow that should be started after successfully uploading a video file to Opencast. When using the default workflows it is recommended to use the Studio Upload workflow. Show workflow configurations during upload: Displays the workflow configuration panel directly within the upload form. When enabled, teachers can access additional upload processing options, allowing them to customize the Opencast workflow based on their specific needs. Allowed upload workflow configurations: Specifies a comma-separated list of workflow configuration panel element IDs that are permitted for selection during the video upload process. These workflows must already exist in the workflow configuration panel and will be available to teachers on the upload page for further processing customization. (e.g. straightToPublishing,whisper_de,vosk_en ) Note: if empty, all elements in the workflow configuration panel such as input and select elements will be provided to the teachers. Publish to Engage: Select whether the videos should be published to the engage player. This results in the configuration field 'publishToEngage' to be set to true or false for the called workflow (only useful if the selected workflow supports this). When using the default workflows this checkbox needs to be ticked. Ingest upload: Use the Opencast ingest service for uploading videos. For this to work, you must have configured ingest nodes in your Opencast instance. Reuse existing uploads: Select if multiple videos with the same content hash are uploaded to opencast only once. This is a legacy feature: Not recommended to be used. With our further development we strive to create one series per course. Allow unassign from course others a 'delete' icon to the teacher, which will unassign the event from the series of the course. This is a legacy feature: Only useful if events should not actually be deleted! Workflow to start before event is be deleted: Setup the unique shortname of the workflow that should be started for deleting a video file in Opencast. If a workflow is selected, a 'delete' icon is offered to the teacher, which will actually delete the event in the Opencast system. When using the default workflows it is recommended to use the Delete workflow. We recommend to use only one of the two previous 'delete' options! With Opencast 10, this option is usually not required anymore since videos are automatically retracted before deletion. Delete videofile from Moodle: This setting causes the Moodle system to delete the file of the uploaded video as soon as possible. If set to false, the video file will remain in the Moodle system in the draft area until a cron job deletes it (usually some days later). Allowed file extensions: With 'Allowed file extensions' you can specify which file extensions users can upload as videos. The extensions must exist as file types in Moodle under Site administration -> Server -> File types. If left blank all of Moodle's file types in the type group 'video' are allowed. Maximum number of series: Specifies how many series can be assigned to a course. Teachers won't be able to add/import more series if the maximum number is reached. Settings for a block instance In this section the number of videos that is displayed can be configured. Number of videos: Maximum number of videos to display in the block. Group and series In this section it can be configured how groups and series created by Moodle are named in Opencast. In both cases the options [COURSEID] and [COURSENAME] are available which are placeholders for the numeric course ID and for the course name. The configuration options are: Create a group: If checked, a group is created during the upload. This is a legacy feature, which assigns each uploaded event to a Opencast group. Group name: Group to which the video is added. Important: The group name length is restricted to 128 Bytes. You can use the placeholders which are automatically replaced. Series name: Series to which the video is added. You can use the placeholders which are automatically replaced. Roles In this section you can define, which ACL roles are added to a video. You can add and delete roles and define the respective actions for those roles. That might be relevant only, if you want to control the access privileges for your Opencast videos via Moodle. In this case, it is recommended, that you set up the moodle-role-provider for your Opencast system (https://docs.opencast.org/develop/admin/configuration/security.user.moodle/). It is possible, to select, whether roles should be permanent or not. Non-permanent roles can be used, to manually change the access of certain user groups (e.g. students) for each video. Roles, which are not permanent, will be removed, if the video is hidden in the block overview, and added again, if the video is made visible. To use this feature, you need to define at least one non-permanent role-action combination and the name of Opencast workflow for republishing metadata. Use the setting Workflow for updating metadata , to specify that workflow. When using the default Opencast workflows that is Republish Metadata . In the video overview of the block, the instructors are able to change the visibility of each video. This process takes some time, since the Opencast workflow needs to finish. However, the icon to do so, is only present, if the two requirements mentioned above are met! In the ACL roles you can use placeholders . To give an example for roles, which also meets the LTI standard and which is used by the plugin by default, you can use the following setting: Role Actions Permanent ROLE_ADMIN write,read Yes ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS write,read Yes [COURSEID]_Instructor write,read Yes [COURSEGROUPID]_Learner read No You can also specify an owner role, that identifies the owner of a video/series, with the setting ACL owner role . The role must also be specified in the roles table. The role must be permanent and include a user-related placeholder, e.g. ROLE_OWNER_[USER_EMAIL] . It should not include any course-related placeholders. Event Metadata In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for uploading videos to Opencast. By default, instructors have to provide the title of a video. Series Metadata In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for creating Opencast series. By default, instructors have to provide the title, the rights holder and the license of a series. Placeholders For some settings, you can use placeholders, that are replaced, when dealing with names for Opencast (e.g. when creating a series). The following placeholders are available: [COURSEID] : Will be replaced by the id of the course. [COURSENAME] : Will be replaced by the name of the course. [COURSEGROUPID] : Should only be used in non-permanent roles. Depending on the visibility of the event, it is either replaced by the id of the course or (in case the visibility is restricted by groups) it is replaced by a 'G' followed by the id of the group. In case that multiple groups are selected in the visibility dialog, one ACL rule for every group is created. The basic role including the course id is removed in the case of group visibility. [USERNAME] :: Will be replaced by the name of the user who uploaded a video or created a series. Roles with this placeholder must be permanent. [USERNAME_LOW] : Username in lowercase. [USERNAME_UP] : Username in uppercase. [USER_EMAIL] : Email of the user. [USER_EXTERNAL_ID] : External ID of the user.","title":"General Settings"},{"location":"block/general_settings/#general-settings","text":"This section explains the general settings, that affect the core functionality of the block. The core functionality is to upload a video file to Moodle, which is then transferred to Opencast. This is done via a cronjob, which processes all Upload Jobs in a first in first out fashion. Please make sure, that the Maximum Time limit for cron execution in Site administration -> Server -> Performance is not restricted (value of 0 means no time limit). Then the cron job is not terminated early.","title":"General Settings"},{"location":"block/general_settings/#settings-for-upload-jobs","text":"In this section you can define the following settings: Limit upload job by cron: How many videos are uploaded within one run of the cronjob. If it is set to 0, the number of videos is not limited. Workflow to start after upload: Set the unique shortname of the workflow that should be started after successfully uploading a video file to Opencast. When using the default workflows it is recommended to use the Studio Upload workflow. Show workflow configurations during upload: Displays the workflow configuration panel directly within the upload form. When enabled, teachers can access additional upload processing options, allowing them to customize the Opencast workflow based on their specific needs. Allowed upload workflow configurations: Specifies a comma-separated list of workflow configuration panel element IDs that are permitted for selection during the video upload process. These workflows must already exist in the workflow configuration panel and will be available to teachers on the upload page for further processing customization. (e.g. straightToPublishing,whisper_de,vosk_en ) Note: if empty, all elements in the workflow configuration panel such as input and select elements will be provided to the teachers. Publish to Engage: Select whether the videos should be published to the engage player. This results in the configuration field 'publishToEngage' to be set to true or false for the called workflow (only useful if the selected workflow supports this). When using the default workflows this checkbox needs to be ticked. Ingest upload: Use the Opencast ingest service for uploading videos. For this to work, you must have configured ingest nodes in your Opencast instance. Reuse existing uploads: Select if multiple videos with the same content hash are uploaded to opencast only once. This is a legacy feature: Not recommended to be used. With our further development we strive to create one series per course. Allow unassign from course others a 'delete' icon to the teacher, which will unassign the event from the series of the course. This is a legacy feature: Only useful if events should not actually be deleted! Workflow to start before event is be deleted: Setup the unique shortname of the workflow that should be started for deleting a video file in Opencast. If a workflow is selected, a 'delete' icon is offered to the teacher, which will actually delete the event in the Opencast system. When using the default workflows it is recommended to use the Delete workflow. We recommend to use only one of the two previous 'delete' options! With Opencast 10, this option is usually not required anymore since videos are automatically retracted before deletion. Delete videofile from Moodle: This setting causes the Moodle system to delete the file of the uploaded video as soon as possible. If set to false, the video file will remain in the Moodle system in the draft area until a cron job deletes it (usually some days later). Allowed file extensions: With 'Allowed file extensions' you can specify which file extensions users can upload as videos. The extensions must exist as file types in Moodle under Site administration -> Server -> File types. If left blank all of Moodle's file types in the type group 'video' are allowed. Maximum number of series: Specifies how many series can be assigned to a course. Teachers won't be able to add/import more series if the maximum number is reached.","title":"Settings for upload jobs"},{"location":"block/general_settings/#settings-for-a-block-instance","text":"In this section the number of videos that is displayed can be configured. Number of videos: Maximum number of videos to display in the block.","title":"Settings for a block instance"},{"location":"block/general_settings/#group-and-series","text":"In this section it can be configured how groups and series created by Moodle are named in Opencast. In both cases the options [COURSEID] and [COURSENAME] are available which are placeholders for the numeric course ID and for the course name. The configuration options are: Create a group: If checked, a group is created during the upload. This is a legacy feature, which assigns each uploaded event to a Opencast group. Group name: Group to which the video is added. Important: The group name length is restricted to 128 Bytes. You can use the placeholders which are automatically replaced. Series name: Series to which the video is added. You can use the placeholders which are automatically replaced.","title":"Group and series"},{"location":"block/general_settings/#roles","text":"In this section you can define, which ACL roles are added to a video. You can add and delete roles and define the respective actions for those roles. That might be relevant only, if you want to control the access privileges for your Opencast videos via Moodle. In this case, it is recommended, that you set up the moodle-role-provider for your Opencast system (https://docs.opencast.org/develop/admin/configuration/security.user.moodle/). It is possible, to select, whether roles should be permanent or not. Non-permanent roles can be used, to manually change the access of certain user groups (e.g. students) for each video. Roles, which are not permanent, will be removed, if the video is hidden in the block overview, and added again, if the video is made visible. To use this feature, you need to define at least one non-permanent role-action combination and the name of Opencast workflow for republishing metadata. Use the setting Workflow for updating metadata , to specify that workflow. When using the default Opencast workflows that is Republish Metadata . In the video overview of the block, the instructors are able to change the visibility of each video. This process takes some time, since the Opencast workflow needs to finish. However, the icon to do so, is only present, if the two requirements mentioned above are met! In the ACL roles you can use placeholders . To give an example for roles, which also meets the LTI standard and which is used by the plugin by default, you can use the following setting: Role Actions Permanent ROLE_ADMIN write,read Yes ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS write,read Yes [COURSEID]_Instructor write,read Yes [COURSEGROUPID]_Learner read No You can also specify an owner role, that identifies the owner of a video/series, with the setting ACL owner role . The role must also be specified in the roles table. The role must be permanent and include a user-related placeholder, e.g. ROLE_OWNER_[USER_EMAIL] . It should not include any course-related placeholders.","title":"Roles"},{"location":"block/general_settings/#event-metadata","text":"In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for uploading videos to Opencast. By default, instructors have to provide the title of a video.","title":"Event Metadata"},{"location":"block/general_settings/#series-metadata","text":"In this section, it can be configured, which metadata instructors can provide as well as which metadata instructors have to provide, for creating Opencast series. By default, instructors have to provide the title, the rights holder and the license of a series.","title":"Series Metadata"},{"location":"block/general_settings/#placeholders","text":"For some settings, you can use placeholders, that are replaced, when dealing with names for Opencast (e.g. when creating a series). The following placeholders are available: [COURSEID] : Will be replaced by the id of the course. [COURSENAME] : Will be replaced by the name of the course. [COURSEGROUPID] : Should only be used in non-permanent roles. Depending on the visibility of the event, it is either replaced by the id of the course or (in case the visibility is restricted by groups) it is replaced by a 'G' followed by the id of the group. In case that multiple groups are selected in the visibility dialog, one ACL rule for every group is created. The basic role including the course id is removed in the case of group visibility. [USERNAME] :: Will be replaced by the name of the user who uploaded a video or created a series. Roles with this placeholder must be permanent. [USERNAME_LOW] : Username in lowercase. [USERNAME_UP] : Username in uppercase. [USER_EMAIL] : Email of the user. [USER_EXTERNAL_ID] : External ID of the user.","title":"Placeholders"},{"location":"block/global_overview/","text":"Global overview The Opencast block allows teachers, to manage their series and videos in a single place. If the block is added to the Dashboard page of a user, the user can see a list of all series he has read access to. For each series, it is shown in which course it is used and which mod_opencast activities are associated with it. The user can also inspect, which videos are contained in a series and manage them. Furthermore, new videos can be added to a series. Owner concept If enabled, series and videos can be owned by user by setting user-specific ACLs. Owning a series/video allows the user, to always manage it in the global overview. The series/videos are even shown, if they are not used in any Moodle course. The ownership can be transferred to another user.","title":"Global overview"},{"location":"block/global_overview/#global-overview","text":"The Opencast block allows teachers, to manage their series and videos in a single place. If the block is added to the Dashboard page of a user, the user can see a list of all series he has read access to. For each series, it is shown in which course it is used and which mod_opencast activities are associated with it. The user can also inspect, which videos are contained in a series and manage them. Furthermore, new videos can be added to a series.","title":"Global overview"},{"location":"block/global_overview/#owner-concept","text":"If enabled, series and videos can be owned by user by setting user-specific ACLs. Owning a series/video allows the user, to always manage it in the global overview. The series/videos are even shown, if they are not used in any Moodle course. The ownership can be transferred to another user.","title":"Owner concept"},{"location":"block/import_videos_features/","text":"Import Videos Features In this section, the backup and restore workflow can be configured as well as the options for the import of videos into a course. Allow video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course. Defaults to yes. There are two modes for importing videos (see the setting Import mode ): * Duplicating Events: A new series is created during the import and all events are duplicated. By default, Opencast does not support this feature. Thus two additional workflows need to be configured. One workflow to duplicate an event in Opencast and another workflow to publish this duplicate. With the default Opencast workflows the example workflows can be used. * ACL Change: The existing series will be connected with the target course, so that all events are shared between the courses. This avoids duplicated series, but changes are always reflected in both courses. Workflow for duplicating events: This workflow is needed, for importing Opencast events from one course into another, when Duplicating Events for the setting Import mode is selected. If not set, it is not possible, to import Opencast events. If a valid duplication workflow is selected, the following configurations are available: * Allow video import within Moodle core course import wizard: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using the Moodle core course import wizard. Within the wizard, there is an additional option shown to import the videos which have been uploaded within the Opencast block in the other course. Using this feature, the teacher can import all videos from another course as bulk, but he cannot select individual videos. If Duplicating Events is selected as the Import mode , then the videos are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. In case of ACL Change selected as Import mode , the seriesid of the course being imported is used, but the ACL of the series and its videos will be changed, in order to grant access within the new course. Defaults to yes. * Default value for opencast import videos' checkbox: Defines the default value for the checkbox, to include Opencast videos in Moodle core import wizard, which at the end will be used, to include or not to include videos. This option is meant to help teachers, who prefer to use \"Jump to final step\" button and skip the Moodle core import wizard steps. Defaults to Unchecked . * Allow manual video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using a dedicated Opencast video import wizard. This feature is offered on the Opencast block overview page. In Duplicating Events import mode, the teacher can import all or a subset of videos from another course as bulk. In ACL Change import mode, the seriesid of the target course will be used in the new course. Additionally, the ACLs of the series itself and all of its videos will be changed, in order to grant access to them within the new course. Unlike in Duplicating Events mode, there is no manual selection of videos available within the provided wizard. Please note, that there are corresponding capabilities block/opencast:manualimporttarget and block/opencast:manualimportsource for this feature, which control, who can import which courses to which courses. By default, managers and editing teachers have this capability and can use the feature as soon as it is enabled here. The videos, which are selected within the import wizard, are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. Defaults to no. * Handle Opencast series modules during manual video import: If enabled, teachers can handle Opencast series modules, which were created with the \"Add LTI series module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to the course series of the old course. The series module is instantly handled after the import wizard is finished. Defaults to no. * Handle Opencast episode modules during manual video import: If enabled, teachers can handle Opencast episode modules, which were created with the \"Add LTI episode module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to videos in the old course. The episode modules are handled by an ad-hoc task in Moodle and will be fixed in the course with a short delay. Please note, that this mechanism relies on the fact, that the Opencast Duplication workflow sets a workflow instance configuration field 'duplicate_media_package_1_id' which contains the episode ID of the duplicated episode. If the workflow does not set this configuration field, this feature will always fail. Defaults to no.","title":"Import Videos Features"},{"location":"block/import_videos_features/#import-videos-features","text":"In this section, the backup and restore workflow can be configured as well as the options for the import of videos into a course. Allow video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course. Defaults to yes. There are two modes for importing videos (see the setting Import mode ): * Duplicating Events: A new series is created during the import and all events are duplicated. By default, Opencast does not support this feature. Thus two additional workflows need to be configured. One workflow to duplicate an event in Opencast and another workflow to publish this duplicate. With the default Opencast workflows the example workflows can be used. * ACL Change: The existing series will be connected with the target course, so that all events are shared between the courses. This avoids duplicated series, but changes are always reflected in both courses. Workflow for duplicating events: This workflow is needed, for importing Opencast events from one course into another, when Duplicating Events for the setting Import mode is selected. If not set, it is not possible, to import Opencast events. If a valid duplication workflow is selected, the following configurations are available: * Allow video import within Moodle core course import wizard: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using the Moodle core course import wizard. Within the wizard, there is an additional option shown to import the videos which have been uploaded within the Opencast block in the other course. Using this feature, the teacher can import all videos from another course as bulk, but he cannot select individual videos. If Duplicating Events is selected as the Import mode , then the videos are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. In case of ACL Change selected as Import mode , the seriesid of the course being imported is used, but the ACL of the series and its videos will be changed, in order to grant access within the new course. Defaults to yes. * Default value for opencast import videos' checkbox: Defines the default value for the checkbox, to include Opencast videos in Moodle core import wizard, which at the end will be used, to include or not to include videos. This option is meant to help teachers, who prefer to use \"Jump to final step\" button and skip the Moodle core import wizard steps. Defaults to Unchecked . * Allow manual video import: If enabled, teachers can import existing video files from other Moodle courses to their Moodle course by using a dedicated Opencast video import wizard. This feature is offered on the Opencast block overview page. In Duplicating Events import mode, the teacher can import all or a subset of videos from another course as bulk. In ACL Change import mode, the seriesid of the target course will be used in the new course. Additionally, the ACLs of the series itself and all of its videos will be changed, in order to grant access to them within the new course. Unlike in Duplicating Events mode, there is no manual selection of videos available within the provided wizard. Please note, that there are corresponding capabilities block/opencast:manualimporttarget and block/opencast:manualimportsource for this feature, which control, who can import which courses to which courses. By default, managers and editing teachers have this capability and can use the feature as soon as it is enabled here. The videos, which are selected within the import wizard, are duplicated in Opencast by an ad-hoc task in Moodle and will show up in the course's video list with a short delay. Defaults to no. * Handle Opencast series modules during manual video import: If enabled, teachers can handle Opencast series modules, which were created with the \"Add LTI series module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to the course series of the old course. The series module is instantly handled after the import wizard is finished. Defaults to no. * Handle Opencast episode modules during manual video import: If enabled, teachers can handle Opencast episode modules, which were created with the \"Add LTI episode module\" feature and which relate to the videos which are imported. This especially cleans up modules, which have been imported from one course to another course, but which still link to videos in the old course. The episode modules are handled by an ad-hoc task in Moodle and will be fixed in the course with a short delay. Please note, that this mechanism relies on the fact, that the Opencast Duplication workflow sets a workflow instance configuration field 'duplicate_media_package_1_id' which contains the episode ID of the duplicated episode. If the workflow does not set this configuration field, this feature will always fail. Defaults to no.","title":"Import Videos Features"},{"location":"block/lti_module_features/","text":"LTI Module Features In this section, you can enable a feature, to let teachers add an Opencast LTI module to the course. This requires, that LTI is configured in Opencast. Add Opencast LTI series modules to courses These settings are specific to the LTI module for Opencast series. This LTI series module will be pointing to the course's Opencast series. To be able to use this feature, you have to create a preconfigured LTI tool, for showing Opencast series first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Series Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=ltitools/series/index.html In the plugin the settings options are: Enable \u201dAdd LTI series module\": If enabled, teachers can add an Opencast LTI series module to a course. This LTI series module will be pointing to the course's Opencast series. Defaults to no. Default LTI series module title: The default title to be used, when a new Opencast LTI series module is added to a course. Default to Opencast videos . Preconfigured LTI tool for series modules: The preconfigured LTI tool to be used, when a new Opencast LTI series module is added to a course. Add series module intro: If enabled, teachers can add an intro to the Opencast LTI series module. This intro will be shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast LTI series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Please note: This feature is only available, if availability is globally enabled on the Advanced features admin setting page. Defaults to no. Add Opencast LTI episode modules to courses These settings are specific to the LTI module for Opencast episodes. These LTI episode modules will be pointing to an Opencast episode. To be able, to use this feature, you have to create a preconfigured LTI tool, for showing Opencast episodes first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Episodes Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=paella/ui/watch.html or tool=theodul/ui/core.html In the plugin the settings options are: Enable \u201dAdd LTI episode module\": If enabled, teachers can add an Opencast LTI episode module to a course. This LTI episode module will be pointing to an Opencast episode. Defaults to no. Preconfigured LTI tool for episode modules: The preconfigured LTI tool to be used when a new Opencast LTI episode module is added to a course. Add episode module intro: If enabled, teachers can add an intro to the Opencast LTI episode module. This intro will be shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, which the Opencast LTI episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI episode module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page. Defaults to no.","title":"LTI Module Features"},{"location":"block/lti_module_features/#lti-module-features","text":"In this section, you can enable a feature, to let teachers add an Opencast LTI module to the course. This requires, that LTI is configured in Opencast.","title":"LTI Module Features"},{"location":"block/lti_module_features/#add-opencast-lti-series-modules-to-courses","text":"These settings are specific to the LTI module for Opencast series. This LTI series module will be pointing to the course's Opencast series. To be able to use this feature, you have to create a preconfigured LTI tool, for showing Opencast series first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Series Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=ltitools/series/index.html In the plugin the settings options are: Enable \u201dAdd LTI series module\": If enabled, teachers can add an Opencast LTI series module to a course. This LTI series module will be pointing to the course's Opencast series. Defaults to no. Default LTI series module title: The default title to be used, when a new Opencast LTI series module is added to a course. Default to Opencast videos . Preconfigured LTI tool for series modules: The preconfigured LTI tool to be used, when a new Opencast LTI series module is added to a course. Add series module intro: If enabled, teachers can add an intro to the Opencast LTI series module. This intro will be shown on the course overview page. Defaults to no. Choose series module section: If enabled, teachers can choose the section, to which the Opencast LTI series module will be added to. Defaults to no. Set series module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI series module is added to a course. Please note: This feature is only available, if availability is globally enabled on the Advanced features admin setting page. Defaults to no.","title":"Add Opencast LTI series modules to courses"},{"location":"block/lti_module_features/#add-opencast-lti-episode-modules-to-courses","text":"These settings are specific to the LTI module for Opencast episodes. These LTI episode modules will be pointing to an Opencast episode. To be able, to use this feature, you have to create a preconfigured LTI tool, for showing Opencast episodes first. For the preconfigured LTI tool the following settings need to be set: Tool name: The name of the preconfigured LTI tool. For example: Opencast Episodes Tool URL: The URL of the Opencast presentation server followed by /lti . For example: https://develop.opencast.org/lti Consumer key: The LTI consumer key. Shared secret: The LTI shared secret. Custom parameters: tool=paella/ui/watch.html or tool=theodul/ui/core.html In the plugin the settings options are: Enable \u201dAdd LTI episode module\": If enabled, teachers can add an Opencast LTI episode module to a course. This LTI episode module will be pointing to an Opencast episode. Defaults to no. Preconfigured LTI tool for episode modules: The preconfigured LTI tool to be used when a new Opencast LTI episode module is added to a course. Add episode module intro: If enabled, teachers can add an intro to the Opencast LTI episode module. This intro will be shown on the course overview page. Defaults to no. Choose episode module section: If enabled, teachers can choose the section, which the Opencast LTI episode module will be added to. Defaults to no. Set episode module availability: If enabled, teachers can set the availability conditions, when a new Opencast LTI episode module is added to a course. Please note: This feature is only available if availability is globally enabled on the Advanced features admin setting page. Defaults to no.","title":"Add Opencast LTI episode modules to courses"},{"location":"block/shared_settings/","text":"Shared Settings This section describes the shared settings available in the Opencast Videos block plugin. Cache valid time: Specifies the duration (in seconds) before the cached video data for each course is refreshed. The Opencast Videos block plugin utilizes caching to accelerate the display of video data in the embedded block overview in a course. It is important to note that the cache for a course is automatically invalidated when the fullscreen overview page of the block is accessed within that course. Moodle to Opencast upload timeout: Defines the maximum duration (in seconds) that a single video upload process is allowed to run during the background uploading task. Adjust this setting based on network conditions and server capacity to ensure successful uploads without interruptions. Limit failed upload attempts: Sets a maximum number of failed upload attempts before the upload process is removed from the upload queue. When an upload exceeds the specified failure limit, it is moved to an \"Archiving\" state, where upload data is retained but requires manual intervention by teachers or managers to reinitiate the upload process.","title":"Shared Settings"},{"location":"block/shared_settings/#shared-settings","text":"This section describes the shared settings available in the Opencast Videos block plugin. Cache valid time: Specifies the duration (in seconds) before the cached video data for each course is refreshed. The Opencast Videos block plugin utilizes caching to accelerate the display of video data in the embedded block overview in a course. It is important to note that the cache for a course is automatically invalidated when the fullscreen overview page of the block is accessed within that course. Moodle to Opencast upload timeout: Defines the maximum duration (in seconds) that a single video upload process is allowed to run during the background uploading task. Adjust this setting based on network conditions and server capacity to ensure successful uploads without interruptions. Limit failed upload attempts: Sets a maximum number of failed upload attempts before the upload process is removed from the upload queue. When an upload exceeds the specified failure limit, it is moved to an \"Archiving\" state, where upload data is retained but requires manual intervention by teachers or managers to reinitiate the upload process.","title":"Shared Settings"},{"location":"chunkupload/about/","text":"Opencast chunkupload plugin The Chunkupload plugin enables users to upload video files to Opencast in smaller, manageable chunks. This approach bypasses the Moodle course upload size limit, allowing users to successfully upload large files without interruptions or failures due to size restrictions. Installation The Opencast Chunkupload plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle. Requirements To ensure the proper functioning of the Opencast Chunkupload plugin, the following requirements must be met: Minimum Moodle Version: 3.7 Opencast Videos block (block_opencast) : This plugin must be installed and properly configured to enable chunked video uploads. Configuration For detailed configuration instructions, refer to the settings page . Chunkupload in Action Once the plugin is installed and correctly configured, users will see a new chunked file uploader element available exclusively on the \"Add video\" page. The uploader interface appears as shown below:","title":"About"},{"location":"chunkupload/about/#opencast-chunkupload-plugin","text":"The Chunkupload plugin enables users to upload video files to Opencast in smaller, manageable chunks. This approach bypasses the Moodle course upload size limit, allowing users to successfully upload large files without interruptions or failures due to size restrictions.","title":"Opencast chunkupload plugin"},{"location":"chunkupload/about/#installation","text":"The Opencast Chunkupload plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle.","title":"Installation"},{"location":"chunkupload/about/#requirements","text":"To ensure the proper functioning of the Opencast Chunkupload plugin, the following requirements must be met: Minimum Moodle Version: 3.7 Opencast Videos block (block_opencast) : This plugin must be installed and properly configured to enable chunked video uploads.","title":"Requirements"},{"location":"chunkupload/about/#configuration","text":"For detailed configuration instructions, refer to the settings page .","title":"Configuration"},{"location":"chunkupload/about/#chunkupload-in-action","text":"Once the plugin is installed and correctly configured, users will see a new chunked file uploader element available exclusively on the \"Add video\" page. The uploader interface appears as shown below:","title":"Chunkupload in Action"},{"location":"chunkupload/settings/","text":"Settings The configuration settings for the Opencast Chunkupload plugin are divided into two parts: general plugin settings and auxiliary settings within the Opencast Videos block ( block_opencast ) plugin. General settings: The Opencast Chunkupload plugin provides several configurable options for administrators. Chunk size (MB): Defines the size (in MB) of each video file chunk to be uploaded. Duration until unused token is deleted: Specifies the time period after which unused upload tokens will be deleted automatically. Duration until uncompleted file upload is deleted: Specifies the duration after which incomplete file uploads will be removed. Duration until completed file upload is deleted: Sets the retention period for successfully uploaded files before they are automatically deleted as part of the cleanup process. Auxiliary Settings in Opencast Videos Block Plugin When the Chunkupload plugin is installed, the Opencast Videos block plugin ( block_opencast ) automatically includes a dedicated settings section under the Additional features section. This section, titled \"Settings for the chunkuploader\" , allows administrators to control Chunkupload functionality within the block plugin. Enable Chunkupload: Enables or disables the ability to upload videos using the chunkupload plugin. Video file size limitation mode: Determines whether to enforce a file size limit. If \"Limited video size\" is selected, the administrator can define the limit in the subsequent setting. Video size limit: Specifies the maximum allowed video file size if the limitation mode is enabled. Offer filepicker as alternative: If enabled, users can choose to use the regular Moodle file picker instead of the chunkupload functionality via a checkbox.","title":"Settings"},{"location":"chunkupload/settings/#settings","text":"The configuration settings for the Opencast Chunkupload plugin are divided into two parts: general plugin settings and auxiliary settings within the Opencast Videos block ( block_opencast ) plugin.","title":"Settings"},{"location":"chunkupload/settings/#general-settings","text":"The Opencast Chunkupload plugin provides several configurable options for administrators. Chunk size (MB): Defines the size (in MB) of each video file chunk to be uploaded. Duration until unused token is deleted: Specifies the time period after which unused upload tokens will be deleted automatically. Duration until uncompleted file upload is deleted: Specifies the duration after which incomplete file uploads will be removed. Duration until completed file upload is deleted: Sets the retention period for successfully uploaded files before they are automatically deleted as part of the cleanup process.","title":"General settings:"},{"location":"chunkupload/settings/#auxiliary-settings-in-opencast-videos-block-plugin","text":"When the Chunkupload plugin is installed, the Opencast Videos block plugin ( block_opencast ) automatically includes a dedicated settings section under the Additional features section. This section, titled \"Settings for the chunkuploader\" , allows administrators to control Chunkupload functionality within the block plugin. Enable Chunkupload: Enables or disables the ability to upload videos using the chunkupload plugin. Video file size limitation mode: Determines whether to enforce a file size limit. If \"Limited video size\" is selected, the administrator can define the limit in the subsequent setting. Video size limit: Specifies the maximum allowed video file size if the limitation mode is enabled. Offer filepicker as alternative: If enabled, users can choose to use the regular Moodle file picker instead of the chunkupload functionality via a checkbox.","title":"Auxiliary Settings in Opencast Videos Block Plugin"},{"location":"devs/guides/","text":"Development Guide If you're interested in contributing to the Moodle Opencast plugins, this guide provides essential information to help you understand the development environment and processes. Source Control Repositories All Moodle Opencast plugins are hosted on GitHub under the Opencast Moodle Plugins organization . Development Lifecycle Understanding the development lifecycle of Moodle Opencast plugins is crucial for efficient collaboration. The process typically follows these stages: Issue Creation/Selection: Development begins with an issue in the relevant GitHub repository of the targeted plugin. If you're working on an issue (e.g., bug fix or feature request), ensure a detailed description is provided before starting development. If the description is unclear, ask the issue creator for clarification. Always use the appropriate issue template (e.g., bug report, feature request). Assign the issue to yourself to improve tracking and management. For discussions or questions, use GitHub Discussions, the Element Community Chat, or contact the repository manager. Development Phase: Once an issue is assigned, follow best practices to ensure maintainability and compatibility with other plugins. Key considerations include: Opencast API Class Usage: The Opencast PHP Library is integrated into the tool_opencast plugin. Use the opencastapi property of the api class for API calls instead of direct cURL functions, which are deprecated. Example usage: ```php use tool_opencast\\local\\api; use tool_opencast\\exception\\opencast_api_response_exception; // Exception handling class ... $api = api::get_instance($ocinstanceid); $response = $api->opencastapi->eventsApi->getAll(...); $code = $response['code']; if ($code != 200) { throw new opencast_api_response_exception($response); } ... ``` Note: More details on the Opencast API Library can be found here . Unified Exception Handling: From tool_opencast version 4.5-r4 , the opencast_api_response_exception class is introduced to handle API call exceptions in a centralized way. Therefore, using it is highly encouraged! Plugin Interconnectivity: Changes in one plugin may impact others. Before making changes, understand how plugins interact, especially the api class in tool_opencast , which is widely used across all plugins. Coding Standards: All plugins follow Moodle's coding standards, enforced through moodle-plugin-ci in GitHub Actions. Always create a pull request instead of directly pushing changes in order to make sure the checks are passed. A PR is only reviewed if all automated checks pass. Automated Testing: If your changes affect existing functionality or introduce new features, include appropriate PHPUnit or Behat tests to ensure stability. Creating Pull Requests: Every change must be submitted via a pull request (PR) against the main branch of the targeted plugin. Add relevant labels to PRs and issues. Assign a reviewer only when all CI checks pass . Ensure PR descriptions are comprehensive, covering dependencies, test scenarios, and additional context. Address reviewer feedback promptly to facilitate merging. Developer Group Meetings Participation: The Moodle Opencast community holds a developer group meeting every second Friday of the month, alternating with core meetings. Participation is encouraged to stay informed about the latest developments, roadmaps, and to ask questions. For details, check the official community calendar and look for [Moodle] Dev Group Meeting .","title":"Contribution Guidelines"},{"location":"devs/guides/#development-guide","text":"If you're interested in contributing to the Moodle Opencast plugins, this guide provides essential information to help you understand the development environment and processes.","title":"Development Guide"},{"location":"devs/guides/#source-control-repositories","text":"All Moodle Opencast plugins are hosted on GitHub under the Opencast Moodle Plugins organization .","title":"Source Control Repositories"},{"location":"devs/guides/#development-lifecycle","text":"Understanding the development lifecycle of Moodle Opencast plugins is crucial for efficient collaboration. The process typically follows these stages: Issue Creation/Selection: Development begins with an issue in the relevant GitHub repository of the targeted plugin. If you're working on an issue (e.g., bug fix or feature request), ensure a detailed description is provided before starting development. If the description is unclear, ask the issue creator for clarification. Always use the appropriate issue template (e.g., bug report, feature request). Assign the issue to yourself to improve tracking and management. For discussions or questions, use GitHub Discussions, the Element Community Chat, or contact the repository manager. Development Phase: Once an issue is assigned, follow best practices to ensure maintainability and compatibility with other plugins. Key considerations include: Opencast API Class Usage: The Opencast PHP Library is integrated into the tool_opencast plugin. Use the opencastapi property of the api class for API calls instead of direct cURL functions, which are deprecated. Example usage: ```php use tool_opencast\\local\\api; use tool_opencast\\exception\\opencast_api_response_exception; // Exception handling class ... $api = api::get_instance($ocinstanceid); $response = $api->opencastapi->eventsApi->getAll(...); $code = $response['code']; if ($code != 200) { throw new opencast_api_response_exception($response); } ... ``` Note: More details on the Opencast API Library can be found here . Unified Exception Handling: From tool_opencast version 4.5-r4 , the opencast_api_response_exception class is introduced to handle API call exceptions in a centralized way. Therefore, using it is highly encouraged! Plugin Interconnectivity: Changes in one plugin may impact others. Before making changes, understand how plugins interact, especially the api class in tool_opencast , which is widely used across all plugins. Coding Standards: All plugins follow Moodle's coding standards, enforced through moodle-plugin-ci in GitHub Actions. Always create a pull request instead of directly pushing changes in order to make sure the checks are passed. A PR is only reviewed if all automated checks pass. Automated Testing: If your changes affect existing functionality or introduce new features, include appropriate PHPUnit or Behat tests to ensure stability. Creating Pull Requests: Every change must be submitted via a pull request (PR) against the main branch of the targeted plugin. Add relevant labels to PRs and issues. Assign a reviewer only when all CI checks pass . Ensure PR descriptions are comprehensive, covering dependencies, test scenarios, and additional context. Address reviewer feedback promptly to facilitate merging. Developer Group Meetings Participation: The Moodle Opencast community holds a developer group meeting every second Friday of the month, alternating with core meetings. Participation is encouraged to stay informed about the latest developments, roadmaps, and to ask questions. For details, check the official community calendar and look for [Moodle] Dev Group Meeting .","title":"Development Lifecycle"},{"location":"filter/about/","text":"Opencast Filter Plugin The Opencast Filter plugin enhances the way Opencast videos are displayed in Moodle by automatically embedding them within an iframe. When a user adds the video in the text editor and selects an Opencast video via Opencast Repository video selection form, this filter plugin replaces the link with an iframe that loads the Paella Player , ensuring a seamless video playback experience within Moodle. It is important to note that the filter itself does not modify the embedded content; it simply processes the links created by the repository and displays the appropriate video. For more details on configuring and using the Opencast repository, refer to the Repository Opencast documentation . Installation The Opencast filter plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle. Requirements The following plugins are required for full functionality: Opencast API plugin (tool_opencast) Opencat activity plugin (mod_opencast) Opencast repository plugin (repository_opencast) : While the filter can be installed without this plugin, it is required to enable teachers to insert Opencast videos into the text editor. Configuration For detailed configuration instructions, refer to the settings page .","title":"About"},{"location":"filter/about/#opencast-filter-plugin","text":"The Opencast Filter plugin enhances the way Opencast videos are displayed in Moodle by automatically embedding them within an iframe. When a user adds the video in the text editor and selects an Opencast video via Opencast Repository video selection form, this filter plugin replaces the link with an iframe that loads the Paella Player , ensuring a seamless video playback experience within Moodle. It is important to note that the filter itself does not modify the embedded content; it simply processes the links created by the repository and displays the appropriate video. For more details on configuring and using the Opencast repository, refer to the Repository Opencast documentation .","title":"Opencast Filter Plugin"},{"location":"filter/about/#installation","text":"The Opencast filter plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle.","title":"Installation"},{"location":"filter/about/#requirements","text":"The following plugins are required for full functionality: Opencast API plugin (tool_opencast) Opencat activity plugin (mod_opencast) Opencast repository plugin (repository_opencast) : While the filter can be installed without this plugin, it is required to enable teachers to insert Opencast videos into the text editor.","title":"Requirements"},{"location":"filter/about/#configuration","text":"For detailed configuration instructions, refer to the settings page .","title":"Configuration"},{"location":"filter/settings/","text":"Settings The plugin provides the following configuration options: URL templates for filtering: Defines the URL patterns that will be replaced with the Opencast player. To determine the correct URL, check which URL is inserted into the text by the repository. Typically, only one URL needs to be defined. Use the placeholder \\[EPISODEID] in the URL to indicate where the episode ID should be inserted, e.g., http://stable.opencast.de/play/[EPISODEID] . URL to Paella config.json : Specifies an absolute or relative URL to the config.json file used by the Paella Player. This configuration file can be customized to modify the appearance or behavior of the Paella Player. Enable LTI authentication: Enables authentication to ensure videos are displayed correctly when Opencast is behind the Secure Static Files security layer. When enabled, videos will be displayed in the default Opencast video player. It uses the LTI Credentials configured in Opencast API (tool_opencast) plugin. Important Note : As mentioned in the Opencast API (tool_opencast) plugin settings , if you plan to use the LTI Authentication feature and have a multi-node Opencast instance, you must add an additional role ( ROLE_UI_EVENTS_EMBEDDING_CODE_VIEW ) to the Opencast API user's roles to ensure proper functionality. NOTE : After configuring this plugin, you must activate it in the filters.","title":"Settings"},{"location":"filter/settings/#settings","text":"The plugin provides the following configuration options: URL templates for filtering: Defines the URL patterns that will be replaced with the Opencast player. To determine the correct URL, check which URL is inserted into the text by the repository. Typically, only one URL needs to be defined. Use the placeholder \\[EPISODEID] in the URL to indicate where the episode ID should be inserted, e.g., http://stable.opencast.de/play/[EPISODEID] . URL to Paella config.json : Specifies an absolute or relative URL to the config.json file used by the Paella Player. This configuration file can be customized to modify the appearance or behavior of the Paella Player. Enable LTI authentication: Enables authentication to ensure videos are displayed correctly when Opencast is behind the Secure Static Files security layer. When enabled, videos will be displayed in the default Opencast video player. It uses the LTI Credentials configured in Opencast API (tool_opencast) plugin. Important Note : As mentioned in the Opencast API (tool_opencast) plugin settings , if you plan to use the LTI Authentication feature and have a multi-node Opencast instance, you must add an additional role ( ROLE_UI_EVENTS_EMBEDDING_CODE_VIEW ) to the Opencast API user's roles to ensure proper functionality. NOTE : After configuring this plugin, you must activate it in the filters.","title":"Settings"},{"location":"mod/about/","text":"Opencast activity plugin The Opencast Activity plugin enables the seamless integration of Opencast episodes and series into Moodle courses, providing an efficient way to display and view videos directly within the learning environment. Users with appropriate permissions (referred to as teachers) can easily select existing Opencast episodes or series and embed them within their courses. The built-in Paella player allows students to watch the videos directly in Moodle without the need for external applications. As with any Moodle activity, teachers can manage access to videos based on criteria such as dates, grades, or user profiles. In addition to displaying videos, the plugin allows teachers to upload new videos directly to Opencast by simply dragging and dropping video files onto the course homepage while in editing mode. For added convenience, the Opencast Videos block provides an option to quickly create Opencast Activity instances, making it easier and more efficient to integrate videos into Moodle courses. Installation The Opencast Activity plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle. Requirements The following plugins are required or recommended for the proper functioning of the Opencast Activity plugin: Required: Opencast API plugin (tool_opencast) \u2013 Provides core API functionalities for communication with the Opencast system. Recommended: Opencast Videos block (block_opencast) \u2013 Enhances the user experience by offering additional video management and quick activity creation features. Use Case Scenarios The following use cases describe how the Opencast Activity plugin can be used to provide Opencast series or episodes within Moodle. Use Case 1 - Providing a Series Teachers can provide an entire Opencast series, such as a collection of lecture recordings, to students. Add a new \"Video (Opencast)\" activity. Choose the series or manually enter the Opencast series ID to display it. Configure additional settings such as access restrictions if needed. The series can be displayed in either a list view or a preview view: 4.1. List View: 4.2. Preview View: Use Case 2 - Providing an Episode Teachers can provide a single Opencast episode, such as a specific lecture video, to students. Add a new \"Video (Opencast)\" activity. Choose the series or manually enter the Opencast episode ID. The system will automatically recognize it as an episode. Configure additional settings such as access restrictions if needed. The episode will be displayed with an embedded player for immediate viewing. Use Case 3 - Uploading a Video via Drag and Drop Teachers can conveniently upload videos to Opencast by dragging and dropping files onto the Moodle course page (sections). Drag and drop a video file onto a course section while in editing mode. Select \" Upload video file to Opencast \" in the activity/resource dialog and click \"Upload\". Locate the newly added Opencast activity in the course section. The name will follow the pattern: \"Upload video: [video filename]\". Click the activity link. Fill in the required details and click \"Add video\". A confirmation message will appear on the course page after successful upload. Configuration For detailed configuration instructions, refer to the settings page .","title":"About"},{"location":"mod/about/#opencast-activity-plugin","text":"The Opencast Activity plugin enables the seamless integration of Opencast episodes and series into Moodle courses, providing an efficient way to display and view videos directly within the learning environment. Users with appropriate permissions (referred to as teachers) can easily select existing Opencast episodes or series and embed them within their courses. The built-in Paella player allows students to watch the videos directly in Moodle without the need for external applications. As with any Moodle activity, teachers can manage access to videos based on criteria such as dates, grades, or user profiles. In addition to displaying videos, the plugin allows teachers to upload new videos directly to Opencast by simply dragging and dropping video files onto the course homepage while in editing mode. For added convenience, the Opencast Videos block provides an option to quickly create Opencast Activity instances, making it easier and more efficient to integrate videos into Moodle courses.","title":"Opencast activity plugin"},{"location":"mod/about/#installation","text":"The Opencast Activity plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle.","title":"Installation"},{"location":"mod/about/#requirements","text":"The following plugins are required or recommended for the proper functioning of the Opencast Activity plugin: Required: Opencast API plugin (tool_opencast) \u2013 Provides core API functionalities for communication with the Opencast system. Recommended: Opencast Videos block (block_opencast) \u2013 Enhances the user experience by offering additional video management and quick activity creation features.","title":"Requirements"},{"location":"mod/about/#use-case-scenarios","text":"The following use cases describe how the Opencast Activity plugin can be used to provide Opencast series or episodes within Moodle.","title":"Use Case Scenarios"},{"location":"mod/about/#use-case-1-providing-a-series","text":"Teachers can provide an entire Opencast series, such as a collection of lecture recordings, to students. Add a new \"Video (Opencast)\" activity. Choose the series or manually enter the Opencast series ID to display it. Configure additional settings such as access restrictions if needed. The series can be displayed in either a list view or a preview view: 4.1. List View: 4.2. Preview View:","title":"Use Case 1 - Providing a Series"},{"location":"mod/about/#use-case-2-providing-an-episode","text":"Teachers can provide a single Opencast episode, such as a specific lecture video, to students. Add a new \"Video (Opencast)\" activity. Choose the series or manually enter the Opencast episode ID. The system will automatically recognize it as an episode. Configure additional settings such as access restrictions if needed. The episode will be displayed with an embedded player for immediate viewing.","title":"Use Case 2 - Providing an Episode"},{"location":"mod/about/#use-case-3-uploading-a-video-via-drag-and-drop","text":"Teachers can conveniently upload videos to Opencast by dragging and dropping files onto the Moodle course page (sections). Drag and drop a video file onto a course section while in editing mode. Select \" Upload video file to Opencast \" in the activity/resource dialog and click \"Upload\". Locate the newly added Opencast activity in the course section. The name will follow the pattern: \"Upload video: [video filename]\". Click the activity link. Fill in the required details and click \"Add video\". A confirmation message will appear on the course page after successful upload.","title":"Use Case 3 - Uploading a Video via Drag and Drop"},{"location":"mod/about/#configuration","text":"For detailed configuration instructions, refer to the settings page .","title":"Configuration"},{"location":"mod/settings/","text":"Settings General settings The Opencast Activity plugin includes three mandatory settings that can be configured by the administrator. Opencast Channel: Specifies the Opencast channel where videos are published. Only videos published in this channel can be displayed within the activity. The publication must include media files, such as .mp4 files, that are compatible with the Paella player. URL to Paella config.json: Defines the path to the Paella player configuration file. Administrators can modify this configuration to customize the player's appearance and behavior. URL to Paella theme.json: Specifies the path to the Paella player theme file. This can be adjusted to change the player's visual appearance. Download settings The Opencast Activity plugin offers a download feature that allows students to download videos via a dropdown menu. To enable this feature, the administrator must configure the Opencast Download Channel setting. This setting must reference a valid publication channel that includes downloadable media files, such as .mp4 files. By default, the download feature is disabled at the activity level, requiring teachers to enable it manually. However, administrators can enable the Allow download by default option to create an \"opt-out\" scenario, where downloads are enabled by default and teachers must disable them manually if desired. Additionally, the Force student download setting ensures that the download option is always available to students and prevents teachers from modifying download permissions.","title":"Settings"},{"location":"mod/settings/#settings","text":"","title":"Settings"},{"location":"mod/settings/#general-settings","text":"The Opencast Activity plugin includes three mandatory settings that can be configured by the administrator. Opencast Channel: Specifies the Opencast channel where videos are published. Only videos published in this channel can be displayed within the activity. The publication must include media files, such as .mp4 files, that are compatible with the Paella player. URL to Paella config.json: Defines the path to the Paella player configuration file. Administrators can modify this configuration to customize the player's appearance and behavior. URL to Paella theme.json: Specifies the path to the Paella player theme file. This can be adjusted to change the player's visual appearance.","title":"General settings"},{"location":"mod/settings/#download-settings","text":"The Opencast Activity plugin offers a download feature that allows students to download videos via a dropdown menu. To enable this feature, the administrator must configure the Opencast Download Channel setting. This setting must reference a valid publication channel that includes downloadable media files, such as .mp4 files. By default, the download feature is disabled at the activity level, requiring teachers to enable it manually. However, administrators can enable the Allow download by default option to create an \"opt-out\" scenario, where downloads are enabled by default and teachers must disable them manually if desired. Additionally, the Force student download setting ensures that the download option is always available to students and prevents teachers from modifying download permissions.","title":"Download settings"},{"location":"repository/about/","text":"Opencast repository plugin The plugin allows teachers, to embed Opencast videos into a course. The repository displays all videos, that belong to the Opencast series, that are connected to the course. The repository is only available within a text editor and will paste the URL to the resource into the content. This URL will later be replaced via a Moodle filter , to show an embedded player. The repository works best in combination with the Opencast filter plugin. The filter will replace the link with an iFrame , which displays the Paella player. Installation The Opencast repository plugin is available from GitHub as well as from the Moodle plugins directory . Requirements tool_opencast Recommended: block_opencast Optional: filter_opencast Configuration The configuration of the Opencast repository plugin is documented in the settings page.","title":"About"},{"location":"repository/about/#opencast-repository-plugin","text":"The plugin allows teachers, to embed Opencast videos into a course. The repository displays all videos, that belong to the Opencast series, that are connected to the course. The repository is only available within a text editor and will paste the URL to the resource into the content. This URL will later be replaced via a Moodle filter , to show an embedded player. The repository works best in combination with the Opencast filter plugin. The filter will replace the link with an iFrame , which displays the Paella player.","title":"Opencast repository plugin"},{"location":"repository/about/#installation","text":"The Opencast repository plugin is available from GitHub as well as from the Moodle plugins directory .","title":"Installation"},{"location":"repository/about/#requirements","text":"tool_opencast Recommended: block_opencast Optional: filter_opencast","title":"Requirements"},{"location":"repository/about/#configuration","text":"The configuration of the Opencast repository plugin is documented in the settings page.","title":"Configuration"},{"location":"repository/settings/","text":"Settings In the settings of the repository plugin the repository instances can be configured. The possible options per repository instance are: Name: Name of the repository instance. Opencast instance: The Opencast instance, from which the repository retrieves videos. Opencast default author: The default author, that is displayed for a video, if the creator is not given. Empty by default. Opencast channelid: : The channel id of the publication in Opencast. With a default Opencast installation you can use engage-player . Preferred flavor to get thumbnail: : The flavor for the thumbnail. Leave empty for the Opencast default. Fallback flavor to get thumbnail: Fallback flavor for the thumbnail, if there is no thumbnail for the preferred flavor. Embedd URL to player instead of media file: Whether the URL to the Opencast player should be embedded. If this box is not checked, a direct link to a video file will be embedded. Flavor to get video: The flavor of the video. Leave empty, to use the Opencast default. Publication channels Opencast publishes its events in so-called publication channels. One default publication channel is, e.g., the engage-player channel. Each publication has a publication URL, which points to the page under which the video is published (e.g. an HTTP page with the Opencast player). Additionally, publications can contain a set of media data with URLs to the media files themselves (e.g. an MP4 file). For the configuration of the publication channel, you can either use the default publication channel engage-player or use your own publication channel. To use your own publication channel, you will have to modify the publish workflow and add a publish-configure operation. For example: <operation id=\"publish-configure\" exception-handler-workflow=\"partial-error\" description=\"Publish to external api publication channel\"> <configurations> <configuration key=\"channel-id\">api</configuration> <configuration key=\"mimetype\">application/json</configuration> <configuration key=\"source-tags\">engage-download,engage-streaming</configuration> <configuration key=\"url-pattern\">https://HOSTNAME/paella/ui/watch.html?id=${event_id}</configuration> <configuration key=\"with-published-elements\">false</configuration> <configuration key=\"check-availability\">true</configuration> </configurations> </operation>","title":"Settings"},{"location":"repository/settings/#settings","text":"In the settings of the repository plugin the repository instances can be configured. The possible options per repository instance are: Name: Name of the repository instance. Opencast instance: The Opencast instance, from which the repository retrieves videos. Opencast default author: The default author, that is displayed for a video, if the creator is not given. Empty by default. Opencast channelid: : The channel id of the publication in Opencast. With a default Opencast installation you can use engage-player . Preferred flavor to get thumbnail: : The flavor for the thumbnail. Leave empty for the Opencast default. Fallback flavor to get thumbnail: Fallback flavor for the thumbnail, if there is no thumbnail for the preferred flavor. Embedd URL to player instead of media file: Whether the URL to the Opencast player should be embedded. If this box is not checked, a direct link to a video file will be embedded. Flavor to get video: The flavor of the video. Leave empty, to use the Opencast default.","title":"Settings"},{"location":"repository/settings/#publication-channels","text":"Opencast publishes its events in so-called publication channels. One default publication channel is, e.g., the engage-player channel. Each publication has a publication URL, which points to the page under which the video is published (e.g. an HTTP page with the Opencast player). Additionally, publications can contain a set of media data with URLs to the media files themselves (e.g. an MP4 file). For the configuration of the publication channel, you can either use the default publication channel engage-player or use your own publication channel. To use your own publication channel, you will have to modify the publish workflow and add a publish-configure operation. For example: <operation id=\"publish-configure\" exception-handler-workflow=\"partial-error\" description=\"Publish to external api publication channel\"> <configurations> <configuration key=\"channel-id\">api</configuration> <configuration key=\"mimetype\">application/json</configuration> <configuration key=\"source-tags\">engage-download,engage-streaming</configuration> <configuration key=\"url-pattern\">https://HOSTNAME/paella/ui/watch.html?id=${event_id}</configuration> <configuration key=\"with-published-elements\">false</configuration> <configuration key=\"check-availability\">true</configuration> </configurations> </operation>","title":"Publication channels"},{"location":"tool/about/","text":"Opencast API plugin The Opencast API plugin serves as the core integration layer between Moodle and Opencast, providing essential API functions and general settings required by other Opencast-related plugins. This plugin plays a crucial role in managing the relationship between Moodle courses and Opencast series UIDs, ensuring seamless data mapping and synchronization. In addition to storing course-to-series associations, the Opencast API plugin offers web service endpoints that facilitate interaction with external tools such as the Opencast role provider , enabling streamlined user role management. Furthermore, the plugin acts as the central hub for communication and configuration, offering core functionalities, shared utilities, and foundational classes that support the operation of other Opencast plugins within Moodle. By utilizing this plugin, institutions can efficiently manage Opencast integrations, ensuring consistent and scalable workflows across their learning environments. Installation The Opencast API plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle. Configuration For detailed configuration instructions, refer to the settings page . NOTE : Starting from 2025, major settings of the Opencast Videos plugin will be integrated into the Opencast API plugin.","title":"About"},{"location":"tool/about/#opencast-api-plugin","text":"The Opencast API plugin serves as the core integration layer between Moodle and Opencast, providing essential API functions and general settings required by other Opencast-related plugins. This plugin plays a crucial role in managing the relationship between Moodle courses and Opencast series UIDs, ensuring seamless data mapping and synchronization. In addition to storing course-to-series associations, the Opencast API plugin offers web service endpoints that facilitate interaction with external tools such as the Opencast role provider , enabling streamlined user role management. Furthermore, the plugin acts as the central hub for communication and configuration, offering core functionalities, shared utilities, and foundational classes that support the operation of other Opencast plugins within Moodle. By utilizing this plugin, institutions can efficiently manage Opencast integrations, ensuring consistent and scalable workflows across their learning environments.","title":"Opencast API plugin"},{"location":"tool/about/#installation","text":"The Opencast API plugin can be obtained from the following sources: The GitHub repository , which provides the latest releases, source code, Roadmap and current developments. The Moodle plugins directory , offering a convenient \"Official\" installation package directly within Moodle.","title":"Installation"},{"location":"tool/about/#configuration","text":"For detailed configuration instructions, refer to the settings page . NOTE : Starting from 2025, major settings of the Opencast Videos plugin will be integrated into the Opencast API plugin.","title":"Configuration"},{"location":"tool/settings/","text":"Settings The configuration settings of the plugin consist of the following sections: Instances The plugin allows you to connect your Moodle instance to multiple Opencast instances. For each instance, you must configure the settings described below. The configured instances are listed in the table under Opencast Instances . You can add new instances by clicking on the Add instance button. Each instance is assigned an automatically generated, constant ID. Additionally, you can specify a custom name for each instance. The settings for each instance are displayed in a dedicated (sub-)section, labeled with the instance name. NOTE : The configuration (sub-)section for a newly added instance will be visible only after clicking Save changes . The same applies when deleting an instance. Each instance offers additional configurable options: Is visible to teachers : If enabled, videos from the corresponding instance are visible in the Opencast Videos block within a course. If disabled, the videos remain hidden. Default : There must be exactly one default instance. The default instance has the following properties: It is selected automatically in plugins such as Opencast H5P Integration. It takes precedence over other instances in dropdowns to select between instances. It determines the allowed video file extensions for drag-and-drop uploads in course activity sections (with edit mode enabled). Prerequisites Before configuring the Opencast API tool, a user must be created in Opencast with the following roles: ROLE_API ROLE_API_* ROLE_SUDO Once the user is created, it must be added to the group Opencast Project External Applications (role ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS ) or assigned the necessary API roles by other means. NOTE : The roles listed above are the minimum required; additional roles may be necessary, for example: ROLE_UI_EVENTS_EMBEDDING_CODE_VIEW : Required for using the Opencast Filter plugin with LTI authentication in a multi-node Opencast instance. ROLE_STUDIO : Required for access to Opencast Studio. Instance Configurations Each instance has the following configuration options, displayed in a dedicated (sub-)section named after the instance: Opencast API URL: The base URL of the Opencast system. If you have a multi-node Opencast setup, this should be the URL of the admin server. Provide the URL including http:// or https:// (e.g. https://stable.opencast.org ) Username of API user: The username of the previously created Opencast user. Password of API user: The password of the previously created Opencast user. Overall API request execution timeout: : Timeout (in milliseconds) for API requests to Opencast. Set to \"0\" for no limit. Connection timeout: Timeout (in milliseconds) for Moodle to establish a connection with Opencast. Set to \"0\" for no limit. If you wish to use LTI for user authentication (e.g., for Opencast Studio or with Secure Static Files enabled), configure the following settings: Consumer key: LTI Consumer key as set in Opencast. Consumer secret: LTI Consumer secret as set in Opencast. For LTI configuration details, see LTI . Maintenance Settings The maintenance settings section allows you to control access to Opencast during maintenance periods. Options include: Maintenance mode : Choose between: Disable: No maintenance. Read Only: Access is restricted to reading data only. Enable: Full access restriction. Notification Level : Define the severity of the maintenance message (Warning, Error, Information, Success). Maintenance Message : The notification message displayed during maintenance. If empty, a default generic message will be displayed. Maintenance starts at : The start date/time of maintenance. Maintenance ends at : The end date/time of maintenance. NOTE : You can synchronize Opencast maintenance settings using the Sync Opencast Maintenance Mode button (feature pending implementation). Connection test tool You can verify your API user configuration by clicking the Connection Test Tool button. This tool checks if Moodle can successfully connect to Opencast and authenticate with the configured API user.","title":"Settings"},{"location":"tool/settings/#settings","text":"The configuration settings of the plugin consist of the following sections:","title":"Settings"},{"location":"tool/settings/#instances","text":"The plugin allows you to connect your Moodle instance to multiple Opencast instances. For each instance, you must configure the settings described below. The configured instances are listed in the table under Opencast Instances . You can add new instances by clicking on the Add instance button. Each instance is assigned an automatically generated, constant ID. Additionally, you can specify a custom name for each instance. The settings for each instance are displayed in a dedicated (sub-)section, labeled with the instance name. NOTE : The configuration (sub-)section for a newly added instance will be visible only after clicking Save changes . The same applies when deleting an instance. Each instance offers additional configurable options: Is visible to teachers : If enabled, videos from the corresponding instance are visible in the Opencast Videos block within a course. If disabled, the videos remain hidden. Default : There must be exactly one default instance. The default instance has the following properties: It is selected automatically in plugins such as Opencast H5P Integration. It takes precedence over other instances in dropdowns to select between instances. It determines the allowed video file extensions for drag-and-drop uploads in course activity sections (with edit mode enabled).","title":"Instances"},{"location":"tool/settings/#prerequisites","text":"Before configuring the Opencast API tool, a user must be created in Opencast with the following roles: ROLE_API ROLE_API_* ROLE_SUDO Once the user is created, it must be added to the group Opencast Project External Applications (role ROLE_GROUP_MH_DEFAULT_ORG_EXTERNAL_APPLICATIONS ) or assigned the necessary API roles by other means. NOTE : The roles listed above are the minimum required; additional roles may be necessary, for example: ROLE_UI_EVENTS_EMBEDDING_CODE_VIEW : Required for using the Opencast Filter plugin with LTI authentication in a multi-node Opencast instance. ROLE_STUDIO : Required for access to Opencast Studio.","title":"Prerequisites"},{"location":"tool/settings/#instance-configurations","text":"Each instance has the following configuration options, displayed in a dedicated (sub-)section named after the instance: Opencast API URL: The base URL of the Opencast system. If you have a multi-node Opencast setup, this should be the URL of the admin server. Provide the URL including http:// or https:// (e.g. https://stable.opencast.org ) Username of API user: The username of the previously created Opencast user. Password of API user: The password of the previously created Opencast user. Overall API request execution timeout: : Timeout (in milliseconds) for API requests to Opencast. Set to \"0\" for no limit. Connection timeout: Timeout (in milliseconds) for Moodle to establish a connection with Opencast. Set to \"0\" for no limit. If you wish to use LTI for user authentication (e.g., for Opencast Studio or with Secure Static Files enabled), configure the following settings: Consumer key: LTI Consumer key as set in Opencast. Consumer secret: LTI Consumer secret as set in Opencast. For LTI configuration details, see LTI .","title":"Instance Configurations"},{"location":"tool/settings/#maintenance-settings","text":"The maintenance settings section allows you to control access to Opencast during maintenance periods. Options include: Maintenance mode : Choose between: Disable: No maintenance. Read Only: Access is restricted to reading data only. Enable: Full access restriction. Notification Level : Define the severity of the maintenance message (Warning, Error, Information, Success). Maintenance Message : The notification message displayed during maintenance. If empty, a default generic message will be displayed. Maintenance starts at : The start date/time of maintenance. Maintenance ends at : The end date/time of maintenance. NOTE : You can synchronize Opencast maintenance settings using the Sync Opencast Maintenance Mode button (feature pending implementation).","title":"Maintenance Settings"},{"location":"tool/settings/#connection-test-tool","text":"You can verify your API user configuration by clicking the Connection Test Tool button. This tool checks if Moodle can successfully connect to Opencast and authenticate with the configured API user.","title":"Connection test tool"}]}